{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/material-x/source/style.less","path":"style.less","modified":1,"renderable":1},{"_id":"themes/material-x/source/fonts/Monaco.ttf","path":"fonts/Monaco.ttf","modified":1,"renderable":1},{"_id":"themes/material-x/source/js/app.js","path":"js/app.js","modified":1,"renderable":1},{"_id":"themes/material-x/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/material-x/source/js/volantis.js","path":"js/volantis.js","modified":1,"renderable":1},{"_id":"themes/material-x/source/fonts/Skranji-Regular.ttf","path":"fonts/Skranji-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/material-x/source/fonts/Ubuntu-Regular.ttf","path":"fonts/Ubuntu-Regular.ttf","modified":1,"renderable":1}],"Cache":[{"_id":"source/404.md","hash":"a2831af51e0ff99ab592c07db840345f16b0e40a","modified":1560396360780},{"_id":"themes/material-x/.git","hash":"bdc108419733f1a2b3579a4ac35b696cba1499ec","modified":1560397002142},{"_id":"themes/material-x/.gitignore","hash":"f875b6524d4c61e5de0a1d9efdec1fe451d7bc07","modified":1560397002142},{"_id":"themes/material-x/LICENSE","hash":"13b0862f4ed1914abe887a47df2c3ca5adfa8f3f","modified":1560397002142},{"_id":"themes/material-x/README.md","hash":"b497d2c298d6ca35c5ccf9793baa0ceab77b64bf","modified":1560397002142},{"_id":"themes/material-x/_config.yml","hash":"856e250c0308726b3c0f838169d8e4aeb05b5e5f","modified":1560396774815},{"_id":"source/about/index.md","hash":"e36ebd0a9b5aeb894bf111d6d2e997a0b1d3840e","modified":1560396360780},{"_id":"source/friends/index.md","hash":"63d3276ba533e92b392da757f6882b35cb97bc94","modified":1560396360780},{"_id":"themes/material-x/languages/en.yml","hash":"3e0c3b617f282ca66d7cff444c9671ea7bb1a503","modified":1560397002142},{"_id":"themes/material-x/languages/zh-CN.yml","hash":"c3a9d3831f1cef9edd2429b4766c359e21673dde","modified":1560397002142},{"_id":"themes/material-x/languages/zh-HK.yml","hash":"fb5510c20171654d2ebc1ac780a1d6cc596fbd37","modified":1560397002142},{"_id":"themes/material-x/languages/zh-TW.yml","hash":"b8bc7643f790c9da2ec6741af5eeca3dc2e0417a","modified":1560397002142},{"_id":"themes/material-x/layout/archive.ejs","hash":"6b36ef79379f65952df9f27475f73d191d22657e","modified":1560397002142},{"_id":"themes/material-x/layout/category.ejs","hash":"ff5b299f7b0f3668174314c57ffe0389891399a6","modified":1560397002142},{"_id":"themes/material-x/layout/index.ejs","hash":"03ba528ba647d8ad184a2dd08e1c2c3ac4dd7baa","modified":1560397002146},{"_id":"themes/material-x/layout/links.ejs","hash":"65fa60924151666fbb814b958ec9b5b231ab0ab9","modified":1560397002146},{"_id":"themes/material-x/layout/layout.ejs","hash":"9c262bfa12dd43d434d86deea6adf8dfdf46d5b4","modified":1560397002146},{"_id":"themes/material-x/layout/list.ejs","hash":"3466d6dede7aab729b2986c145d95154af0856f2","modified":1560397002146},{"_id":"themes/material-x/layout/page.ejs","hash":"3dd6f14881ac16a8ceb48a1d9f9f5d0377cd082c","modified":1560397002146},{"_id":"themes/material-x/layout/post.ejs","hash":"3dd6f14881ac16a8ceb48a1d9f9f5d0377cd082c","modified":1560397002146},{"_id":"themes/material-x/layout/tag.ejs","hash":"ddbfca0cb18d9ceb47611fa3c7e8a8b5ecf31085","modified":1560397002146},{"_id":"themes/material-x/source/style.less","hash":"bd90f674eca5279de970627ce19f20fd784c293a","modified":1560397002150},{"_id":"source/_posts/blog/2014-03-02-smart-questions.md","hash":"730663865d29707da18e4fc16f65db92613b31ab","modified":1560396360780},{"_id":"source/_posts/blog/2014-02-26-startup-my-blog.md","hash":"91391eb7ae69a286cef6f66d403608b3eed87fd7","modified":1560396360780},{"_id":"source/_posts/blog/2014-03-10-crash-about-memory.md","hash":"697c5fb7fc74e317a90bc340136efc166b3aa2ae","modified":1560396360780},{"_id":"source/_posts/blog/2014-04-04-about-redis.md","hash":"9bab551680b8a7bead3afb0613de55e795fc814c","modified":1560396360780},{"_id":"source/_posts/blog/2014-04-10-install-nginx-on-ubuntu.md","hash":"395d9b25fbfb904dcc6041284e276692ca509d07","modified":1560396360780},{"_id":"source/_posts/blog/2014-03-24-cycling-to-hengqin.md","hash":"c2e40347f9ef9ce48d7630a0d1cd71258f51ebfc","modified":1560396360780},{"_id":"source/_posts/blog/2014-04-26-install-archlinux.md","hash":"d606f64dc4ddb8a5f6efb2f6e94e06410336e01f","modified":1560396360780},{"_id":"source/_posts/blog/2014-07-09-about-sizeof.md","hash":"fa938c93a1820e7ed50ae1e0c15e6562c6484064","modified":1560396360780},{"_id":"source/_posts/blog/Xcode-keyboard-shortcuts.md","hash":"4a76f94c70d54938a4e7ff4f35eae52ff765b881","modified":1560396360780},{"_id":"source/_posts/blog/2015-03-14-tools.md","hash":"52e23ba4e7d477b6cf17fcb75a782e8add934c80","modified":1560396360780},{"_id":"source/_posts/blog/blog-from-jekyll-to-hexo.md","hash":"982ad47da14946cc654ba6d733ee454ef8fc6f68","modified":1560396360780},{"_id":"source/_posts/blog/an-ios-view-crash-error.md","hash":"f1ab8e7dc235f3835b105d0da77eee0abb738f9d","modified":1560396360780},{"_id":"source/_posts/blog/2015-04-10-ldapadmin-design.md","hash":"4cd74a16fdf1d79d5c7276f2670cdf5ee342a80b","modified":1560396360780},{"_id":"source/_posts/blog/conditional-unwrapping-initialization.md","hash":"38904cd4d5bf4bec6c1d774c83de249c20b92562","modified":1560396360780},{"_id":"source/_posts/blog/basic-operators.md","hash":"86e938c80bb9ab1e9a7104faa281d62f9538dfa0","modified":1560396360780},{"_id":"source/_posts/blog/hello-world.md","hash":"d4b269f216a304778e24cbee723e3434e3ce7352","modified":1560396360780},{"_id":"source/_posts/blog/how-to-use-curl.md","hash":"9cf540ce881b6d61451f0648f2e279ec570327d9","modified":1560396360780},{"_id":"source/_posts/blog/markdown语法.md","hash":"0e1a1f2e285626e9495cd5fe507b6b1d1bf6816b","modified":1560396360780},{"_id":"source/_posts/blog/pandas.md","hash":"598ac8df4738d532d42cfb97460f9cfa2d86385e","modified":1560396360780},{"_id":"source/_posts/blog/ml-general-workflow.md","hash":"413a5aa9c14c95437fb9022992b2dffd496a4bb7","modified":1560396360780},{"_id":"source/blog/categories/index.md","hash":"bcbd5f0ff024207da43bd32b4b58cb8998f4db4c","modified":1560396360780},{"_id":"source/_posts/blog/the-solution-of-retain-cycle.md","hash":"0dac7b31ca518d1b7822b443c60cce6ab05b7ff1","modified":1560396360780},{"_id":"source/_posts/blog/自控力读书笔记.md","hash":"4aecb6796862a8a58e0d650a731ca09746c9df30","modified":1560396360780},{"_id":"source/blog/tags/index.md","hash":"c611dc2ac446dcc83a01ccd88bc1148bca4fe9cf","modified":1560396360780},{"_id":"themes/material-x/.github/ISSUE_TEMPLATE/------.md","hash":"cc03dbf4326b9cd0f5a8a024bf6bb622334eca3f","modified":1560397002142},{"_id":"themes/material-x/layout/_meta/author.ejs","hash":"cebe5d05c7588fb206c64b414b0bad2fca39a7cb","modified":1560397002142},{"_id":"themes/material-x/layout/_meta/categories.ejs","hash":"4b5a6cd4a55742b5963dcd63c3bd9fb8534ba178","modified":1560397002142},{"_id":"themes/material-x/layout/_cover/search.ejs","hash":"c5c79e41c43efadf41ffc2393152b89213351d00","modified":1560397002142},{"_id":"themes/material-x/layout/_meta/counter.ejs","hash":"7a22e5cec94673edcb084680df445aa7d800ca2e","modified":1560397002142},{"_id":"themes/material-x/layout/_meta/date.ejs","hash":"0ef066dc7247464359a85d9c39010c1e7e9ffb1d","modified":1560397002142},{"_id":"themes/material-x/layout/_meta/share.ejs","hash":"96cac09c9906283f454039a9f5c0302104338e64","modified":1560397002142},{"_id":"themes/material-x/layout/_meta/music.ejs","hash":"1ac33225b2dfc4d5498a86266f97082a8bf135ec","modified":1560397002142},{"_id":"themes/material-x/layout/_meta/tags.ejs","hash":"ca10c85f988b96f332d09d20016c78974cbc925d","modified":1560397002142},{"_id":"themes/material-x/layout/_meta/thumbnail.ejs","hash":"99f3e0438be97f9462d9a9189117260d811da2e1","modified":1560397002142},{"_id":"themes/material-x/layout/_meta/title.ejs","hash":"58f30ee662f22f55ef9191e06390229beda20694","modified":1560397002142},{"_id":"themes/material-x/layout/_partial/archive.ejs","hash":"ca70dd02c7efb4067c453e8a9414bd3f203db926","modified":1560397002142},{"_id":"themes/material-x/layout/_meta/top.ejs","hash":"e4e8bf49173f757ed19ed49d07e0db03f146e989","modified":1560397002142},{"_id":"themes/material-x/layout/_partial/article.ejs","hash":"f7e366529355d06cfd4070ed9fae994be09abd25","modified":1560397002142},{"_id":"themes/material-x/layout/_partial/cover.ejs","hash":"61430899b26806df450ab75e021534b482ad7746","modified":1560397002142},{"_id":"themes/material-x/layout/_partial/categories.ejs","hash":"12b2fca703fa56da7a85045bf17499845c3fe5bb","modified":1560397002142},{"_id":"themes/material-x/layout/_partial/footer.ejs","hash":"ea1e86c615aa8cc6a3f6d073223e9c229a135a26","modified":1560397002142},{"_id":"themes/material-x/layout/_partial/head.ejs","hash":"d4fefdaf1b311daa5a9df2e34fd78320272c505f","modified":1560397002142},{"_id":"themes/material-x/layout/_partial/header.ejs","hash":"846d5496b7a26120ca92e038860707fa70bcaa30","modified":1560397002142},{"_id":"themes/material-x/layout/_partial/mathjax.ejs","hash":"a51a072654643ecf850f813a31dd40d746f8ab96","modified":1560397002142},{"_id":"themes/material-x/layout/_partial/meta.ejs","hash":"9d6a39dd84cc14c31a3fc36e9e0e5ee1f168e53f","modified":1560397002142},{"_id":"themes/material-x/layout/_partial/post.ejs","hash":"6e7a5e3c2894778d8476d01603ab1790f7ccfe00","modified":1560397002142},{"_id":"themes/material-x/layout/_meta/updated.ejs","hash":"2d6e1e234721b930308caf61d2d086213f2389e4","modified":1560397002142},{"_id":"themes/material-x/layout/_partial/scripts.ejs","hash":"03026fb8f6d18b70f6af6dae2f434ddca98d9813","modified":1560397002142},{"_id":"themes/material-x/layout/_partial/side.ejs","hash":"da987d6feed88023241ea3ee33f390fc47b5c179","modified":1560397002142},{"_id":"themes/material-x/layout/_third-party/aplayer.ejs","hash":"9260682432e0a80261435b4bd27ccf16b8d96fed","modified":1560397002142},{"_id":"themes/material-x/layout/_third-party/clipboard.ejs","hash":"628a0ff18fecc3c866070517aad19366c00f417c","modified":1560397002142},{"_id":"themes/material-x/layout/_third-party/comments.ejs","hash":"e0805f203c7527a852a414ddd21425af4fed0218","modified":1560397002142},{"_id":"themes/material-x/layout/_third-party/fancybox.ejs","hash":"a840db5c132ded3be61e748ef1feadae1435465d","modified":1560397002142},{"_id":"themes/material-x/layout/_third-party/share.ejs","hash":"5b2a57aac6df2be654e45104177a9382641d7584","modified":1560397002142},{"_id":"themes/material-x/layout/_widget/author.ejs","hash":"630967f53c7f8df561022a6230f4791b2c1fde95","modified":1560397002142},{"_id":"themes/material-x/layout/_widget/category.ejs","hash":"a4b3059bb77841a0569243b2ef474ba1fd67ca3a","modified":1560397002142},{"_id":"themes/material-x/layout/_widget/grid.ejs","hash":"33372405602c2bd6dcff42011d14998e5a2b2b70","modified":1560397002142},{"_id":"themes/material-x/layout/_widget/header.ejs","hash":"d542654385da91d26c0647aae0155a7c3fe14d1d","modified":1560397002142},{"_id":"themes/material-x/layout/_widget/list.ejs","hash":"2ce0d61c140852c84d6f0e52b063b0403836be37","modified":1560397002142},{"_id":"themes/material-x/layout/_widget/music.ejs","hash":"a02103653676ab8016b2c4e93c7cd402d4a889bc","modified":1560397002142},{"_id":"themes/material-x/layout/_widget/plain.ejs","hash":"27737e8f046ee3e8907a3ebb86e9800d405a7f4a","modified":1560397002142},{"_id":"themes/material-x/layout/_widget/related_posts.ejs","hash":"aaf497403902a6bd2066c3a7de9b99170914daa4","modified":1560397002142},{"_id":"themes/material-x/layout/_widget/tagcloud.ejs","hash":"b81b89ee0f62768e0cc97cfb2442cdb903ca559a","modified":1560397002142},{"_id":"themes/material-x/layout/_widget/toc.ejs","hash":"dd5f82c8965da414d96d935645fc27f9f3f05566","modified":1560397002142},{"_id":"themes/material-x/source/fonts/Monaco.ttf","hash":"d4de9305ce9e916ece179c3ab3b1faf80cc52bbb","modified":1560397002146},{"_id":"themes/material-x/source/js/app.js","hash":"20ba53cc54035dd091605508155ce54f8491f34e","modified":1560397002146},{"_id":"themes/material-x/source/js/search.js","hash":"603215c3ae9d2f3c019753dd6c9d228302505bb3","modified":1560397002146},{"_id":"themes/material-x/source/less/_archive.less","hash":"13503b9ef5d45782ad44af3b7509191da5824284","modified":1560397002146},{"_id":"themes/material-x/source/less/_base.less","hash":"f56fe042567bc149eed3b29fe09618c60b0d6733","modified":1560397002150},{"_id":"themes/material-x/source/less/_color.less","hash":"95b8a3a4d51a13ef231a498d916aa026470663dd","modified":1560397002150},{"_id":"themes/material-x/source/less/_article.less","hash":"98b835a7bb513a88ec4e5f163923b262eacb640d","modified":1560397002150},{"_id":"themes/material-x/source/less/_defines.less","hash":"59912db57e6051debd70487848501e6ad0a016ed","modified":1560397002150},{"_id":"themes/material-x/source/less/_fonts.less","hash":"0d98499e28ecce54c3e2a2f4f09011c24c4307e9","modified":1560397002150},{"_id":"themes/material-x/source/less/_footer.less","hash":"f53de1b635591582ec9b1ec74249a622fc2cb8fa","modified":1560397002150},{"_id":"themes/material-x/source/less/_header.less","hash":"9bb49870c459318e1dbb1302ad35645befbf9896","modified":1560397002150},{"_id":"themes/material-x/source/less/_layout.less","hash":"d44abc94ffe5e4f70ecc8e5861ae05fb49f1da88","modified":1560397002150},{"_id":"themes/material-x/source/less/_links.less","hash":"13d1ba7fa0a43b00dee925160c108f01eb212285","modified":1560397002150},{"_id":"themes/material-x/source/less/_main.less","hash":"a4898d344e60c08249750b5eca3c6dbd11e2a4e3","modified":1560397002150},{"_id":"themes/material-x/source/less/_normalize.less","hash":"f092813604db20a84c62ef889411598e78d14599","modified":1560397002150},{"_id":"themes/material-x/source/less/_search.less","hash":"7d8470699ed21c63ad6281d5934cadead109d97c","modified":1560397002150},{"_id":"themes/material-x/source/less/_pagination.less","hash":"165e2c369faf70858b731bb6d483d8991259887e","modified":1560397002150},{"_id":"themes/material-x/source/less/_side.less","hash":"85b5a080defb327d4739356ec872b4e6346c12d2","modified":1560397002150},{"_id":"themes/material-x/source/less/_toc.less","hash":"6d8c644aebe6fd6d9b657bd2b037ab4296fe80b1","modified":1560397002150},{"_id":"themes/material-x/source/less/_tog.less","hash":"73e72c4efd04a8721a87002de1a8a0201e1f5564","modified":1560397002150},{"_id":"themes/material-x/source/less/_typo.less","hash":"6a93f9fab3e1dfac4dc80dd77bf6b1223b5fb058","modified":1560397002150},{"_id":"themes/material-x/source/js/volantis.js","hash":"28fcd2db5a696d2f327eb53d95e711c3f2574240","modified":1560397002146},{"_id":"themes/material-x/source/fonts/Skranji-Regular.ttf","hash":"485dc033e34a5a92a45ffe5839514f0471b18208","modified":1560397002146},{"_id":"themes/material-x/source/fonts/Ubuntu-Regular.ttf","hash":"b100b2ed912a91e4d0a7c5f5309fe8ad7b3a2dd8","modified":1560397002146}],"Category":[{"name":"技术","_id":"cjwu44hn80007fvuj5n3i9aj5"},{"name":"生活","_id":"cjwu44hng000ofvuj3avkgnd1"},{"name":"教程","_id":"cjwu44hni000vfvujwql7y4x9"},{"name":"工具","_id":"cjwu44hnk0012fvuj6r8z664u"},{"name":"笔记","_id":"cjwu44hnr001wfvujebg587iv"}],"Data":[],"Page":[{"layout":"page","title":"404 Not Found","body":["article","comments"],"meta":{"header":false,"footer":false},"sidebar":false,"valine":{"path":"/404.html","placeholder":"请留言告诉我您要访问哪个页面找不到了"},"_content":"\n# <center>**404 Not Found**</center>\n\n<br>\n\n<center>**很抱歉，您访问的页面不存在**</center>\n<center>可能是输入地址有误或该地址已被删除</center>\n\n<br>\n<br>","source":"404.md","raw":"---\nlayout: page\ntitle: 404 Not Found\nbody: [article, comments]\nmeta:\n  header: false\n  footer: false\nsidebar: false\nvaline:\n  path: /404.html\n  placeholder: 请留言告诉我您要访问哪个页面找不到了\n---\n\n# <center>**404 Not Found**</center>\n\n<br>\n\n<center>**很抱歉，您访问的页面不存在**</center>\n<center>可能是输入地址有误或该地址已被删除</center>\n\n<br>\n<br>","date":"2019-06-13T03:26:00.780Z","updated":"2019-06-13T03:26:00.780Z","path":"404.html","comments":1,"_id":"cjwu44hlq0000fvujov3o742u","content":"<h1 id=\"404-Not-Found\"><a href=\"#404-Not-Found\" class=\"headerlink\" title=\"404 Not Found\"></a><center><strong>404 Not Found</strong></center></h1><br>\n\n<center>**很抱歉，您访问的页面不存在**</center>\n<center>可能是输入地址有误或该地址已被删除</center>\n\n<br>\n<br>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"404-Not-Found\"><a href=\"#404-Not-Found\" class=\"headerlink\" title=\"404 Not Found\"></a><center><strong>404 Not Found</strong></center></h1><br>\n\n<center>**很抱歉，您访问的页面不存在**</center>\n<center>可能是输入地址有误或该地址已被删除</center>\n\n<br>\n<br>"},{"layout":"links","title":"我的朋友们","links":[{"group":"技术大佬","icon":"fas fa-user-tie","items":[{"name":null,"avatar":null,"url":null,"backgroundColor":"#3E74C9","textColor":"#fff","tags":["标签1","标签2"]}]},{"group":"分组2","icon":"fas fa-user-tie","items":[{"name":null,"avatar":null,"url":null,"backgroundColor":"#3E74C9","textColor":"#fff","tags":["标签1","标签2"]}]}],"_content":"\n这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。","source":"friends/index.md","raw":"---\nlayout: links     # 必须\ntitle: 我的朋友们   # 可选，这是友链页的标题\nlinks:\n  - group: 技术大佬\n    icon: fas fa-user-tie\n    items:\n    - name:     # 博客名\n      avatar:   # 头像链接\n      url:      # 博客链接\n      backgroundColor: '#3E74C9' # 卡片背景颜色\n      textColor: '#fff'  # 卡片文字颜色\n      tags:     # 标签\n      - 标签1\n      - 标签2\n  - group: 分组2\n    icon: fas fa-user-tie\n    items:\n    - name:     # 博客名\n      avatar:   # 头像链接\n      url:      # 博客链接\n      backgroundColor: '#3E74C9' # 卡片背景颜色\n      textColor: '#fff'  # 卡片文字颜色\n      tags:     # 标签\n      - 标签1\n      - 标签2\n---\n\n这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。","date":"2019-06-13T03:26:00.780Z","updated":"2019-06-13T03:26:00.780Z","path":"friends/index.html","comments":1,"_id":"cjwu44hml0001fvuj458bkmlt","content":"<p>这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。</p>\n"},{"layout":"page","title":"关于","body":["article","grid","comments"],"valine":{"placeholder":"欢迎留言！"},"sidebar":false,"_content":"\n\n要么忙着生活，要么赶着去死！","source":"about/index.md","raw":"---\nlayout: page\ntitle: 关于\nbody: [article, grid, comments]\nvaline:\n  placeholder: 欢迎留言！\nsidebar: false\n---\n\n\n要么忙着生活，要么赶着去死！","date":"2019-06-13T03:26:00.780Z","updated":"2019-06-13T03:26:00.780Z","path":"about/index.html","comments":1,"_id":"cjwu44hmm0002fvujlue8ej0k","content":"<p>要么忙着生活，要么赶着去死！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>要么忙着生活，要么赶着去死！</p>\n"},{"layout":"category","index":true,"title":"所有分类","_content":"","source":"blog/categories/index.md","raw":"---\nlayout: category\nindex: true\ntitle: 所有分类\n---","date":"2019-06-13T03:26:00.780Z","updated":"2019-06-13T03:26:00.780Z","path":"blog/categories/index.html","comments":1,"_id":"cjwu44hn60004fvujcuvqkuxz","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tag","index":true,"title":"所有标签","_content":"","source":"blog/tags/index.md","raw":"---\nlayout: tag\nindex: true\ntitle: 所有标签\n---","date":"2019-06-13T03:26:00.780Z","updated":"2019-06-13T03:26:00.780Z","path":"blog/tags/index.html","comments":1,"_id":"cjwu44hn80006fvuj60mr86bd","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"提问的智慧","date":"2014-03-01T16:00:00.000Z","_content":" \n作为一个技术人员，在学习和工作中，经常会遇到各种各样的问题，有时候我们没法解答的时候？也许最好的办法就是去\n求助与他人，不管是通过网络，还是面对面的方式。 于是如何问问题就变的尤为重要，下面这篇\n[How to Ask Questions The Smart Way](http://www.wapm.cn/smart-questions/smart-questions-zh.html)会给你答案，相信看完之后你会有很大收获。\n","source":"_posts/blog/2014-03-02-smart-questions.md","raw":"---\ntitle: \"提问的智慧\"\ndate: 2014-03-02\ncategories: 技术\ntags: [\"提问\"]\n---\n \n作为一个技术人员，在学习和工作中，经常会遇到各种各样的问题，有时候我们没法解答的时候？也许最好的办法就是去\n求助与他人，不管是通过网络，还是面对面的方式。 于是如何问问题就变的尤为重要，下面这篇\n[How to Ask Questions The Smart Way](http://www.wapm.cn/smart-questions/smart-questions-zh.html)会给你答案，相信看完之后你会有很大收获。\n","slug":"blog/2014-03-02-smart-questions","published":1,"updated":"2019-06-13T03:26:00.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwu44hn30003fvujfoj35c76","content":"<p>作为一个技术人员，在学习和工作中，经常会遇到各种各样的问题，有时候我们没法解答的时候？也许最好的办法就是去<br>求助与他人，不管是通过网络，还是面对面的方式。 于是如何问问题就变的尤为重要，下面这篇<br><a href=\"http://www.wapm.cn/smart-questions/smart-questions-zh.html\" target=\"_blank\" rel=\"noopener\">How to Ask Questions The Smart Way</a>会给你答案，相信看完之后你会有很大收获。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>作为一个技术人员，在学习和工作中，经常会遇到各种各样的问题，有时候我们没法解答的时候？也许最好的办法就是去<br>求助与他人，不管是通过网络，还是面对面的方式。 于是如何问问题就变的尤为重要，下面这篇<br><a href=\"http://www.wapm.cn/smart-questions/smart-questions-zh.html\" target=\"_blank\" rel=\"noopener\">How to Ask Questions The Smart Way</a>会给你答案，相信看完之后你会有很大收获。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Thu Jun 13 2019 11:26:00 GMT+0800 (CST)","title":"提问的智慧","path":"blog/2014-03-02-smart-questions/","eyeCatchImage":null,"excerpt":null,"date":"2014-03-01T16:00:00.000Z","pv":0,"totalPV":0,"categories":"技术","tags":["提问"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"开始我的博客之旅","date":"2014-02-25T16:00:00.000Z","_content":"\n### 目的\n 有人曾说，其实每个人都有好的想法，只是我们当中的大多数人不善于跟踪它而已，此博客主要记录平时的一些想法，\n一些技术问题以及分享一切美好的人和事...\n\n\n### 为什么使用 github pages & jekyll 来创建博客\n 昨天突然兴起，想创建一个属于自己的博客，于是就在google上搜索如何创建自己博客之类的话题， 搜到一篇写的非常详细的博文\n [搭建一个免费的，无限流量的Blog----github Pages和Jekyll入门](http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html)，免费而且无限流量，太符合我的需求了（是不是有点贱），于是就有了此博。\n\n\n### 主题\n此博客的主题是在[Michael Rose](http://mademistakes.com/)的 [Minimal Mistakes](https://github.com/mmistakes/minimal-mistakes)主题的基础上修改的，在此感谢Michael Rose！\n\n\n","source":"_posts/blog/2014-02-26-startup-my-blog.md","raw":"---\ntitle: \"开始我的博客之旅\"\ndate: 2014-02-26\ncategories: 技术\ntags: [\"jekyll\", \"博客\"]\n---\n\n### 目的\n 有人曾说，其实每个人都有好的想法，只是我们当中的大多数人不善于跟踪它而已，此博客主要记录平时的一些想法，\n一些技术问题以及分享一切美好的人和事...\n\n\n### 为什么使用 github pages & jekyll 来创建博客\n 昨天突然兴起，想创建一个属于自己的博客，于是就在google上搜索如何创建自己博客之类的话题， 搜到一篇写的非常详细的博文\n [搭建一个免费的，无限流量的Blog----github Pages和Jekyll入门](http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html)，免费而且无限流量，太符合我的需求了（是不是有点贱），于是就有了此博。\n\n\n### 主题\n此博客的主题是在[Michael Rose](http://mademistakes.com/)的 [Minimal Mistakes](https://github.com/mmistakes/minimal-mistakes)主题的基础上修改的，在此感谢Michael Rose！\n\n\n","slug":"blog/2014-02-26-startup-my-blog","published":1,"updated":"2019-06-13T03:26:00.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwu44hn70005fvujeywbm80p","content":"<h3 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h3><p> 有人曾说，其实每个人都有好的想法，只是我们当中的大多数人不善于跟踪它而已，此博客主要记录平时的一些想法，<br>一些技术问题以及分享一切美好的人和事…</p>\n<h3 id=\"为什么使用-github-pages-amp-jekyll-来创建博客\"><a href=\"#为什么使用-github-pages-amp-jekyll-来创建博客\" class=\"headerlink\" title=\"为什么使用 github pages &amp; jekyll 来创建博客\"></a>为什么使用 github pages &amp; jekyll 来创建博客</h3><p> 昨天突然兴起，想创建一个属于自己的博客，于是就在google上搜索如何创建自己博客之类的话题， 搜到一篇写的非常详细的博文<br> <a href=\"http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html\" target=\"_blank\" rel=\"noopener\">搭建一个免费的，无限流量的Blog—-github Pages和Jekyll入门</a>，免费而且无限流量，太符合我的需求了（是不是有点贱），于是就有了此博。</p>\n<h3 id=\"主题\"><a href=\"#主题\" class=\"headerlink\" title=\"主题\"></a>主题</h3><p>此博客的主题是在<a href=\"http://mademistakes.com/\" target=\"_blank\" rel=\"noopener\">Michael Rose</a>的 <a href=\"https://github.com/mmistakes/minimal-mistakes\" target=\"_blank\" rel=\"noopener\">Minimal Mistakes</a>主题的基础上修改的，在此感谢Michael Rose！</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h3><p> 有人曾说，其实每个人都有好的想法，只是我们当中的大多数人不善于跟踪它而已，此博客主要记录平时的一些想法，<br>一些技术问题以及分享一切美好的人和事…</p>\n<h3 id=\"为什么使用-github-pages-amp-jekyll-来创建博客\"><a href=\"#为什么使用-github-pages-amp-jekyll-来创建博客\" class=\"headerlink\" title=\"为什么使用 github pages &amp; jekyll 来创建博客\"></a>为什么使用 github pages &amp; jekyll 来创建博客</h3><p> 昨天突然兴起，想创建一个属于自己的博客，于是就在google上搜索如何创建自己博客之类的话题， 搜到一篇写的非常详细的博文<br> <a href=\"http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html\" target=\"_blank\" rel=\"noopener\">搭建一个免费的，无限流量的Blog—-github Pages和Jekyll入门</a>，免费而且无限流量，太符合我的需求了（是不是有点贱），于是就有了此博。</p>\n<h3 id=\"主题\"><a href=\"#主题\" class=\"headerlink\" title=\"主题\"></a>主题</h3><p>此博客的主题是在<a href=\"http://mademistakes.com/\" target=\"_blank\" rel=\"noopener\">Michael Rose</a>的 <a href=\"https://github.com/mmistakes/minimal-mistakes\" target=\"_blank\" rel=\"noopener\">Minimal Mistakes</a>主题的基础上修改的，在此感谢Michael Rose！</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Thu Jun 13 2019 11:26:00 GMT+0800 (CST)","title":"开始我的博客之旅","path":"blog/2014-02-26-startup-my-blog/","eyeCatchImage":null,"excerpt":null,"date":"2014-02-25T16:00:00.000Z","pv":0,"totalPV":0,"categories":"技术","tags":["jekyll","博客"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"内存死机问题","date":"2014-03-09T16:00:00.000Z","_content":"\n最近遇到一个内存导致死机的问题，这种问题总是让人很恼火。\n\nMstar linux方案，由于对指针的检测不够完善，导致使用了空指针。一个问题整了我一天多时间，\n最后查出来尽然是珠海有线的码流里边有一个bouquet id是 -256，而代码里边没有处理到这种情况，获取到空指针，\n而在使用的时候又没有检测。幸亏有gdb可以用，可以定位到是那个模块出了问题。完了想想本来这个问题要不\n了那么长时间，一开始感觉这个变量有点问题，可就被脑子里那种 \"不可能这儿出问题啊\"的想法打消了，也许\n很多程序员会犯这种错误，总是很确信的说\"这个不可能\"，难道这个真的不可能吗？其实自己也不知道，不知道\n从哪儿来的这种莫名其妙的自信。\n由这个问题想到：\n\n  1)不要轻易做任何假设，负责可能会影响你做出准确的判断。\n\n  2)时时刻刻在使用指针时要检测是否为空，这个构建健壮软件的必要条件。\n\n  3)要让程序能经得起一些意味发生的情况，比如获取到错误变量等。\n","source":"_posts/blog/2014-03-10-crash-about-memory.md","raw":"---\ntitle: \"内存死机问题\"\ndate: 2014-03-10\ncategories: 技术\ntags: [\"bug\", \"内存\", \"死机\"]\n---\n\n最近遇到一个内存导致死机的问题，这种问题总是让人很恼火。\n\nMstar linux方案，由于对指针的检测不够完善，导致使用了空指针。一个问题整了我一天多时间，\n最后查出来尽然是珠海有线的码流里边有一个bouquet id是 -256，而代码里边没有处理到这种情况，获取到空指针，\n而在使用的时候又没有检测。幸亏有gdb可以用，可以定位到是那个模块出了问题。完了想想本来这个问题要不\n了那么长时间，一开始感觉这个变量有点问题，可就被脑子里那种 \"不可能这儿出问题啊\"的想法打消了，也许\n很多程序员会犯这种错误，总是很确信的说\"这个不可能\"，难道这个真的不可能吗？其实自己也不知道，不知道\n从哪儿来的这种莫名其妙的自信。\n由这个问题想到：\n\n  1)不要轻易做任何假设，负责可能会影响你做出准确的判断。\n\n  2)时时刻刻在使用指针时要检测是否为空，这个构建健壮软件的必要条件。\n\n  3)要让程序能经得起一些意味发生的情况，比如获取到错误变量等。\n","slug":"blog/2014-03-10-crash-about-memory","published":1,"updated":"2019-06-13T03:26:00.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwu44hn90009fvuj2qzku8gs","content":"<p>最近遇到一个内存导致死机的问题，这种问题总是让人很恼火。</p>\n<p>Mstar linux方案，由于对指针的检测不够完善，导致使用了空指针。一个问题整了我一天多时间，<br>最后查出来尽然是珠海有线的码流里边有一个bouquet id是 -256，而代码里边没有处理到这种情况，获取到空指针，<br>而在使用的时候又没有检测。幸亏有gdb可以用，可以定位到是那个模块出了问题。完了想想本来这个问题要不<br>了那么长时间，一开始感觉这个变量有点问题，可就被脑子里那种 “不可能这儿出问题啊”的想法打消了，也许<br>很多程序员会犯这种错误，总是很确信的说”这个不可能”，难道这个真的不可能吗？其实自己也不知道，不知道<br>从哪儿来的这种莫名其妙的自信。<br>由这个问题想到：</p>\n<p>  1)不要轻易做任何假设，负责可能会影响你做出准确的判断。</p>\n<p>  2)时时刻刻在使用指针时要检测是否为空，这个构建健壮软件的必要条件。</p>\n<p>  3)要让程序能经得起一些意味发生的情况，比如获取到错误变量等。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近遇到一个内存导致死机的问题，这种问题总是让人很恼火。</p>\n<p>Mstar linux方案，由于对指针的检测不够完善，导致使用了空指针。一个问题整了我一天多时间，<br>最后查出来尽然是珠海有线的码流里边有一个bouquet id是 -256，而代码里边没有处理到这种情况，获取到空指针，<br>而在使用的时候又没有检测。幸亏有gdb可以用，可以定位到是那个模块出了问题。完了想想本来这个问题要不<br>了那么长时间，一开始感觉这个变量有点问题，可就被脑子里那种 “不可能这儿出问题啊”的想法打消了，也许<br>很多程序员会犯这种错误，总是很确信的说”这个不可能”，难道这个真的不可能吗？其实自己也不知道，不知道<br>从哪儿来的这种莫名其妙的自信。<br>由这个问题想到：</p>\n<p>  1)不要轻易做任何假设，负责可能会影响你做出准确的判断。</p>\n<p>  2)时时刻刻在使用指针时要检测是否为空，这个构建健壮软件的必要条件。</p>\n<p>  3)要让程序能经得起一些意味发生的情况，比如获取到错误变量等。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Thu Jun 13 2019 11:26:00 GMT+0800 (CST)","title":"内存死机问题","path":"blog/2014-03-10-crash-about-memory/","eyeCatchImage":null,"excerpt":null,"date":"2014-03-09T16:00:00.000Z","pv":0,"totalPV":0,"categories":"技术","tags":["bug","内存","死机"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"关于开源软件redis","date":"2014-04-03T16:00:00.000Z","_content":"\n最近读redis代码，redis是一个key-value存储系统,详情请看官网介绍[redis](http://redis.io/)，仅2万多行代码，实现如此强大的\n功能，真是让人不由的惊叹！而且代码是非常之漂亮, [《redis设计与实现》](http://redisbook.com/en/latest/)可以帮助你了解redis\n的具体实现，[redis的github地址](https://github.com/antirez/redis)。\n","source":"_posts/blog/2014-04-04-about-redis.md","raw":"---\ntitle: \"关于开源软件redis\"\ndate: 2014-04-04\ncategories: 技术\ntags: [\"开源\",\"redis\"]\n---\n\n最近读redis代码，redis是一个key-value存储系统,详情请看官网介绍[redis](http://redis.io/)，仅2万多行代码，实现如此强大的\n功能，真是让人不由的惊叹！而且代码是非常之漂亮, [《redis设计与实现》](http://redisbook.com/en/latest/)可以帮助你了解redis\n的具体实现，[redis的github地址](https://github.com/antirez/redis)。\n","slug":"blog/2014-04-04-about-redis","published":1,"updated":"2019-06-13T03:26:00.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwu44hna000afvuj5r4li4mb","content":"<p>最近读redis代码，redis是一个key-value存储系统,详情请看官网介绍<a href=\"http://redis.io/\" target=\"_blank\" rel=\"noopener\">redis</a>，仅2万多行代码，实现如此强大的<br>功能，真是让人不由的惊叹！而且代码是非常之漂亮, <a href=\"http://redisbook.com/en/latest/\" target=\"_blank\" rel=\"noopener\">《redis设计与实现》</a>可以帮助你了解redis<br>的具体实现，<a href=\"https://github.com/antirez/redis\" target=\"_blank\" rel=\"noopener\">redis的github地址</a>。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近读redis代码，redis是一个key-value存储系统,详情请看官网介绍<a href=\"http://redis.io/\" target=\"_blank\" rel=\"noopener\">redis</a>，仅2万多行代码，实现如此强大的<br>功能，真是让人不由的惊叹！而且代码是非常之漂亮, <a href=\"http://redisbook.com/en/latest/\" target=\"_blank\" rel=\"noopener\">《redis设计与实现》</a>可以帮助你了解redis<br>的具体实现，<a href=\"https://github.com/antirez/redis\" target=\"_blank\" rel=\"noopener\">redis的github地址</a>。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Thu Jun 13 2019 11:26:00 GMT+0800 (CST)","title":"关于开源软件redis","path":"blog/2014-04-04-about-redis/","eyeCatchImage":null,"excerpt":null,"date":"2014-04-03T16:00:00.000Z","pv":0,"totalPV":0,"categories":"技术","tags":["开源","redis"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"横琴岛游记","date":"2014-03-23T16:00:00.000Z","_content":"\n每次游玩回来，或多或少总会有那么一些感想,而这次感触颇深，也许与我最近的心\n情有关吧。从小到大，语文一直不好，因此而没少挨老师的批，以至于现在坐在电脑前\n想写点东西的时候，总感觉缺少一些词藻，把心里的想法和感受用语言这种奇怪的东西表\n达出来。犹豫了许久，决定还是把它记下来吧，也许二十年、三十年或者更老，记不起事\n的时候翻出来看看，也许能勾起对年轻时的回忆,也不失为一件美好的事！再说对于我这种\n记性不是很好的动物来说,记下来总归是安全的。\n\n最近心情一直不怎么好，可能是这段时间工作上的事少，我这人有点贱，一闲下来就\n有点不淡定，容易想一些乱七八糟的事情，一想就郁闷。什么结婚啊、买房啊，最近听这些\n话题太多太多了,听多了不由的让人不想啊,唉！平时由于工作忙，没有太多时间去想这些,\n其实我压根不愿意想去这些事情，总抱着一种该来的总会来的态度。\n    \n昨天一同事说打算骑自行车去横琴岛玩，问我去不去，想了想去就去呗，反正也没啥坏处，\n还可以锻炼下身体，减减肥肉，说不定还会有一些意外的收获，何乐而不为。就是可\n怜了我那坐骑,跟随了我大半年时间，最近老是咯吱咯吱响，不知道还能不能坚持下来，要\n是在半路上罢工，那就麻烦啦。\n\n早上十点从家里出发，路边随便买了点早餐，按照提前约好的时间来到华发广场集合，\n一行总共六人。天气特给力，不冷不热，偶尔还有点微风，真是出去玩的好时间。蹬着单车，\n微风从脸颊吹过，那感觉就一个字“爽”！有点可惜的是自行车后刹车不灵，一路上不敢骑\n太快，单怕和那些奔驰宝马亲吻一下。\n\n大约两个小时，到了横琴，又累又饿，也到了午饭的时候，路边找了家快餐店，随便点了份\n快餐和一杯奶茶，我勒个去，奶茶杯怎么那么旧，感觉很脏似的，不过那快餐还是蛮好吃的，\n或许是饿了的缘故吧，大家狼吞虎咽地几下吃完了，然后稍微坐了一会，又开始出发了，直\n奔海边。\n\n沿着海边有一条很长的水泥路，两边有护栏，路很平坦，毫无遮挡,一路飞奔,真是爽歪了!\n到了海边，大家一起合了个影，帮我们照相的是一中年大叔，那大叔蛮有意思，照完之后他拿着我\n手机摆出个姿势，示意要扔给我，我还以为这大叔发疯了,急忙一边跑一边喊“别别别，\n我接不住”，后来大叔笑着给我手机，说“我跟你开个玩笑而已，我怎么会扔呢”，呵呵,是\n我想多了.在海边碰到一小伙，跟我年龄差不多，聊了几句，说是专门过来看海，\n却没看到蓝色的大海，有点遗憾。卷起裤腿,跑到水里时,突然一个浪过来,悲剧啊,裤子全湿了.\n在海边,微风吹过,听着海浪的声音,心情一下子舒畅了好多，所有负担、所有不愉快的\n事统统抛到九霄云外,全身感觉格外的轻松!要是再有一个心爱的姑娘一起,那就完美了.\n\n转眼四点多了,该回去了,我们没有原路返回,本来打算找一条近路,结果长隆隧道不让自行车走,我去,摩托车\n让通过,就是不让自行车走,要我说直接冲过去得类,反正那守卫也没有车,肯定追不上.可另外一哥们太\n谨慎了,不同意.我们只好再寻找路线了.接着就悲剧更悲剧了,一路上都在修路,坑坑洼洼还是小事,\n关键土太厚了,一辆大车过去,整个人感觉被土埋了,人没老,头发先变白了.有种回到老家的感觉.\n这一路就不太爽了,坑坑洼洼的人家新车可以很轻松的骑过去,我那破车咋整也骑不快,一路他们一直都\n在等我,搞得我都有些不好意思,更不幸的是不小心摔到,腿上刮掉一层皮,还好,谁叫咱是土生土长的农村人,\n这点小伤算个屁,站起来拍拍屁股继续走着.\n\n\n晚上八点多才到市区,大家都饿坏了,突然路边冒出一家酱饼小摊,刚出锅的实在是太好吃了,没想到珠海\n还有这货,真是太让人意外了,想想还是在大学时吃过,差不多两年没见过这玩意了.最后找了家饭馆,吃完饭\n各回各家,该干嘛干嘛!\n\n回到家坐下来想想,这次出去还是蛮有意思的.我想当时如果不去的话,这一天就在家睡觉啊什么的,同样会过去,\n然后感叹,唉!周末就这样过去了.人生也一样,不能老是处在当时没做,过了后悔这种无限循环中.跟着心走,想\n做就做,这样即使到死的时候,也不会因当初错过而后悔.\n\n\n<figure>\n    <figcaption>横琴.</figcaption>\n    <a href=\"/images/hengqin0.jpg\"><img src=\"/images/hengqin0.jpg\"></a>\n</figure>\n\n<figure>\n    <figcaption>海边集体照.</figcaption>\n    <a href=\"/images/hengqin1.jpg\"><img src=\"/images/hengqin1.jpg\"></a>\n</figure>\n\n<figure>\n    <figcaption>海浪.</figcaption>\n    <a href=\"/images/hengqin2.jpg\"><img src=\"/images/hengqin2.jpg\"></a>\n</figure>\n\n<figure>\n    <figcaption></figcaption>\n    <a href=\"/images/hengqin4.jpg\"><img src=\"/images/hengqin4.jpg\"></a>\n</figure>\n\n<figure>\n    <figcaption>回去的路上.</figcaption>\n    <a href=\"/images/hengqin3.jpg\"><img src=\"/images/hengqin3.jpg\"></a>\n</figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/blog/2014-03-24-cycling-to-hengqin.md","raw":"---\ntitle: \"横琴岛游记\"\ndate: 2014-03-24\ncategories: 生活\ntags: [\"自行车\", \"游记\"]\n---\n\n每次游玩回来，或多或少总会有那么一些感想,而这次感触颇深，也许与我最近的心\n情有关吧。从小到大，语文一直不好，因此而没少挨老师的批，以至于现在坐在电脑前\n想写点东西的时候，总感觉缺少一些词藻，把心里的想法和感受用语言这种奇怪的东西表\n达出来。犹豫了许久，决定还是把它记下来吧，也许二十年、三十年或者更老，记不起事\n的时候翻出来看看，也许能勾起对年轻时的回忆,也不失为一件美好的事！再说对于我这种\n记性不是很好的动物来说,记下来总归是安全的。\n\n最近心情一直不怎么好，可能是这段时间工作上的事少，我这人有点贱，一闲下来就\n有点不淡定，容易想一些乱七八糟的事情，一想就郁闷。什么结婚啊、买房啊，最近听这些\n话题太多太多了,听多了不由的让人不想啊,唉！平时由于工作忙，没有太多时间去想这些,\n其实我压根不愿意想去这些事情，总抱着一种该来的总会来的态度。\n    \n昨天一同事说打算骑自行车去横琴岛玩，问我去不去，想了想去就去呗，反正也没啥坏处，\n还可以锻炼下身体，减减肥肉，说不定还会有一些意外的收获，何乐而不为。就是可\n怜了我那坐骑,跟随了我大半年时间，最近老是咯吱咯吱响，不知道还能不能坚持下来，要\n是在半路上罢工，那就麻烦啦。\n\n早上十点从家里出发，路边随便买了点早餐，按照提前约好的时间来到华发广场集合，\n一行总共六人。天气特给力，不冷不热，偶尔还有点微风，真是出去玩的好时间。蹬着单车，\n微风从脸颊吹过，那感觉就一个字“爽”！有点可惜的是自行车后刹车不灵，一路上不敢骑\n太快，单怕和那些奔驰宝马亲吻一下。\n\n大约两个小时，到了横琴，又累又饿，也到了午饭的时候，路边找了家快餐店，随便点了份\n快餐和一杯奶茶，我勒个去，奶茶杯怎么那么旧，感觉很脏似的，不过那快餐还是蛮好吃的，\n或许是饿了的缘故吧，大家狼吞虎咽地几下吃完了，然后稍微坐了一会，又开始出发了，直\n奔海边。\n\n沿着海边有一条很长的水泥路，两边有护栏，路很平坦，毫无遮挡,一路飞奔,真是爽歪了!\n到了海边，大家一起合了个影，帮我们照相的是一中年大叔，那大叔蛮有意思，照完之后他拿着我\n手机摆出个姿势，示意要扔给我，我还以为这大叔发疯了,急忙一边跑一边喊“别别别，\n我接不住”，后来大叔笑着给我手机，说“我跟你开个玩笑而已，我怎么会扔呢”，呵呵,是\n我想多了.在海边碰到一小伙，跟我年龄差不多，聊了几句，说是专门过来看海，\n却没看到蓝色的大海，有点遗憾。卷起裤腿,跑到水里时,突然一个浪过来,悲剧啊,裤子全湿了.\n在海边,微风吹过,听着海浪的声音,心情一下子舒畅了好多，所有负担、所有不愉快的\n事统统抛到九霄云外,全身感觉格外的轻松!要是再有一个心爱的姑娘一起,那就完美了.\n\n转眼四点多了,该回去了,我们没有原路返回,本来打算找一条近路,结果长隆隧道不让自行车走,我去,摩托车\n让通过,就是不让自行车走,要我说直接冲过去得类,反正那守卫也没有车,肯定追不上.可另外一哥们太\n谨慎了,不同意.我们只好再寻找路线了.接着就悲剧更悲剧了,一路上都在修路,坑坑洼洼还是小事,\n关键土太厚了,一辆大车过去,整个人感觉被土埋了,人没老,头发先变白了.有种回到老家的感觉.\n这一路就不太爽了,坑坑洼洼的人家新车可以很轻松的骑过去,我那破车咋整也骑不快,一路他们一直都\n在等我,搞得我都有些不好意思,更不幸的是不小心摔到,腿上刮掉一层皮,还好,谁叫咱是土生土长的农村人,\n这点小伤算个屁,站起来拍拍屁股继续走着.\n\n\n晚上八点多才到市区,大家都饿坏了,突然路边冒出一家酱饼小摊,刚出锅的实在是太好吃了,没想到珠海\n还有这货,真是太让人意外了,想想还是在大学时吃过,差不多两年没见过这玩意了.最后找了家饭馆,吃完饭\n各回各家,该干嘛干嘛!\n\n回到家坐下来想想,这次出去还是蛮有意思的.我想当时如果不去的话,这一天就在家睡觉啊什么的,同样会过去,\n然后感叹,唉!周末就这样过去了.人生也一样,不能老是处在当时没做,过了后悔这种无限循环中.跟着心走,想\n做就做,这样即使到死的时候,也不会因当初错过而后悔.\n\n\n<figure>\n    <figcaption>横琴.</figcaption>\n    <a href=\"/images/hengqin0.jpg\"><img src=\"/images/hengqin0.jpg\"></a>\n</figure>\n\n<figure>\n    <figcaption>海边集体照.</figcaption>\n    <a href=\"/images/hengqin1.jpg\"><img src=\"/images/hengqin1.jpg\"></a>\n</figure>\n\n<figure>\n    <figcaption>海浪.</figcaption>\n    <a href=\"/images/hengqin2.jpg\"><img src=\"/images/hengqin2.jpg\"></a>\n</figure>\n\n<figure>\n    <figcaption></figcaption>\n    <a href=\"/images/hengqin4.jpg\"><img src=\"/images/hengqin4.jpg\"></a>\n</figure>\n\n<figure>\n    <figcaption>回去的路上.</figcaption>\n    <a href=\"/images/hengqin3.jpg\"><img src=\"/images/hengqin3.jpg\"></a>\n</figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"blog/2014-03-24-cycling-to-hengqin","published":1,"updated":"2019-06-13T03:26:00.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwu44hnb000bfvujomwpg38w","content":"<p>每次游玩回来，或多或少总会有那么一些感想,而这次感触颇深，也许与我最近的心<br>情有关吧。从小到大，语文一直不好，因此而没少挨老师的批，以至于现在坐在电脑前<br>想写点东西的时候，总感觉缺少一些词藻，把心里的想法和感受用语言这种奇怪的东西表<br>达出来。犹豫了许久，决定还是把它记下来吧，也许二十年、三十年或者更老，记不起事<br>的时候翻出来看看，也许能勾起对年轻时的回忆,也不失为一件美好的事！再说对于我这种<br>记性不是很好的动物来说,记下来总归是安全的。</p>\n<p>最近心情一直不怎么好，可能是这段时间工作上的事少，我这人有点贱，一闲下来就<br>有点不淡定，容易想一些乱七八糟的事情，一想就郁闷。什么结婚啊、买房啊，最近听这些<br>话题太多太多了,听多了不由的让人不想啊,唉！平时由于工作忙，没有太多时间去想这些,<br>其实我压根不愿意想去这些事情，总抱着一种该来的总会来的态度。</p>\n<p>昨天一同事说打算骑自行车去横琴岛玩，问我去不去，想了想去就去呗，反正也没啥坏处，<br>还可以锻炼下身体，减减肥肉，说不定还会有一些意外的收获，何乐而不为。就是可<br>怜了我那坐骑,跟随了我大半年时间，最近老是咯吱咯吱响，不知道还能不能坚持下来，要<br>是在半路上罢工，那就麻烦啦。</p>\n<p>早上十点从家里出发，路边随便买了点早餐，按照提前约好的时间来到华发广场集合，<br>一行总共六人。天气特给力，不冷不热，偶尔还有点微风，真是出去玩的好时间。蹬着单车，<br>微风从脸颊吹过，那感觉就一个字“爽”！有点可惜的是自行车后刹车不灵，一路上不敢骑<br>太快，单怕和那些奔驰宝马亲吻一下。</p>\n<p>大约两个小时，到了横琴，又累又饿，也到了午饭的时候，路边找了家快餐店，随便点了份<br>快餐和一杯奶茶，我勒个去，奶茶杯怎么那么旧，感觉很脏似的，不过那快餐还是蛮好吃的，<br>或许是饿了的缘故吧，大家狼吞虎咽地几下吃完了，然后稍微坐了一会，又开始出发了，直<br>奔海边。</p>\n<p>沿着海边有一条很长的水泥路，两边有护栏，路很平坦，毫无遮挡,一路飞奔,真是爽歪了!\n到了海边，大家一起合了个影，帮我们照相的是一中年大叔，那大叔蛮有意思，照完之后他拿着我<br>手机摆出个姿势，示意要扔给我，我还以为这大叔发疯了,急忙一边跑一边喊“别别别，<br>我接不住”，后来大叔笑着给我手机，说“我跟你开个玩笑而已，我怎么会扔呢”，呵呵,是<br>我想多了.在海边碰到一小伙，跟我年龄差不多，聊了几句，说是专门过来看海，<br>却没看到蓝色的大海，有点遗憾。卷起裤腿,跑到水里时,突然一个浪过来,悲剧啊,裤子全湿了.<br>在海边,微风吹过,听着海浪的声音,心情一下子舒畅了好多，所有负担、所有不愉快的<br>事统统抛到九霄云外,全身感觉格外的轻松!要是再有一个心爱的姑娘一起,那就完美了.</p>\n<p>转眼四点多了,该回去了,我们没有原路返回,本来打算找一条近路,结果长隆隧道不让自行车走,我去,摩托车<br>让通过,就是不让自行车走,要我说直接冲过去得类,反正那守卫也没有车,肯定追不上.可另外一哥们太<br>谨慎了,不同意.我们只好再寻找路线了.接着就悲剧更悲剧了,一路上都在修路,坑坑洼洼还是小事,<br>关键土太厚了,一辆大车过去,整个人感觉被土埋了,人没老,头发先变白了.有种回到老家的感觉.<br>这一路就不太爽了,坑坑洼洼的人家新车可以很轻松的骑过去,我那破车咋整也骑不快,一路他们一直都<br>在等我,搞得我都有些不好意思,更不幸的是不小心摔到,腿上刮掉一层皮,还好,谁叫咱是土生土长的农村人,<br>这点小伤算个屁,站起来拍拍屁股继续走着.</p>\n<p>晚上八点多才到市区,大家都饿坏了,突然路边冒出一家酱饼小摊,刚出锅的实在是太好吃了,没想到珠海<br>还有这货,真是太让人意外了,想想还是在大学时吃过,差不多两年没见过这玩意了.最后找了家饭馆,吃完饭<br>各回各家,该干嘛干嘛!</p>\n<p>回到家坐下来想想,这次出去还是蛮有意思的.我想当时如果不去的话,这一天就在家睡觉啊什么的,同样会过去,<br>然后感叹,唉!周末就这样过去了.人生也一样,不能老是处在当时没做,过了后悔这种无限循环中.跟着心走,想<br>做就做,这样即使到死的时候,也不会因当初错过而后悔.</p>\n<figure>\n    <figcaption>横琴.</figcaption>\n    <a href=\"/images/hengqin0.jpg\"><img src=\"/images/hengqin0.jpg\"></a>\n</figure>\n\n<figure>\n    <figcaption>海边集体照.</figcaption>\n    <a href=\"/images/hengqin1.jpg\"><img src=\"/images/hengqin1.jpg\"></a>\n</figure>\n\n<figure>\n    <figcaption>海浪.</figcaption>\n    <a href=\"/images/hengqin2.jpg\"><img src=\"/images/hengqin2.jpg\"></a>\n</figure>\n\n<figure>\n    <figcaption></figcaption>\n    <a href=\"/images/hengqin4.jpg\"><img src=\"/images/hengqin4.jpg\"></a>\n</figure>\n\n<figure>\n    <figcaption>回去的路上.</figcaption>\n    <a href=\"/images/hengqin3.jpg\"><img src=\"/images/hengqin3.jpg\"></a>\n</figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p>每次游玩回来，或多或少总会有那么一些感想,而这次感触颇深，也许与我最近的心<br>情有关吧。从小到大，语文一直不好，因此而没少挨老师的批，以至于现在坐在电脑前<br>想写点东西的时候，总感觉缺少一些词藻，把心里的想法和感受用语言这种奇怪的东西表<br>达出来。犹豫了许久，决定还是把它记下来吧，也许二十年、三十年或者更老，记不起事<br>的时候翻出来看看，也许能勾起对年轻时的回忆,也不失为一件美好的事！再说对于我这种<br>记性不是很好的动物来说,记下来总归是安全的。</p>\n<p>最近心情一直不怎么好，可能是这段时间工作上的事少，我这人有点贱，一闲下来就<br>有点不淡定，容易想一些乱七八糟的事情，一想就郁闷。什么结婚啊、买房啊，最近听这些<br>话题太多太多了,听多了不由的让人不想啊,唉！平时由于工作忙，没有太多时间去想这些,<br>其实我压根不愿意想去这些事情，总抱着一种该来的总会来的态度。</p>\n<p>昨天一同事说打算骑自行车去横琴岛玩，问我去不去，想了想去就去呗，反正也没啥坏处，<br>还可以锻炼下身体，减减肥肉，说不定还会有一些意外的收获，何乐而不为。就是可<br>怜了我那坐骑,跟随了我大半年时间，最近老是咯吱咯吱响，不知道还能不能坚持下来，要<br>是在半路上罢工，那就麻烦啦。</p>\n<p>早上十点从家里出发，路边随便买了点早餐，按照提前约好的时间来到华发广场集合，<br>一行总共六人。天气特给力，不冷不热，偶尔还有点微风，真是出去玩的好时间。蹬着单车，<br>微风从脸颊吹过，那感觉就一个字“爽”！有点可惜的是自行车后刹车不灵，一路上不敢骑<br>太快，单怕和那些奔驰宝马亲吻一下。</p>\n<p>大约两个小时，到了横琴，又累又饿，也到了午饭的时候，路边找了家快餐店，随便点了份<br>快餐和一杯奶茶，我勒个去，奶茶杯怎么那么旧，感觉很脏似的，不过那快餐还是蛮好吃的，<br>或许是饿了的缘故吧，大家狼吞虎咽地几下吃完了，然后稍微坐了一会，又开始出发了，直<br>奔海边。</p>\n<p>沿着海边有一条很长的水泥路，两边有护栏，路很平坦，毫无遮挡,一路飞奔,真是爽歪了!\n到了海边，大家一起合了个影，帮我们照相的是一中年大叔，那大叔蛮有意思，照完之后他拿着我<br>手机摆出个姿势，示意要扔给我，我还以为这大叔发疯了,急忙一边跑一边喊“别别别，<br>我接不住”，后来大叔笑着给我手机，说“我跟你开个玩笑而已，我怎么会扔呢”，呵呵,是<br>我想多了.在海边碰到一小伙，跟我年龄差不多，聊了几句，说是专门过来看海，<br>却没看到蓝色的大海，有点遗憾。卷起裤腿,跑到水里时,突然一个浪过来,悲剧啊,裤子全湿了.<br>在海边,微风吹过,听着海浪的声音,心情一下子舒畅了好多，所有负担、所有不愉快的<br>事统统抛到九霄云外,全身感觉格外的轻松!要是再有一个心爱的姑娘一起,那就完美了.</p>\n<p>转眼四点多了,该回去了,我们没有原路返回,本来打算找一条近路,结果长隆隧道不让自行车走,我去,摩托车<br>让通过,就是不让自行车走,要我说直接冲过去得类,反正那守卫也没有车,肯定追不上.可另外一哥们太<br>谨慎了,不同意.我们只好再寻找路线了.接着就悲剧更悲剧了,一路上都在修路,坑坑洼洼还是小事,<br>关键土太厚了,一辆大车过去,整个人感觉被土埋了,人没老,头发先变白了.有种回到老家的感觉.<br>这一路就不太爽了,坑坑洼洼的人家新车可以很轻松的骑过去,我那破车咋整也骑不快,一路他们一直都<br>在等我,搞得我都有些不好意思,更不幸的是不小心摔到,腿上刮掉一层皮,还好,谁叫咱是土生土长的农村人,<br>这点小伤算个屁,站起来拍拍屁股继续走着.</p>\n<p>晚上八点多才到市区,大家都饿坏了,突然路边冒出一家酱饼小摊,刚出锅的实在是太好吃了,没想到珠海<br>还有这货,真是太让人意外了,想想还是在大学时吃过,差不多两年没见过这玩意了.最后找了家饭馆,吃完饭<br>各回各家,该干嘛干嘛!</p>\n<p>回到家坐下来想想,这次出去还是蛮有意思的.我想当时如果不去的话,这一天就在家睡觉啊什么的,同样会过去,<br>然后感叹,唉!周末就这样过去了.人生也一样,不能老是处在当时没做,过了后悔这种无限循环中.跟着心走,想<br>做就做,这样即使到死的时候,也不会因当初错过而后悔.</p>\n<figure>\n    <figcaption>横琴.</figcaption>\n    <a href=\"/images/hengqin0.jpg\"><img src=\"/images/hengqin0.jpg\"></a>\n</figure>\n\n<figure>\n    <figcaption>海边集体照.</figcaption>\n    <a href=\"/images/hengqin1.jpg\"><img src=\"/images/hengqin1.jpg\"></a>\n</figure>\n\n<figure>\n    <figcaption>海浪.</figcaption>\n    <a href=\"/images/hengqin2.jpg\"><img src=\"/images/hengqin2.jpg\"></a>\n</figure>\n\n<figure>\n    <figcaption></figcaption>\n    <a href=\"/images/hengqin4.jpg\"><img src=\"/images/hengqin4.jpg\"></a>\n</figure>\n\n<figure>\n    <figcaption>回去的路上.</figcaption>\n    <a href=\"/images/hengqin3.jpg\"><img src=\"/images/hengqin3.jpg\"></a>\n</figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","popularPost_tmp_postPath":true,"eyeCatchImage":"/images/hengqin0.jpg","popularPost_tmp_gaData":{"updated":"Thu Jun 13 2019 11:26:00 GMT+0800 (CST)","title":"横琴岛游记","path":"blog/2014-03-24-cycling-to-hengqin/","eyeCatchImage":"/images/hengqin0.jpg","excerpt":null,"date":"2014-03-23T16:00:00.000Z","pv":0,"totalPV":0,"categories":"生活","tags":["自行车","游记"],"internalLinks":["images/hengqin0.jpg","images/hengqin1.jpg","images/hengqin2.jpg","images/hengqin4.jpg","images/hengqin3.jpg"],"keywords":[],"keywordsLength":0}},{"title":"nginx编译报错","date":"2014-03-23T16:00:00.000Z","_content":"在ubuntu(32bit)上安装nginx执行configure时遇到错误如下：\n\n\n    ./configure: error: the HTTP rewrite module requires the PCRE library.\n    You can either disable the module by using --without-http_rewrite_module\n    option, or install the PCRE library into the system, or build the PCRE library\n    statically from the source with nginx by using --with-pcre=<path> option.\n        \n        \n貌似缺少pcre库，在网上搜了，说是需要安装pcre-devel,可是ubuntu上安装是找不到pcre-devel。\n可能是名字变了，后来终于找到解决办法，需要安装 libpcre3 libpcre3-dev：\n\n\n    # sudo apt-get install libpcre3 libpcre3-dev\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/blog/2014-04-10-install-nginx-on-ubuntu.md","raw":"---\ntitle: \"nginx编译报错\"\ndate: 2014-03-24\ncategories: 技术\ntags: [\"nginx\"]\n---\n在ubuntu(32bit)上安装nginx执行configure时遇到错误如下：\n\n\n    ./configure: error: the HTTP rewrite module requires the PCRE library.\n    You can either disable the module by using --without-http_rewrite_module\n    option, or install the PCRE library into the system, or build the PCRE library\n    statically from the source with nginx by using --with-pcre=<path> option.\n        \n        \n貌似缺少pcre库，在网上搜了，说是需要安装pcre-devel,可是ubuntu上安装是找不到pcre-devel。\n可能是名字变了，后来终于找到解决办法，需要安装 libpcre3 libpcre3-dev：\n\n\n    # sudo apt-get install libpcre3 libpcre3-dev\n\n\n\n\n\n\n\n\n\n\n\n","slug":"blog/2014-04-10-install-nginx-on-ubuntu","published":1,"updated":"2019-06-13T03:26:00.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwu44hnd000ffvuj0vbpspvw","content":"<p>在ubuntu(32bit)上安装nginx执行configure时遇到错误如下：</p>\n<pre><code>./configure: error: the HTTP rewrite module requires the PCRE library.\nYou can either disable the module by using --without-http_rewrite_module\noption, or install the PCRE library into the system, or build the PCRE library\nstatically from the source with nginx by using --with-pcre=&lt;path&gt; option.</code></pre><p>貌似缺少pcre库，在网上搜了，说是需要安装pcre-devel,可是ubuntu上安装是找不到pcre-devel。<br>可能是名字变了，后来终于找到解决办法，需要安装 libpcre3 libpcre3-dev：</p>\n<pre><code># sudo apt-get install libpcre3 libpcre3-dev</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>在ubuntu(32bit)上安装nginx执行configure时遇到错误如下：</p>\n<pre><code>./configure: error: the HTTP rewrite module requires the PCRE library.\nYou can either disable the module by using --without-http_rewrite_module\noption, or install the PCRE library into the system, or build the PCRE library\nstatically from the source with nginx by using --with-pcre=&lt;path&gt; option.</code></pre><p>貌似缺少pcre库，在网上搜了，说是需要安装pcre-devel,可是ubuntu上安装是找不到pcre-devel。<br>可能是名字变了，后来终于找到解决办法，需要安装 libpcre3 libpcre3-dev：</p>\n<pre><code># sudo apt-get install libpcre3 libpcre3-dev</code></pre>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Thu Jun 13 2019 11:26:00 GMT+0800 (CST)","title":"nginx编译报错","path":"blog/2014-04-10-install-nginx-on-ubuntu/","eyeCatchImage":null,"excerpt":null,"date":"2014-03-23T16:00:00.000Z","pv":0,"totalPV":0,"categories":"技术","tags":["nginx"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"安装archlinux","date":"2014-04-25T16:00:00.000Z","_content":"\n活着就是为了折腾，Ubuntu已经用了4年多了吧，从最近几年看来，ubuntu的发展目的是要面向大众化，由于要适合大众，所以他的操作更简单，图形界面更美观，这就导致它越来越笨重。对于一个追求速度，喜欢命令模式的程序猿，ubuntu已然不能满足我的要求，所以安装archlinux的想法产生了，活着不就是为了折腾嘛，于是一步一步定制专属自己的linux系统。\n\n\n1.下载archlinux镜像文件\n2.制作usb安装盘\n\n         # dd bs=4M if=</archlinux-2014.04.01-dual.iso/的/路径> of=/dev/<U盘文件> && sync\n\n3.从U盘启动选择Boot Arch Linux\n4.配置安装\n 1)连接网络\n   有线连接：\n   \n         # dhcpcd\n         \n   无线连接：\n   \n         # wifi-menu\n         \n   ADSL 宽带连接：\n   配置：\n   \n         # pppoe-setup\n         \n   连接：\n   \n         # systemctl start adsl\n         \n  2)选择软件源\n  \n         # vi /etc/pacman.d/mirrorlist\n         \n     更新本地数据库：\n     \n         # pacman -Syy\n\n5.分区\n   1)分区方案：\n   \n     $ lsblk /dev/sda -o NAME,FSTYPE,SIZE,MOUNTPOINT\n       NAME   FSTYPE   SIZE MOUNTPOINT\n       sda           120G \n       ├─sda1 ext4    36G /\n       ├─sda2 ext4    80G /home\n       └─sda3 swap     4G [SWAP]\n       \n   注意：swap分区大小建议等于或两倍于内存。\n   2)分区：\n      MBR 分区：\n      \n         # cfdisk /dev/sda\n         \n      GPT 分区：\n      \n         # cgdisk /dev/sda\n\n6.创建文件系统：\n   创建 ext4 分区：\n   \n         # mkfs.ext4 /dev/sda1\n         # mkfs.ext4 /dev/sda2\n         \n   创建并激活 swap 分区：\n   \n         # mkswap /dev/sda3\n         # swapon /dev/sda3\n         \n7.系统安装\n   1)挂载分区：\n       挂在 / 分区：\n       \n         # mount /dev/sda? /mnt\n         \n       挂在home分区：\n       \n         # mkdir /mnt/home\n         # mount /dev/sda?  /mnt/home\n\n   2)安装基础系统：\n   \n         # pacstrap -i /mnt base\n         \n   3)生成fstab\n      \n        # genfstab -U -p /mnt >> /mnt/etc/fstab\n        \n8.进入新系统\n\n        # arch-chroot /mnt /bin/bash\n        \n9.配置local\n\n    1）编辑/etc/locale.gen，移除需要的行前的 #：\n    \n        # vi /etc/locale.gen\n        \n      简体中文用户，可移除下列行前的 # ：\n  \n        #zh_CN.UTF-8 UTF-8 \n        \n    2)更新设置：\n    \n        # locale-gen\n        \n    3)设置默认语言\n    \n        # echo LANG=<语言>  > /etc/locale.conf\n    \n    4)简体中文用户可执行：\n\n        # echo LANG=zh_CN.UTF-8  > /etc/locale.conf\n        \n    5)时区\n    \n    查看时区：\n    时区：\n\n          # ls /usr/share/zoneinfo/\n\n    子时区：\n    \n          # ls /usr/share/zoneinfo/<时区>/\n\n    设置时区：\n    \n          # ln -s /usr/share/zoneinfo/<时区>/<子时区> /etc/localtime\n    \n    中国大陆用户可执行：\n    \n          # ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n          \n    6)硬件时间：\n    \n    推荐）使用UTC时间：\n    \n          # hwclock --systohc --utc\n\n     使用本地时间：\n\n      !__ 使用本地时间可能会引起某些不可修复的bug。\n\n         # hwclock --systohc --localtime\n\n10.创建 ramdisk 环境\n\n（可选）配置\n\n           # vi /etc/mkinitcpio.conf\n\n  创建：\n\n           # mkinitcpio -p linux\n\n11.为 root 用户设置密码\n\n           # passwd\n\n12. 安装Grub引导器\n\n      1)安装 BIOS + MBR：\n\n           # pacman -S grub\n           # grub-install --target=i386-pc --recheck /dev/sda\n    \n       2）生成配置文件：\n\n            # grub-mkconfig -o /boot/grub/grub.cfg\n\n       3）欲引导其他系统，如 Windows ，可执行：\n\n             # pacman -S os-prober\n             # grub-mkconfig -o /boot/grub/grub.cfg\n\n\n13. 退出安装环境\n\n退回安装环境\n\n              # exit\n卸载新分区\n\n              # umount -R /mnt\n\n重启\n              # reboot\n\n14. 用户管理\n\n     1）添加一个典型的桌面用户：\n\n           #  useradd -m -g users -G wheel -s /bin/bash <用户名>\n\n       2）设置密码：\n \n            # passwd <用户名>\n\n       4)配置 sudo:\n\n         安装 sudo：\n\n          # pacman -S sudo\n \n        配置：\n          # EDITOR=nano visudo\n\n        反注释该行（删去 # ）：\n          \n          # %wheel ALL=(ALL) ALL\n\n       5)将允许获取 root 权限的用户加入 wheel 用户组（若用户已在该组则跳过）\n\n           # gpasswd -a <用户名> wheel\n\n       6)使用 sudo 时，在输入 <命令> 部分 Tab 补全会失效。如需启用 sudo 的 Tab 补全，执行：\n\n         $ sudo pacman -S  bash-completion\n         $ echo complete -cf sudo >> ~/.bashrc\n\n\n15.声音管理\n\n        1)安装 alsa-utils \n\n                 # pacman -S alsa-utils\n\n         2)配置：\n \n                 # alsamixer\n\n\n16.  配置 GUI（图形用户界面）\n\n       1) 安装显卡驱动:\n\n            确定显卡型号：\n\n                      $ lspci | grep VGA\n                   \n           对应可选驱动包：\n    \n        Intel 显卡：xf86-video-intel\n        nVidia 显卡：\n        GeForce 7 以上：xf86-video-nouveau；nvidia\n        GeForce 6/7：xf86-video-nouveau；nvidia-304xx\n        AMD/ATI 显卡：xf86-video-ati；AMD Catalyst（Arch Wiki）\n       \n     安装驱动：\n\n                # pacman -S <驱动包>\n\n\n       2)  安装 X 窗口系统:\n\n         X 窗口系统（X11/X）是诸多桌面环境的基础。\n\n         安装 Xorg Server\n\n                     # pacman -S xorg-server xorg-server-utils xorg-xinit\n\n         添加3D支持\n\n                   # pacman -S mesa\n         \n          添加触摸板支持\n\n                    # pacman -S xf86-input-synaptics\n          安装字体\n\n        （推荐）Dejavu和文泉驿-微米黑：\n\n                    # pacman -S ttf-dejavu wqy-microhei\n\n17. 安装桌面环境\n\nArch Linux 官方提供支持的桌面环境：\nCinnamon（官网）：cinnamon\nEnlightenment（官网）：enlightenment17\nGNOME（官网)：gnome、gnome-extra（附加功能包）\nKDE（官网)：kde（完全版）、kdebase（基础版）、kde-l10n-zh_cn（简体中文包）\nLXDE（官网)：lxde。\nXfce（官网)：xfce4、xfce4-goodies（附加功能包）\n其他桌面环境：Arch Wiki\n更加轻量级的窗口管理器：：Arch Wiki\n\n安装：\n\n                 # pacman -S <桌面环境组>\n\n18. 启动桌面环境\n\n启动方式有两种：从命令行以 startx 启动；使用显示管理器（Display Manager）。\n\nstartx：（以GNOME为例）\n\n配置：\n\n           $ cp /etc/skel/.xinitrc ~\n           $ vi ~/.xinitrc\n\n反注释对应行：\n\n           # exec gnome-session\n启动：\n\n           $ startx\n\n显示管理器：（以GDM为例）\n从命令行启动：\n\n           # systemctl start gdm.service\n\n随系统启动：\n\n           # systemctl enable gdm.service\n\n19. 安装输入法\n\n fcitx：\n\n安装：\n\n         # pacman -S fcitx-im\n\n配置：\n\n         export GTK_IM_MODULE=fcitx\n         export QT_IM_MODULE=fcitx\n         export XMODIFIERS=\"@im=fcitx\"\n\nKDM、GDM、LightDM 等显示管理器的用户，向 ~/.xprofile添加以上内容。\n使用 startx 或 slim 的用户，向 ~/.xinitrc 添加以上内容。\n为在GNOME上使用fcitx，需禁用iBus：\n\n         $ gsettings set org.gnome.settings-daemon.plugins.keyboard active false\n\n20. AUR（Arch 用户软件仓库）\n\nArch Linux预设几个软件仓库中可能没有用户需要的软件包。遇到这种情况时，\n可上AUR检索。AUR是是为用户而建、由用户主导的Arch软件仓库。AUR中的\n软件包以软件包生成脚本（PKGBUILD）的形式提供，用户自己通过makepkg\n生成包，再由pacman安装。创建AUR的初衷是方便用户维护和分享新软件包，\n并由官方定期从中挑选软件包进入[community]仓库。\nYaourt是由社区编写的脚本，方便用户从AUR上获取需要的软件。以下介绍\nYaourt的安装和使用。\n\n1) 安装\n\nYaourt并不在官方软件源中，除从AUR中安装，还可通过第三方软件源进行安装：\n\n添加软件源：\n\n将下列内容添加至 /etc/pacman.conf ：\n\n源1：\n \n               [archlinuxfr]\n               SigLevel = Never\n               Server = http://repo.archlinux.fr/$arch\n\n源2（Arch Linux CN 友情提供 :) ）：\n\n             [archlinuxcn]\n             SigLevel = Never\n             Server = http://repo.archlinuxcn.org/$arch\n\n安装：\n\n             # pacman -Sy base-devel yaourt\n2) 使用\n\nYaourt 可以安装来自官方源的软件：\n\n             $ yaourt <软件名>\n\n更新所有包（包括来自官方源的包）：\n\n             $ yaourt -Syua\n搜索：\n\n$ yaourt <关键字>\n","source":"_posts/blog/2014-04-26-install-archlinux.md","raw":"---\ntitle: \"安装archlinux\"\ndate: 2014-04-26\ncategories: 技术\ntags: [\"archlinux\"]\n---\n\n活着就是为了折腾，Ubuntu已经用了4年多了吧，从最近几年看来，ubuntu的发展目的是要面向大众化，由于要适合大众，所以他的操作更简单，图形界面更美观，这就导致它越来越笨重。对于一个追求速度，喜欢命令模式的程序猿，ubuntu已然不能满足我的要求，所以安装archlinux的想法产生了，活着不就是为了折腾嘛，于是一步一步定制专属自己的linux系统。\n\n\n1.下载archlinux镜像文件\n2.制作usb安装盘\n\n         # dd bs=4M if=</archlinux-2014.04.01-dual.iso/的/路径> of=/dev/<U盘文件> && sync\n\n3.从U盘启动选择Boot Arch Linux\n4.配置安装\n 1)连接网络\n   有线连接：\n   \n         # dhcpcd\n         \n   无线连接：\n   \n         # wifi-menu\n         \n   ADSL 宽带连接：\n   配置：\n   \n         # pppoe-setup\n         \n   连接：\n   \n         # systemctl start adsl\n         \n  2)选择软件源\n  \n         # vi /etc/pacman.d/mirrorlist\n         \n     更新本地数据库：\n     \n         # pacman -Syy\n\n5.分区\n   1)分区方案：\n   \n     $ lsblk /dev/sda -o NAME,FSTYPE,SIZE,MOUNTPOINT\n       NAME   FSTYPE   SIZE MOUNTPOINT\n       sda           120G \n       ├─sda1 ext4    36G /\n       ├─sda2 ext4    80G /home\n       └─sda3 swap     4G [SWAP]\n       \n   注意：swap分区大小建议等于或两倍于内存。\n   2)分区：\n      MBR 分区：\n      \n         # cfdisk /dev/sda\n         \n      GPT 分区：\n      \n         # cgdisk /dev/sda\n\n6.创建文件系统：\n   创建 ext4 分区：\n   \n         # mkfs.ext4 /dev/sda1\n         # mkfs.ext4 /dev/sda2\n         \n   创建并激活 swap 分区：\n   \n         # mkswap /dev/sda3\n         # swapon /dev/sda3\n         \n7.系统安装\n   1)挂载分区：\n       挂在 / 分区：\n       \n         # mount /dev/sda? /mnt\n         \n       挂在home分区：\n       \n         # mkdir /mnt/home\n         # mount /dev/sda?  /mnt/home\n\n   2)安装基础系统：\n   \n         # pacstrap -i /mnt base\n         \n   3)生成fstab\n      \n        # genfstab -U -p /mnt >> /mnt/etc/fstab\n        \n8.进入新系统\n\n        # arch-chroot /mnt /bin/bash\n        \n9.配置local\n\n    1）编辑/etc/locale.gen，移除需要的行前的 #：\n    \n        # vi /etc/locale.gen\n        \n      简体中文用户，可移除下列行前的 # ：\n  \n        #zh_CN.UTF-8 UTF-8 \n        \n    2)更新设置：\n    \n        # locale-gen\n        \n    3)设置默认语言\n    \n        # echo LANG=<语言>  > /etc/locale.conf\n    \n    4)简体中文用户可执行：\n\n        # echo LANG=zh_CN.UTF-8  > /etc/locale.conf\n        \n    5)时区\n    \n    查看时区：\n    时区：\n\n          # ls /usr/share/zoneinfo/\n\n    子时区：\n    \n          # ls /usr/share/zoneinfo/<时区>/\n\n    设置时区：\n    \n          # ln -s /usr/share/zoneinfo/<时区>/<子时区> /etc/localtime\n    \n    中国大陆用户可执行：\n    \n          # ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n          \n    6)硬件时间：\n    \n    推荐）使用UTC时间：\n    \n          # hwclock --systohc --utc\n\n     使用本地时间：\n\n      !__ 使用本地时间可能会引起某些不可修复的bug。\n\n         # hwclock --systohc --localtime\n\n10.创建 ramdisk 环境\n\n（可选）配置\n\n           # vi /etc/mkinitcpio.conf\n\n  创建：\n\n           # mkinitcpio -p linux\n\n11.为 root 用户设置密码\n\n           # passwd\n\n12. 安装Grub引导器\n\n      1)安装 BIOS + MBR：\n\n           # pacman -S grub\n           # grub-install --target=i386-pc --recheck /dev/sda\n    \n       2）生成配置文件：\n\n            # grub-mkconfig -o /boot/grub/grub.cfg\n\n       3）欲引导其他系统，如 Windows ，可执行：\n\n             # pacman -S os-prober\n             # grub-mkconfig -o /boot/grub/grub.cfg\n\n\n13. 退出安装环境\n\n退回安装环境\n\n              # exit\n卸载新分区\n\n              # umount -R /mnt\n\n重启\n              # reboot\n\n14. 用户管理\n\n     1）添加一个典型的桌面用户：\n\n           #  useradd -m -g users -G wheel -s /bin/bash <用户名>\n\n       2）设置密码：\n \n            # passwd <用户名>\n\n       4)配置 sudo:\n\n         安装 sudo：\n\n          # pacman -S sudo\n \n        配置：\n          # EDITOR=nano visudo\n\n        反注释该行（删去 # ）：\n          \n          # %wheel ALL=(ALL) ALL\n\n       5)将允许获取 root 权限的用户加入 wheel 用户组（若用户已在该组则跳过）\n\n           # gpasswd -a <用户名> wheel\n\n       6)使用 sudo 时，在输入 <命令> 部分 Tab 补全会失效。如需启用 sudo 的 Tab 补全，执行：\n\n         $ sudo pacman -S  bash-completion\n         $ echo complete -cf sudo >> ~/.bashrc\n\n\n15.声音管理\n\n        1)安装 alsa-utils \n\n                 # pacman -S alsa-utils\n\n         2)配置：\n \n                 # alsamixer\n\n\n16.  配置 GUI（图形用户界面）\n\n       1) 安装显卡驱动:\n\n            确定显卡型号：\n\n                      $ lspci | grep VGA\n                   \n           对应可选驱动包：\n    \n        Intel 显卡：xf86-video-intel\n        nVidia 显卡：\n        GeForce 7 以上：xf86-video-nouveau；nvidia\n        GeForce 6/7：xf86-video-nouveau；nvidia-304xx\n        AMD/ATI 显卡：xf86-video-ati；AMD Catalyst（Arch Wiki）\n       \n     安装驱动：\n\n                # pacman -S <驱动包>\n\n\n       2)  安装 X 窗口系统:\n\n         X 窗口系统（X11/X）是诸多桌面环境的基础。\n\n         安装 Xorg Server\n\n                     # pacman -S xorg-server xorg-server-utils xorg-xinit\n\n         添加3D支持\n\n                   # pacman -S mesa\n         \n          添加触摸板支持\n\n                    # pacman -S xf86-input-synaptics\n          安装字体\n\n        （推荐）Dejavu和文泉驿-微米黑：\n\n                    # pacman -S ttf-dejavu wqy-microhei\n\n17. 安装桌面环境\n\nArch Linux 官方提供支持的桌面环境：\nCinnamon（官网）：cinnamon\nEnlightenment（官网）：enlightenment17\nGNOME（官网)：gnome、gnome-extra（附加功能包）\nKDE（官网)：kde（完全版）、kdebase（基础版）、kde-l10n-zh_cn（简体中文包）\nLXDE（官网)：lxde。\nXfce（官网)：xfce4、xfce4-goodies（附加功能包）\n其他桌面环境：Arch Wiki\n更加轻量级的窗口管理器：：Arch Wiki\n\n安装：\n\n                 # pacman -S <桌面环境组>\n\n18. 启动桌面环境\n\n启动方式有两种：从命令行以 startx 启动；使用显示管理器（Display Manager）。\n\nstartx：（以GNOME为例）\n\n配置：\n\n           $ cp /etc/skel/.xinitrc ~\n           $ vi ~/.xinitrc\n\n反注释对应行：\n\n           # exec gnome-session\n启动：\n\n           $ startx\n\n显示管理器：（以GDM为例）\n从命令行启动：\n\n           # systemctl start gdm.service\n\n随系统启动：\n\n           # systemctl enable gdm.service\n\n19. 安装输入法\n\n fcitx：\n\n安装：\n\n         # pacman -S fcitx-im\n\n配置：\n\n         export GTK_IM_MODULE=fcitx\n         export QT_IM_MODULE=fcitx\n         export XMODIFIERS=\"@im=fcitx\"\n\nKDM、GDM、LightDM 等显示管理器的用户，向 ~/.xprofile添加以上内容。\n使用 startx 或 slim 的用户，向 ~/.xinitrc 添加以上内容。\n为在GNOME上使用fcitx，需禁用iBus：\n\n         $ gsettings set org.gnome.settings-daemon.plugins.keyboard active false\n\n20. AUR（Arch 用户软件仓库）\n\nArch Linux预设几个软件仓库中可能没有用户需要的软件包。遇到这种情况时，\n可上AUR检索。AUR是是为用户而建、由用户主导的Arch软件仓库。AUR中的\n软件包以软件包生成脚本（PKGBUILD）的形式提供，用户自己通过makepkg\n生成包，再由pacman安装。创建AUR的初衷是方便用户维护和分享新软件包，\n并由官方定期从中挑选软件包进入[community]仓库。\nYaourt是由社区编写的脚本，方便用户从AUR上获取需要的软件。以下介绍\nYaourt的安装和使用。\n\n1) 安装\n\nYaourt并不在官方软件源中，除从AUR中安装，还可通过第三方软件源进行安装：\n\n添加软件源：\n\n将下列内容添加至 /etc/pacman.conf ：\n\n源1：\n \n               [archlinuxfr]\n               SigLevel = Never\n               Server = http://repo.archlinux.fr/$arch\n\n源2（Arch Linux CN 友情提供 :) ）：\n\n             [archlinuxcn]\n             SigLevel = Never\n             Server = http://repo.archlinuxcn.org/$arch\n\n安装：\n\n             # pacman -Sy base-devel yaourt\n2) 使用\n\nYaourt 可以安装来自官方源的软件：\n\n             $ yaourt <软件名>\n\n更新所有包（包括来自官方源的包）：\n\n             $ yaourt -Syua\n搜索：\n\n$ yaourt <关键字>\n","slug":"blog/2014-04-26-install-archlinux","published":1,"updated":"2019-06-13T03:26:00.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwu44hne000gfvujrxyz0qk0","content":"<p>活着就是为了折腾，Ubuntu已经用了4年多了吧，从最近几年看来，ubuntu的发展目的是要面向大众化，由于要适合大众，所以他的操作更简单，图形界面更美观，这就导致它越来越笨重。对于一个追求速度，喜欢命令模式的程序猿，ubuntu已然不能满足我的要求，所以安装archlinux的想法产生了，活着不就是为了折腾嘛，于是一步一步定制专属自己的linux系统。</p>\n<p>1.下载archlinux镜像文件<br>2.制作usb安装盘</p>\n<pre><code># dd bs=4M if=&lt;/archlinux-2014.04.01-dual.iso/的/路径&gt; of=/dev/&lt;U盘文件&gt; &amp;&amp; sync</code></pre><p>3.从U盘启动选择Boot Arch Linux<br>4.配置安装<br> 1)连接网络<br>   有线连接：</p>\n<pre><code># dhcpcd</code></pre><p>   无线连接：</p>\n<pre><code># wifi-menu</code></pre><p>   ADSL 宽带连接：<br>   配置：</p>\n<pre><code># pppoe-setup</code></pre><p>   连接：</p>\n<pre><code># systemctl start adsl</code></pre><p>  2)选择软件源</p>\n<pre><code>    # vi /etc/pacman.d/mirrorlist\n\n更新本地数据库：\n\n    # pacman -Syy</code></pre><p>5.分区<br>   1)分区方案：</p>\n<pre><code>$ lsblk /dev/sda -o NAME,FSTYPE,SIZE,MOUNTPOINT\n  NAME   FSTYPE   SIZE MOUNTPOINT\n  sda           120G \n  ├─sda1 ext4    36G /\n  ├─sda2 ext4    80G /home\n  └─sda3 swap     4G [SWAP]</code></pre><p>   注意：swap分区大小建议等于或两倍于内存。<br>   2)分区：<br>      MBR 分区：</p>\n<pre><code>   # cfdisk /dev/sda\n\nGPT 分区：\n\n   # cgdisk /dev/sda</code></pre><p>6.创建文件系统：<br>   创建 ext4 分区：</p>\n<pre><code># mkfs.ext4 /dev/sda1\n# mkfs.ext4 /dev/sda2</code></pre><p>   创建并激活 swap 分区：</p>\n<pre><code># mkswap /dev/sda3\n# swapon /dev/sda3</code></pre><p>7.系统安装<br>   1)挂载分区：<br>       挂在 / 分区：</p>\n<pre><code>  # mount /dev/sda? /mnt\n\n挂在home分区：\n\n  # mkdir /mnt/home\n  # mount /dev/sda?  /mnt/home</code></pre><p>   2)安装基础系统：</p>\n<pre><code># pacstrap -i /mnt base</code></pre><p>   3)生成fstab</p>\n<pre><code># genfstab -U -p /mnt &gt;&gt; /mnt/etc/fstab</code></pre><p>8.进入新系统</p>\n<pre><code># arch-chroot /mnt /bin/bash</code></pre><p>9.配置local</p>\n<pre><code>1）编辑/etc/locale.gen，移除需要的行前的 #：\n\n    # vi /etc/locale.gen\n\n  简体中文用户，可移除下列行前的 # ：\n\n    #zh_CN.UTF-8 UTF-8 \n\n2)更新设置：\n\n    # locale-gen\n\n3)设置默认语言\n\n    # echo LANG=&lt;语言&gt;  &gt; /etc/locale.conf\n\n4)简体中文用户可执行：\n\n    # echo LANG=zh_CN.UTF-8  &gt; /etc/locale.conf\n\n5)时区\n\n查看时区：\n时区：\n\n      # ls /usr/share/zoneinfo/\n\n子时区：\n\n      # ls /usr/share/zoneinfo/&lt;时区&gt;/\n\n设置时区：\n\n      # ln -s /usr/share/zoneinfo/&lt;时区&gt;/&lt;子时区&gt; /etc/localtime\n\n中国大陆用户可执行：\n\n      # ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n\n6)硬件时间：\n\n推荐）使用UTC时间：\n\n      # hwclock --systohc --utc\n\n 使用本地时间：\n\n  !__ 使用本地时间可能会引起某些不可修复的bug。\n\n     # hwclock --systohc --localtime</code></pre><p>10.创建 ramdisk 环境</p>\n<p>（可选）配置</p>\n<pre><code># vi /etc/mkinitcpio.conf</code></pre><p>  创建：</p>\n<pre><code># mkinitcpio -p linux</code></pre><p>11.为 root 用户设置密码</p>\n<pre><code># passwd</code></pre><ol start=\"12\">\n<li><p>安装Grub引导器</p>\n<p>  1)安装 BIOS + MBR：</p>\n<pre><code># pacman -S grub\n# grub-install --target=i386-pc --recheck /dev/sda</code></pre><p>   2）生成配置文件：</p>\n<pre><code># grub-mkconfig -o /boot/grub/grub.cfg</code></pre><p>   3）欲引导其他系统，如 Windows ，可执行：</p>\n<pre><code># pacman -S os-prober\n# grub-mkconfig -o /boot/grub/grub.cfg</code></pre></li>\n</ol>\n<ol start=\"13\">\n<li>退出安装环境</li>\n</ol>\n<p>退回安装环境</p>\n<pre><code># exit</code></pre><p>卸载新分区</p>\n<pre><code># umount -R /mnt</code></pre><p>重启</p>\n<pre><code># reboot</code></pre><ol start=\"14\">\n<li><p>用户管理</p>\n<p> 1）添加一个典型的桌面用户：</p>\n<pre><code>#  useradd -m -g users -G wheel -s /bin/bash &lt;用户名&gt;</code></pre><p>   2）设置密码：</p>\n<pre><code># passwd &lt;用户名&gt;</code></pre><p>   4)配置 sudo:</p>\n<pre><code> 安装 sudo：\n\n  # pacman -S sudo\n\n配置：\n  # EDITOR=nano visudo\n\n反注释该行（删去 # ）：\n\n  # %wheel ALL=(ALL) ALL</code></pre><p>   5)将允许获取 root 权限的用户加入 wheel 用户组（若用户已在该组则跳过）</p>\n<pre><code># gpasswd -a &lt;用户名&gt; wheel</code></pre><p>   6)使用 sudo 时，在输入 &lt;命令&gt; 部分 Tab 补全会失效。如需启用 sudo 的 Tab 补全，执行：</p>\n<pre><code>$ sudo pacman -S  bash-completion\n$ echo complete -cf sudo &gt;&gt; ~/.bashrc</code></pre></li>\n</ol>\n<p>15.声音管理</p>\n<pre><code>1)安装 alsa-utils \n\n         # pacman -S alsa-utils\n\n 2)配置：\n\n         # alsamixer</code></pre><ol start=\"16\">\n<li><p>配置 GUI（图形用户界面）</p>\n<p>  1) 安装显卡驱动:</p>\n<pre><code> 确定显卡型号：\n\n           $ lspci | grep VGA\n\n对应可选驱动包：</code></pre><p>   Intel 显卡：xf86-video-intel<br>   nVidia 显卡：<br>   GeForce 7 以上：xf86-video-nouveau；nvidia<br>   GeForce 6/7：xf86-video-nouveau；nvidia-304xx<br>   AMD/ATI 显卡：xf86-video-ati；AMD Catalyst（Arch Wiki）</p>\n<p>安装驱动：</p>\n<pre><code># pacman -S &lt;驱动包&gt;</code></pre></li>\n</ol>\n<pre><code>2)  安装 X 窗口系统:\n\n  X 窗口系统（X11/X）是诸多桌面环境的基础。\n\n  安装 Xorg Server\n\n              # pacman -S xorg-server xorg-server-utils xorg-xinit\n\n  添加3D支持\n\n            # pacman -S mesa\n\n   添加触摸板支持\n\n             # pacman -S xf86-input-synaptics\n   安装字体\n\n （推荐）Dejavu和文泉驿-微米黑：\n\n             # pacman -S ttf-dejavu wqy-microhei</code></pre><ol start=\"17\">\n<li>安装桌面环境</li>\n</ol>\n<p>Arch Linux 官方提供支持的桌面环境：<br>Cinnamon（官网）：cinnamon<br>Enlightenment（官网）：enlightenment17<br>GNOME（官网)：gnome、gnome-extra（附加功能包）<br>KDE（官网)：kde（完全版）、kdebase（基础版）、kde-l10n-zh_cn（简体中文包）<br>LXDE（官网)：lxde。<br>Xfce（官网)：xfce4、xfce4-goodies（附加功能包）<br>其他桌面环境：Arch Wiki<br>更加轻量级的窗口管理器：：Arch Wiki</p>\n<p>安装：</p>\n<pre><code># pacman -S &lt;桌面环境组&gt;</code></pre><ol start=\"18\">\n<li>启动桌面环境</li>\n</ol>\n<p>启动方式有两种：从命令行以 startx 启动；使用显示管理器（Display Manager）。</p>\n<p>startx：（以GNOME为例）</p>\n<p>配置：</p>\n<pre><code>$ cp /etc/skel/.xinitrc ~\n$ vi ~/.xinitrc</code></pre><p>反注释对应行：</p>\n<pre><code># exec gnome-session</code></pre><p>启动：</p>\n<pre><code>$ startx</code></pre><p>显示管理器：（以GDM为例）<br>从命令行启动：</p>\n<pre><code># systemctl start gdm.service</code></pre><p>随系统启动：</p>\n<pre><code># systemctl enable gdm.service</code></pre><ol start=\"19\">\n<li><p>安装输入法</p>\n<p>fcitx：</p>\n</li>\n</ol>\n<p>安装：</p>\n<pre><code># pacman -S fcitx-im</code></pre><p>配置：</p>\n<pre><code>export GTK_IM_MODULE=fcitx\nexport QT_IM_MODULE=fcitx\nexport XMODIFIERS=&quot;@im=fcitx&quot;</code></pre><p>KDM、GDM、LightDM 等显示管理器的用户，向 ~/.xprofile添加以上内容。<br>使用 startx 或 slim 的用户，向 ~/.xinitrc 添加以上内容。<br>为在GNOME上使用fcitx，需禁用iBus：</p>\n<pre><code>$ gsettings set org.gnome.settings-daemon.plugins.keyboard active false</code></pre><ol start=\"20\">\n<li>AUR（Arch 用户软件仓库）</li>\n</ol>\n<p>Arch Linux预设几个软件仓库中可能没有用户需要的软件包。遇到这种情况时，<br>可上AUR检索。AUR是是为用户而建、由用户主导的Arch软件仓库。AUR中的<br>软件包以软件包生成脚本（PKGBUILD）的形式提供，用户自己通过makepkg<br>生成包，再由pacman安装。创建AUR的初衷是方便用户维护和分享新软件包，<br>并由官方定期从中挑选软件包进入[community]仓库。<br>Yaourt是由社区编写的脚本，方便用户从AUR上获取需要的软件。以下介绍<br>Yaourt的安装和使用。</p>\n<p>1) 安装</p>\n<p>Yaourt并不在官方软件源中，除从AUR中安装，还可通过第三方软件源进行安装：</p>\n<p>添加软件源：</p>\n<p>将下列内容添加至 /etc/pacman.conf ：</p>\n<p>源1：</p>\n<pre><code>[archlinuxfr]\nSigLevel = Never\nServer = http://repo.archlinux.fr/$arch</code></pre><p>源2（Arch Linux CN 友情提供 :) ）：</p>\n<pre><code>[archlinuxcn]\nSigLevel = Never\nServer = http://repo.archlinuxcn.org/$arch</code></pre><p>安装：</p>\n<pre><code># pacman -Sy base-devel yaourt</code></pre><p>2) 使用</p>\n<p>Yaourt 可以安装来自官方源的软件：</p>\n<pre><code>$ yaourt &lt;软件名&gt;</code></pre><p>更新所有包（包括来自官方源的包）：</p>\n<pre><code>$ yaourt -Syua</code></pre><p>搜索：</p>\n<p>$ yaourt &lt;关键字&gt;</p>\n","site":{"data":{}},"excerpt":"","more":"<p>活着就是为了折腾，Ubuntu已经用了4年多了吧，从最近几年看来，ubuntu的发展目的是要面向大众化，由于要适合大众，所以他的操作更简单，图形界面更美观，这就导致它越来越笨重。对于一个追求速度，喜欢命令模式的程序猿，ubuntu已然不能满足我的要求，所以安装archlinux的想法产生了，活着不就是为了折腾嘛，于是一步一步定制专属自己的linux系统。</p>\n<p>1.下载archlinux镜像文件<br>2.制作usb安装盘</p>\n<pre><code># dd bs=4M if=&lt;/archlinux-2014.04.01-dual.iso/的/路径&gt; of=/dev/&lt;U盘文件&gt; &amp;&amp; sync</code></pre><p>3.从U盘启动选择Boot Arch Linux<br>4.配置安装<br> 1)连接网络<br>   有线连接：</p>\n<pre><code># dhcpcd</code></pre><p>   无线连接：</p>\n<pre><code># wifi-menu</code></pre><p>   ADSL 宽带连接：<br>   配置：</p>\n<pre><code># pppoe-setup</code></pre><p>   连接：</p>\n<pre><code># systemctl start adsl</code></pre><p>  2)选择软件源</p>\n<pre><code>    # vi /etc/pacman.d/mirrorlist\n\n更新本地数据库：\n\n    # pacman -Syy</code></pre><p>5.分区<br>   1)分区方案：</p>\n<pre><code>$ lsblk /dev/sda -o NAME,FSTYPE,SIZE,MOUNTPOINT\n  NAME   FSTYPE   SIZE MOUNTPOINT\n  sda           120G \n  ├─sda1 ext4    36G /\n  ├─sda2 ext4    80G /home\n  └─sda3 swap     4G [SWAP]</code></pre><p>   注意：swap分区大小建议等于或两倍于内存。<br>   2)分区：<br>      MBR 分区：</p>\n<pre><code>   # cfdisk /dev/sda\n\nGPT 分区：\n\n   # cgdisk /dev/sda</code></pre><p>6.创建文件系统：<br>   创建 ext4 分区：</p>\n<pre><code># mkfs.ext4 /dev/sda1\n# mkfs.ext4 /dev/sda2</code></pre><p>   创建并激活 swap 分区：</p>\n<pre><code># mkswap /dev/sda3\n# swapon /dev/sda3</code></pre><p>7.系统安装<br>   1)挂载分区：<br>       挂在 / 分区：</p>\n<pre><code>  # mount /dev/sda? /mnt\n\n挂在home分区：\n\n  # mkdir /mnt/home\n  # mount /dev/sda?  /mnt/home</code></pre><p>   2)安装基础系统：</p>\n<pre><code># pacstrap -i /mnt base</code></pre><p>   3)生成fstab</p>\n<pre><code># genfstab -U -p /mnt &gt;&gt; /mnt/etc/fstab</code></pre><p>8.进入新系统</p>\n<pre><code># arch-chroot /mnt /bin/bash</code></pre><p>9.配置local</p>\n<pre><code>1）编辑/etc/locale.gen，移除需要的行前的 #：\n\n    # vi /etc/locale.gen\n\n  简体中文用户，可移除下列行前的 # ：\n\n    #zh_CN.UTF-8 UTF-8 \n\n2)更新设置：\n\n    # locale-gen\n\n3)设置默认语言\n\n    # echo LANG=&lt;语言&gt;  &gt; /etc/locale.conf\n\n4)简体中文用户可执行：\n\n    # echo LANG=zh_CN.UTF-8  &gt; /etc/locale.conf\n\n5)时区\n\n查看时区：\n时区：\n\n      # ls /usr/share/zoneinfo/\n\n子时区：\n\n      # ls /usr/share/zoneinfo/&lt;时区&gt;/\n\n设置时区：\n\n      # ln -s /usr/share/zoneinfo/&lt;时区&gt;/&lt;子时区&gt; /etc/localtime\n\n中国大陆用户可执行：\n\n      # ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n\n6)硬件时间：\n\n推荐）使用UTC时间：\n\n      # hwclock --systohc --utc\n\n 使用本地时间：\n\n  !__ 使用本地时间可能会引起某些不可修复的bug。\n\n     # hwclock --systohc --localtime</code></pre><p>10.创建 ramdisk 环境</p>\n<p>（可选）配置</p>\n<pre><code># vi /etc/mkinitcpio.conf</code></pre><p>  创建：</p>\n<pre><code># mkinitcpio -p linux</code></pre><p>11.为 root 用户设置密码</p>\n<pre><code># passwd</code></pre><ol start=\"12\">\n<li><p>安装Grub引导器</p>\n<p>  1)安装 BIOS + MBR：</p>\n<pre><code># pacman -S grub\n# grub-install --target=i386-pc --recheck /dev/sda</code></pre><p>   2）生成配置文件：</p>\n<pre><code># grub-mkconfig -o /boot/grub/grub.cfg</code></pre><p>   3）欲引导其他系统，如 Windows ，可执行：</p>\n<pre><code># pacman -S os-prober\n# grub-mkconfig -o /boot/grub/grub.cfg</code></pre></li>\n</ol>\n<ol start=\"13\">\n<li>退出安装环境</li>\n</ol>\n<p>退回安装环境</p>\n<pre><code># exit</code></pre><p>卸载新分区</p>\n<pre><code># umount -R /mnt</code></pre><p>重启</p>\n<pre><code># reboot</code></pre><ol start=\"14\">\n<li><p>用户管理</p>\n<p> 1）添加一个典型的桌面用户：</p>\n<pre><code>#  useradd -m -g users -G wheel -s /bin/bash &lt;用户名&gt;</code></pre><p>   2）设置密码：</p>\n<pre><code># passwd &lt;用户名&gt;</code></pre><p>   4)配置 sudo:</p>\n<pre><code> 安装 sudo：\n\n  # pacman -S sudo\n\n配置：\n  # EDITOR=nano visudo\n\n反注释该行（删去 # ）：\n\n  # %wheel ALL=(ALL) ALL</code></pre><p>   5)将允许获取 root 权限的用户加入 wheel 用户组（若用户已在该组则跳过）</p>\n<pre><code># gpasswd -a &lt;用户名&gt; wheel</code></pre><p>   6)使用 sudo 时，在输入 &lt;命令&gt; 部分 Tab 补全会失效。如需启用 sudo 的 Tab 补全，执行：</p>\n<pre><code>$ sudo pacman -S  bash-completion\n$ echo complete -cf sudo &gt;&gt; ~/.bashrc</code></pre></li>\n</ol>\n<p>15.声音管理</p>\n<pre><code>1)安装 alsa-utils \n\n         # pacman -S alsa-utils\n\n 2)配置：\n\n         # alsamixer</code></pre><ol start=\"16\">\n<li><p>配置 GUI（图形用户界面）</p>\n<p>  1) 安装显卡驱动:</p>\n<pre><code> 确定显卡型号：\n\n           $ lspci | grep VGA\n\n对应可选驱动包：</code></pre><p>   Intel 显卡：xf86-video-intel<br>   nVidia 显卡：<br>   GeForce 7 以上：xf86-video-nouveau；nvidia<br>   GeForce 6/7：xf86-video-nouveau；nvidia-304xx<br>   AMD/ATI 显卡：xf86-video-ati；AMD Catalyst（Arch Wiki）</p>\n<p>安装驱动：</p>\n<pre><code># pacman -S &lt;驱动包&gt;</code></pre></li>\n</ol>\n<pre><code>2)  安装 X 窗口系统:\n\n  X 窗口系统（X11/X）是诸多桌面环境的基础。\n\n  安装 Xorg Server\n\n              # pacman -S xorg-server xorg-server-utils xorg-xinit\n\n  添加3D支持\n\n            # pacman -S mesa\n\n   添加触摸板支持\n\n             # pacman -S xf86-input-synaptics\n   安装字体\n\n （推荐）Dejavu和文泉驿-微米黑：\n\n             # pacman -S ttf-dejavu wqy-microhei</code></pre><ol start=\"17\">\n<li>安装桌面环境</li>\n</ol>\n<p>Arch Linux 官方提供支持的桌面环境：<br>Cinnamon（官网）：cinnamon<br>Enlightenment（官网）：enlightenment17<br>GNOME（官网)：gnome、gnome-extra（附加功能包）<br>KDE（官网)：kde（完全版）、kdebase（基础版）、kde-l10n-zh_cn（简体中文包）<br>LXDE（官网)：lxde。<br>Xfce（官网)：xfce4、xfce4-goodies（附加功能包）<br>其他桌面环境：Arch Wiki<br>更加轻量级的窗口管理器：：Arch Wiki</p>\n<p>安装：</p>\n<pre><code># pacman -S &lt;桌面环境组&gt;</code></pre><ol start=\"18\">\n<li>启动桌面环境</li>\n</ol>\n<p>启动方式有两种：从命令行以 startx 启动；使用显示管理器（Display Manager）。</p>\n<p>startx：（以GNOME为例）</p>\n<p>配置：</p>\n<pre><code>$ cp /etc/skel/.xinitrc ~\n$ vi ~/.xinitrc</code></pre><p>反注释对应行：</p>\n<pre><code># exec gnome-session</code></pre><p>启动：</p>\n<pre><code>$ startx</code></pre><p>显示管理器：（以GDM为例）<br>从命令行启动：</p>\n<pre><code># systemctl start gdm.service</code></pre><p>随系统启动：</p>\n<pre><code># systemctl enable gdm.service</code></pre><ol start=\"19\">\n<li><p>安装输入法</p>\n<p>fcitx：</p>\n</li>\n</ol>\n<p>安装：</p>\n<pre><code># pacman -S fcitx-im</code></pre><p>配置：</p>\n<pre><code>export GTK_IM_MODULE=fcitx\nexport QT_IM_MODULE=fcitx\nexport XMODIFIERS=&quot;@im=fcitx&quot;</code></pre><p>KDM、GDM、LightDM 等显示管理器的用户，向 ~/.xprofile添加以上内容。<br>使用 startx 或 slim 的用户，向 ~/.xinitrc 添加以上内容。<br>为在GNOME上使用fcitx，需禁用iBus：</p>\n<pre><code>$ gsettings set org.gnome.settings-daemon.plugins.keyboard active false</code></pre><ol start=\"20\">\n<li>AUR（Arch 用户软件仓库）</li>\n</ol>\n<p>Arch Linux预设几个软件仓库中可能没有用户需要的软件包。遇到这种情况时，<br>可上AUR检索。AUR是是为用户而建、由用户主导的Arch软件仓库。AUR中的<br>软件包以软件包生成脚本（PKGBUILD）的形式提供，用户自己通过makepkg<br>生成包，再由pacman安装。创建AUR的初衷是方便用户维护和分享新软件包，<br>并由官方定期从中挑选软件包进入[community]仓库。<br>Yaourt是由社区编写的脚本，方便用户从AUR上获取需要的软件。以下介绍<br>Yaourt的安装和使用。</p>\n<p>1) 安装</p>\n<p>Yaourt并不在官方软件源中，除从AUR中安装，还可通过第三方软件源进行安装：</p>\n<p>添加软件源：</p>\n<p>将下列内容添加至 /etc/pacman.conf ：</p>\n<p>源1：</p>\n<pre><code>[archlinuxfr]\nSigLevel = Never\nServer = http://repo.archlinux.fr/$arch</code></pre><p>源2（Arch Linux CN 友情提供 :) ）：</p>\n<pre><code>[archlinuxcn]\nSigLevel = Never\nServer = http://repo.archlinuxcn.org/$arch</code></pre><p>安装：</p>\n<pre><code># pacman -Sy base-devel yaourt</code></pre><p>2) 使用</p>\n<p>Yaourt 可以安装来自官方源的软件：</p>\n<pre><code>$ yaourt &lt;软件名&gt;</code></pre><p>更新所有包（包括来自官方源的包）：</p>\n<pre><code>$ yaourt -Syua</code></pre><p>搜索：</p>\n<p>$ yaourt &lt;关键字&gt;</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Thu Jun 13 2019 11:26:00 GMT+0800 (CST)","title":"安装archlinux","path":"blog/2014-04-26-install-archlinux/","eyeCatchImage":null,"excerpt":null,"date":"2014-04-25T16:00:00.000Z","pv":0,"totalPV":0,"categories":"技术","tags":["archlinux"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"开始使用hexo生成blog","date":"2015-10-12T16:00:00.000Z","_content":"\nhello, hexo ！","source":"_posts/blog/blog-from-jekyll-to-hexo.md","raw":"---\ntitle: \"开始使用hexo生成blog\"\ntags: [\"Hexo\"]\ncategories: 教程\ndate: 2015-10-13\n---\n\nhello, hexo ！","slug":"blog/blog-from-jekyll-to-hexo","published":1,"updated":"2019-06-13T03:26:00.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwu44hnf000kfvujivtt1djz","content":"<p>hello, hexo ！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>hello, hexo ！</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Thu Jun 13 2019 11:26:00 GMT+0800 (CST)","title":"开始使用hexo生成blog","path":"blog/blog-from-jekyll-to-hexo/","eyeCatchImage":null,"excerpt":null,"date":"2015-10-12T16:00:00.000Z","pv":0,"totalPV":0,"categories":"教程","tags":["Hexo"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"关于sizeof","date":"2014-07-08T16:00:00.000Z","_content":" \n \n 前两天犯了一个愚蠢的错误，由于对sizeof理解的错误，导致代码出现了一个bug,具体代码逻辑如下：\n \n\n    char buf[512];\n    char *ptr;\n    int size;\n    \n    ptr = buf;\n    size = sizeof(ptr);\n    \n本来是计算buf的大小，但这样写其实只是得到 char指针类型的大小，错误的以为ptr指向buf时，用sizeof获取的也是buf的大小。通过了解，如果sizeof的操作数为指针时，不管指针指向什么类型，值都是指针类型的大小，32位系统为4.具体sizeof的结果如下：　 \n\n1、当操作数为数据类型时，所得结果为给数据类型的大小。如：32bit系统上，sizeof（char）＝ 1　，sizeof（int） ＝ 4。\n\n2、当操作数是指针时，sizeof依赖于编译器。例如Microsoft　C/C++7.0中，near\n类指针字节数为2，far、huge类指针字节数为4。一般Unix的指针字节数为4。　 \n\n3、当操作数具有数组类型时，其结果是数组的总字节数。　 \n\n4、联合类型操作数的sizeof是其最大字节成员的字节数。结构类型操作数的\nsizeof是这种类型对象的总字节数，包括任何垫补在内。　 \n    让我们看如下结构：　 \n　　struct　\n　　{\n　　    char　b;\n　　    double　x;\n　　}　a;　 \n　　在某些机器上sizeof（a）=12，而一般sizeof（char）+　sizeof（double）= 9。\n　　这是因为编译器在考虑对齐问题时，在结构中插入空位以控制各成员对象的地址对\n齐。如double类型的结构成员x要放在被4整除的地址。　 \n\n5、如果操作数是函数中的数组形参或函数类型的形参，sizeof给出其指针的大小。\n","source":"_posts/blog/2014-07-09-about-sizeof.md","raw":"---\ntitle: 关于sizeof\ndate: 2014-07-09\ncategories: 技术\ntags: [\"c语言\", \"内存\"]\n---\n \n \n 前两天犯了一个愚蠢的错误，由于对sizeof理解的错误，导致代码出现了一个bug,具体代码逻辑如下：\n \n\n    char buf[512];\n    char *ptr;\n    int size;\n    \n    ptr = buf;\n    size = sizeof(ptr);\n    \n本来是计算buf的大小，但这样写其实只是得到 char指针类型的大小，错误的以为ptr指向buf时，用sizeof获取的也是buf的大小。通过了解，如果sizeof的操作数为指针时，不管指针指向什么类型，值都是指针类型的大小，32位系统为4.具体sizeof的结果如下：　 \n\n1、当操作数为数据类型时，所得结果为给数据类型的大小。如：32bit系统上，sizeof（char）＝ 1　，sizeof（int） ＝ 4。\n\n2、当操作数是指针时，sizeof依赖于编译器。例如Microsoft　C/C++7.0中，near\n类指针字节数为2，far、huge类指针字节数为4。一般Unix的指针字节数为4。　 \n\n3、当操作数具有数组类型时，其结果是数组的总字节数。　 \n\n4、联合类型操作数的sizeof是其最大字节成员的字节数。结构类型操作数的\nsizeof是这种类型对象的总字节数，包括任何垫补在内。　 \n    让我们看如下结构：　 \n　　struct　\n　　{\n　　    char　b;\n　　    double　x;\n　　}　a;　 \n　　在某些机器上sizeof（a）=12，而一般sizeof（char）+　sizeof（double）= 9。\n　　这是因为编译器在考虑对齐问题时，在结构中插入空位以控制各成员对象的地址对\n齐。如double类型的结构成员x要放在被4整除的地址。　 \n\n5、如果操作数是函数中的数组形参或函数类型的形参，sizeof给出其指针的大小。\n","slug":"blog/2014-07-09-about-sizeof","published":1,"updated":"2019-06-13T03:26:00.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwu44hng000mfvujvo8z89xs","content":"<p> 前两天犯了一个愚蠢的错误，由于对sizeof理解的错误，导致代码出现了一个bug,具体代码逻辑如下：</p>\n<pre><code>char buf[512];\nchar *ptr;\nint size;\n\nptr = buf;\nsize = sizeof(ptr);</code></pre><p>本来是计算buf的大小，但这样写其实只是得到 char指针类型的大小，错误的以为ptr指向buf时，用sizeof获取的也是buf的大小。通过了解，如果sizeof的操作数为指针时，不管指针指向什么类型，值都是指针类型的大小，32位系统为4.具体sizeof的结果如下：　 </p>\n<p>1、当操作数为数据类型时，所得结果为给数据类型的大小。如：32bit系统上，sizeof（char）＝ 1　，sizeof（int） ＝ 4。</p>\n<p>2、当操作数是指针时，sizeof依赖于编译器。例如Microsoft　C/C++7.0中，near<br>类指针字节数为2，far、huge类指针字节数为4。一般Unix的指针字节数为4。　 </p>\n<p>3、当操作数具有数组类型时，其结果是数组的总字节数。　 </p>\n<p>4、联合类型操作数的sizeof是其最大字节成员的字节数。结构类型操作数的<br>sizeof是这种类型对象的总字节数，包括任何垫补在内。　<br>    让我们看如下结构：　<br>　　struct　<br>　　{<br>　　    char　b;<br>　　    double　x;<br>　　}　a;　<br>　　在某些机器上sizeof（a）=12，而一般sizeof（char）+　sizeof（double）= 9。<br>　　这是因为编译器在考虑对齐问题时，在结构中插入空位以控制各成员对象的地址对<br>齐。如double类型的结构成员x要放在被4整除的地址。　 </p>\n<p>5、如果操作数是函数中的数组形参或函数类型的形参，sizeof给出其指针的大小。</p>\n","site":{"data":{}},"excerpt":"","more":"<p> 前两天犯了一个愚蠢的错误，由于对sizeof理解的错误，导致代码出现了一个bug,具体代码逻辑如下：</p>\n<pre><code>char buf[512];\nchar *ptr;\nint size;\n\nptr = buf;\nsize = sizeof(ptr);</code></pre><p>本来是计算buf的大小，但这样写其实只是得到 char指针类型的大小，错误的以为ptr指向buf时，用sizeof获取的也是buf的大小。通过了解，如果sizeof的操作数为指针时，不管指针指向什么类型，值都是指针类型的大小，32位系统为4.具体sizeof的结果如下：　 </p>\n<p>1、当操作数为数据类型时，所得结果为给数据类型的大小。如：32bit系统上，sizeof（char）＝ 1　，sizeof（int） ＝ 4。</p>\n<p>2、当操作数是指针时，sizeof依赖于编译器。例如Microsoft　C/C++7.0中，near<br>类指针字节数为2，far、huge类指针字节数为4。一般Unix的指针字节数为4。　 </p>\n<p>3、当操作数具有数组类型时，其结果是数组的总字节数。　 </p>\n<p>4、联合类型操作数的sizeof是其最大字节成员的字节数。结构类型操作数的<br>sizeof是这种类型对象的总字节数，包括任何垫补在内。　<br>    让我们看如下结构：　<br>　　struct　<br>　　{<br>　　    char　b;<br>　　    double　x;<br>　　}　a;　<br>　　在某些机器上sizeof（a）=12，而一般sizeof（char）+　sizeof（double）= 9。<br>　　这是因为编译器在考虑对齐问题时，在结构中插入空位以控制各成员对象的地址对<br>齐。如double类型的结构成员x要放在被4整除的地址。　 </p>\n<p>5、如果操作数是函数中的数组形参或函数类型的形参，sizeof给出其指针的大小。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Thu Jun 13 2019 11:26:00 GMT+0800 (CST)","title":"关于sizeof","path":"blog/2014-07-09-about-sizeof/","eyeCatchImage":null,"excerpt":null,"date":"2014-07-08T16:00:00.000Z","pv":0,"totalPV":0,"categories":"技术","tags":["内存","c语言"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"工具","date":"2015-10-11T16:00:00.000Z","_content":"## 工具\n\n1. **jira**:项目与事务跟踪工具，被广泛应用于缺陷跟踪、客户服务、需求收集、流程审批、任务跟踪、项目跟踪和敏捷管理等工作领域.\n2. **confluence**:企业知识管理与协同软件，也可以用于构建企业wiki。\n3. **[GitLab](https://about.gitlab.com/)**:基于Git的开源项目，客用于搭建私有的Github。\n4. **[Riemann](http://riemann.io/)**:报警系统，函数式编程语言clojure编写，可配置性强，可以和OpenTSDB等时间序列存贮系统结合，构建企业报警系统。\n","source":"_posts/blog/2015-03-14-tools.md","raw":"---\ntitle: \"工具\"\ntags: [\"工具\"]\ncategories: 工具\ndate: 2015-10-12\n---\n## 工具\n\n1. **jira**:项目与事务跟踪工具，被广泛应用于缺陷跟踪、客户服务、需求收集、流程审批、任务跟踪、项目跟踪和敏捷管理等工作领域.\n2. **confluence**:企业知识管理与协同软件，也可以用于构建企业wiki。\n3. **[GitLab](https://about.gitlab.com/)**:基于Git的开源项目，客用于搭建私有的Github。\n4. **[Riemann](http://riemann.io/)**:报警系统，函数式编程语言clojure编写，可配置性强，可以和OpenTSDB等时间序列存贮系统结合，构建企业报警系统。\n","slug":"blog/2015-03-14-tools","published":1,"updated":"2019-06-13T03:26:00.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwu44hnh000qfvujpyoxggkr","content":"<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><ol>\n<li><strong>jira</strong>:项目与事务跟踪工具，被广泛应用于缺陷跟踪、客户服务、需求收集、流程审批、任务跟踪、项目跟踪和敏捷管理等工作领域.</li>\n<li><strong>confluence</strong>:企业知识管理与协同软件，也可以用于构建企业wiki。</li>\n<li><strong><a href=\"https://about.gitlab.com/\" target=\"_blank\" rel=\"noopener\">GitLab</a></strong>:基于Git的开源项目，客用于搭建私有的Github。</li>\n<li><strong><a href=\"http://riemann.io/\" target=\"_blank\" rel=\"noopener\">Riemann</a></strong>:报警系统，函数式编程语言clojure编写，可配置性强，可以和OpenTSDB等时间序列存贮系统结合，构建企业报警系统。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><ol>\n<li><strong>jira</strong>:项目与事务跟踪工具，被广泛应用于缺陷跟踪、客户服务、需求收集、流程审批、任务跟踪、项目跟踪和敏捷管理等工作领域.</li>\n<li><strong>confluence</strong>:企业知识管理与协同软件，也可以用于构建企业wiki。</li>\n<li><strong><a href=\"https://about.gitlab.com/\" target=\"_blank\" rel=\"noopener\">GitLab</a></strong>:基于Git的开源项目，客用于搭建私有的Github。</li>\n<li><strong><a href=\"http://riemann.io/\" target=\"_blank\" rel=\"noopener\">Riemann</a></strong>:报警系统，函数式编程语言clojure编写，可配置性强，可以和OpenTSDB等时间序列存贮系统结合，构建企业报警系统。</li>\n</ol>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Thu Jun 13 2019 11:26:00 GMT+0800 (CST)","title":"工具","path":"blog/2015-03-14-tools/","eyeCatchImage":null,"excerpt":null,"date":"2015-10-11T16:00:00.000Z","pv":0,"totalPV":0,"categories":"工具","tags":["工具"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"一个iOS View crash问题","date":"2015-10-14T16:00:00.000Z","_content":"[2015-10-15]\t\n用xib做了一个简单的界面，程序启动时会crash掉，xcode error打印信息：\t\n>Terminating app due to uncaught exception 'UIViewControllerHierarchyInconsistency', reason: 'A view can only be associated with at most one view controller at a time! View <UIView: 0x7f914af22610; frame = (0 0; 414 736); autoresize = W+H; layer = <CALayer: 0x7f914af22980>> is associated with <UIViewController: 0x7f914ae49a90>. Clear this association before associating this view with <TestViewController: 0x7f914ac7f680>.'\n","source":"_posts/blog/an-ios-view-crash-error.md","raw":"---\ntitle: \"一个iOS View crash问题\"\ndate: 2015-10-15\ncategories: 技术\ntags: [\"iOS\"]\n---\n[2015-10-15]\t\n用xib做了一个简单的界面，程序启动时会crash掉，xcode error打印信息：\t\n>Terminating app due to uncaught exception 'UIViewControllerHierarchyInconsistency', reason: 'A view can only be associated with at most one view controller at a time! View <UIView: 0x7f914af22610; frame = (0 0; 414 736); autoresize = W+H; layer = <CALayer: 0x7f914af22980>> is associated with <UIViewController: 0x7f914ae49a90>. Clear this association before associating this view with <TestViewController: 0x7f914ac7f680>.'\n","slug":"blog/an-ios-view-crash-error","published":1,"updated":"2019-06-13T03:26:00.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwu44hni000tfvujv9q2wj0s","content":"<p>[2015-10-15]<br>用xib做了一个简单的界面，程序启动时会crash掉，xcode error打印信息：    </p>\n<blockquote>\n<p>Terminating app due to uncaught exception ‘UIViewControllerHierarchyInconsistency’, reason: ‘A view can only be associated with at most one view controller at a time! View &lt;UIView: 0x7f914af22610; frame = (0 0; 414 736); autoresize = W+H; layer = &lt;CALayer: 0x7f914af22980&gt;&gt; is associated with &lt;UIViewController: 0x7f914ae49a90&gt;. Clear this association before associating this view with &lt;TestViewController: 0x7f914ac7f680&gt;.’</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>[2015-10-15]<br>用xib做了一个简单的界面，程序启动时会crash掉，xcode error打印信息：    </p>\n<blockquote>\n<p>Terminating app due to uncaught exception ‘UIViewControllerHierarchyInconsistency’, reason: ‘A view can only be associated with at most one view controller at a time! View &lt;UIView: 0x7f914af22610; frame = (0 0; 414 736); autoresize = W+H; layer = &lt;CALayer: 0x7f914af22980&gt;&gt; is associated with &lt;UIViewController: 0x7f914ae49a90&gt;. Clear this association before associating this view with &lt;TestViewController: 0x7f914ac7f680&gt;.’</p>\n</blockquote>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Thu Jun 13 2019 11:26:00 GMT+0800 (CST)","title":"一个iOS View crash问题","path":"blog/an-ios-view-crash-error/","eyeCatchImage":null,"excerpt":null,"date":"2015-10-14T16:00:00.000Z","pv":0,"totalPV":0,"categories":"技术","tags":["iOS"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Xcode-keyboard-shortcuts","date":"2016-03-09T16:00:00.000Z","_content":"\n**Xcode提供很多快捷键，我们不可能都记住，但平时的开发中如果能尽可能多的使用快捷键，效率会提高不少，下面总结了Xcode的一些常用快捷键：**\n\n|快捷键\t|功能|\t星级|\n-|-|-\ncommand + shift + O|\t打开搜索窗口|\t＊＊＊＊＊\ncommand + 0\t|显示／隐藏导航区|\t＊＊＊＊＊\ncommand + 1~n\t|选择不同的导航器\t|＊＊＊＊\ncommand + option + J|\t过滤导航结果|\t＊＊＊\ncommand + shift + Y|\t显示／隐藏调试区|\t＊＊＊＊\ncommand + option + 0|\t显示／隐藏实用工具区选项卡|\t＊＊＊\ncommand + option + 1~n|\t切换使用工具区选项卡|\t＊＊＊\ncontrol + 6|\t方法跳转菜单|\t＊＊＊＊\ncontrol + command + Up／Down|\t对应文件导航\t|＊＊＊＊\ncontrol + command + Left／Right\t|查看历史文件|＊＊＊＊＊\ncontrol + command + E\t|重构符\t|＊＊＊＊＊\ncontrol + command + J\t|查看符号来源|\t＊＊＊\ncommand + shift + ]／[|\t移动到上一个／下一个标签|\t＊＊＊＊＊\ncommand + option + ]／［\t|整行代码上／下移动\t|＊＊＊\ncommand + R\t|运行应用\t|＊＊＊＊＊\ncommand + B\t|构建应用\t|＊＊＊＊＊\ncontrol + .\t|停止运行的应用|\t＊＊＊＊＊\ncontrol + i\t|格式化应用\t|＊＊＊","source":"_posts/blog/Xcode-keyboard-shortcuts.md","raw":"---\ntitle: \"Xcode-keyboard-shortcuts\"\ndate: 2016-03-10\ntags: [\"Xcode\"]\n---\n\n**Xcode提供很多快捷键，我们不可能都记住，但平时的开发中如果能尽可能多的使用快捷键，效率会提高不少，下面总结了Xcode的一些常用快捷键：**\n\n|快捷键\t|功能|\t星级|\n-|-|-\ncommand + shift + O|\t打开搜索窗口|\t＊＊＊＊＊\ncommand + 0\t|显示／隐藏导航区|\t＊＊＊＊＊\ncommand + 1~n\t|选择不同的导航器\t|＊＊＊＊\ncommand + option + J|\t过滤导航结果|\t＊＊＊\ncommand + shift + Y|\t显示／隐藏调试区|\t＊＊＊＊\ncommand + option + 0|\t显示／隐藏实用工具区选项卡|\t＊＊＊\ncommand + option + 1~n|\t切换使用工具区选项卡|\t＊＊＊\ncontrol + 6|\t方法跳转菜单|\t＊＊＊＊\ncontrol + command + Up／Down|\t对应文件导航\t|＊＊＊＊\ncontrol + command + Left／Right\t|查看历史文件|＊＊＊＊＊\ncontrol + command + E\t|重构符\t|＊＊＊＊＊\ncontrol + command + J\t|查看符号来源|\t＊＊＊\ncommand + shift + ]／[|\t移动到上一个／下一个标签|\t＊＊＊＊＊\ncommand + option + ]／［\t|整行代码上／下移动\t|＊＊＊\ncommand + R\t|运行应用\t|＊＊＊＊＊\ncommand + B\t|构建应用\t|＊＊＊＊＊\ncontrol + .\t|停止运行的应用|\t＊＊＊＊＊\ncontrol + i\t|格式化应用\t|＊＊＊","slug":"blog/Xcode-keyboard-shortcuts","published":1,"updated":"2019-06-13T03:26:00.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwu44hni000yfvujqd97r4ak","content":"<p><strong>Xcode提供很多快捷键，我们不可能都记住，但平时的开发中如果能尽可能多的使用快捷键，效率会提高不少，下面总结了Xcode的一些常用快捷键：</strong></p>\n<table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>功能</th>\n<th>星级</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>command + shift + O</td>\n<td>打开搜索窗口</td>\n<td>＊＊＊＊＊</td>\n</tr>\n<tr>\n<td>command + 0</td>\n<td>显示／隐藏导航区</td>\n<td>＊＊＊＊＊</td>\n</tr>\n<tr>\n<td>command + 1~n</td>\n<td>选择不同的导航器</td>\n<td>＊＊＊＊</td>\n</tr>\n<tr>\n<td>command + option + J</td>\n<td>过滤导航结果</td>\n<td>＊＊＊</td>\n</tr>\n<tr>\n<td>command + shift + Y</td>\n<td>显示／隐藏调试区</td>\n<td>＊＊＊＊</td>\n</tr>\n<tr>\n<td>command + option + 0</td>\n<td>显示／隐藏实用工具区选项卡</td>\n<td>＊＊＊</td>\n</tr>\n<tr>\n<td>command + option + 1~n</td>\n<td>切换使用工具区选项卡</td>\n<td>＊＊＊</td>\n</tr>\n<tr>\n<td>control + 6</td>\n<td>方法跳转菜单</td>\n<td>＊＊＊＊</td>\n</tr>\n<tr>\n<td>control + command + Up／Down</td>\n<td>对应文件导航</td>\n<td>＊＊＊＊</td>\n</tr>\n<tr>\n<td>control + command + Left／Right</td>\n<td>查看历史文件</td>\n<td>＊＊＊＊＊</td>\n</tr>\n<tr>\n<td>control + command + E</td>\n<td>重构符</td>\n<td>＊＊＊＊＊</td>\n</tr>\n<tr>\n<td>control + command + J</td>\n<td>查看符号来源</td>\n<td>＊＊＊</td>\n</tr>\n<tr>\n<td>command + shift + ]／[</td>\n<td>移动到上一个／下一个标签</td>\n<td>＊＊＊＊＊</td>\n</tr>\n<tr>\n<td>command + option + ]／［</td>\n<td>整行代码上／下移动</td>\n<td>＊＊＊</td>\n</tr>\n<tr>\n<td>command + R</td>\n<td>运行应用</td>\n<td>＊＊＊＊＊</td>\n</tr>\n<tr>\n<td>command + B</td>\n<td>构建应用</td>\n<td>＊＊＊＊＊</td>\n</tr>\n<tr>\n<td>control + .</td>\n<td>停止运行的应用</td>\n<td>＊＊＊＊＊</td>\n</tr>\n<tr>\n<td>control + i</td>\n<td>格式化应用</td>\n<td>＊＊＊</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>Xcode提供很多快捷键，我们不可能都记住，但平时的开发中如果能尽可能多的使用快捷键，效率会提高不少，下面总结了Xcode的一些常用快捷键：</strong></p>\n<table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>功能</th>\n<th>星级</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>command + shift + O</td>\n<td>打开搜索窗口</td>\n<td>＊＊＊＊＊</td>\n</tr>\n<tr>\n<td>command + 0</td>\n<td>显示／隐藏导航区</td>\n<td>＊＊＊＊＊</td>\n</tr>\n<tr>\n<td>command + 1~n</td>\n<td>选择不同的导航器</td>\n<td>＊＊＊＊</td>\n</tr>\n<tr>\n<td>command + option + J</td>\n<td>过滤导航结果</td>\n<td>＊＊＊</td>\n</tr>\n<tr>\n<td>command + shift + Y</td>\n<td>显示／隐藏调试区</td>\n<td>＊＊＊＊</td>\n</tr>\n<tr>\n<td>command + option + 0</td>\n<td>显示／隐藏实用工具区选项卡</td>\n<td>＊＊＊</td>\n</tr>\n<tr>\n<td>command + option + 1~n</td>\n<td>切换使用工具区选项卡</td>\n<td>＊＊＊</td>\n</tr>\n<tr>\n<td>control + 6</td>\n<td>方法跳转菜单</td>\n<td>＊＊＊＊</td>\n</tr>\n<tr>\n<td>control + command + Up／Down</td>\n<td>对应文件导航</td>\n<td>＊＊＊＊</td>\n</tr>\n<tr>\n<td>control + command + Left／Right</td>\n<td>查看历史文件</td>\n<td>＊＊＊＊＊</td>\n</tr>\n<tr>\n<td>control + command + E</td>\n<td>重构符</td>\n<td>＊＊＊＊＊</td>\n</tr>\n<tr>\n<td>control + command + J</td>\n<td>查看符号来源</td>\n<td>＊＊＊</td>\n</tr>\n<tr>\n<td>command + shift + ]／[</td>\n<td>移动到上一个／下一个标签</td>\n<td>＊＊＊＊＊</td>\n</tr>\n<tr>\n<td>command + option + ]／［</td>\n<td>整行代码上／下移动</td>\n<td>＊＊＊</td>\n</tr>\n<tr>\n<td>command + R</td>\n<td>运行应用</td>\n<td>＊＊＊＊＊</td>\n</tr>\n<tr>\n<td>command + B</td>\n<td>构建应用</td>\n<td>＊＊＊＊＊</td>\n</tr>\n<tr>\n<td>control + .</td>\n<td>停止运行的应用</td>\n<td>＊＊＊＊＊</td>\n</tr>\n<tr>\n<td>control + i</td>\n<td>格式化应用</td>\n<td>＊＊＊</td>\n</tr>\n</tbody></table>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Thu Jun 13 2019 11:26:00 GMT+0800 (CST)","title":"Xcode-keyboard-shortcuts","path":"blog/Xcode-keyboard-shortcuts/","eyeCatchImage":null,"excerpt":null,"date":"2016-03-09T16:00:00.000Z","pv":0,"totalPV":0,"categories":"","tags":["Xcode"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"统一账户管理系统RESTful api设计","date":"2015-04-09T16:00:00.000Z","_content":"\n\n***LDAPAdmin***, 为用户管理提供一组API，以HTTP-based RESTful API的形式提供服务，提供了对ldap数据的增删改查功能。主要用到了HTTP的四种方法：GET， POST， PUT和 DELETE。\n \n下面主要对LDAPAdmin 的REST Api做个简单介绍：\n \n##Functionality\n###Terminology\n###User stories\n* 利用该组件的HTTP API，通过提交一组描述 用户／部门／系统／管理员的JSON数据，添加、删除、更新、查询数据；\n* 利用该组件的HTTP API，可以方便的添加一条 用户／部门／系统／管理员记录；\n* 利用该组件的HTTP API，可以方便的更新一条指定的 用户／部门／系统／管理员记录；\n* 利用该组件的HTTP API，可以方便的将指定的 用户／部门／系统／管理员删除；\n\n###Scope and Non-Scope\n####Scope\n* 用户／部门／系统／管理员 信息相关数据的添加、更新、删除；\n* 查询 用户／部门／系统／管理员的信息；\n* 用户／部门／系统／管理员 的有效性；\n\n###Non-Scope\n* 用户数据的可靠性，数据由管理员负责维护\n\n \n##Low-level Design\n###Response Code\n\n\nCode|Remind|Description\n:--------------|:------------------|:-------------\n200\t|OK – [GET]|成功返回用户请求的数据\n201\t|CREATED – [POST/PUT]|\t新建/修改数据成功\n204\t|NO CONTENT – [DELETE]|\t删除数据成功\n400\t|INVALID REQUEST – [POST/PUT|用户发出请求有误，服务器没有新建/修改数据\n401\t|Unauthorized – [*]\t|token认证失败，token过期等情况\n403\t|Forbidden – [*]\t|用户认证成功，但没有权限进行相应操作（权限细分）\n404\t|NOT FOUND – [*]\t|请求的资源（在这里是表、字段不存在等情况）\n406\t|NOT Acceptable – [GET]|\t用户请求的格式不可得\n500\t|INTERNAL SERVER ERROR – [*]\t|服务器内部错误，用户无法判断请求是否成功\n \n###Response| Result\n#####除了每个响应都携带的返回码和可选的description字段，以下为该API的返回结果（具体形式在每种请求中都有举例）：\n\nMethod|Description\n:------------|:-------------\nGET\t|返回被查询对象的列表，或为空（查询结果为空）\nPOST|\t返回是否插入成功（1为成功，0为失败）\nPUT\t|返回被修改的行数\nDELETE|\t返回被删除的行数\n \n###Http methods table\n####1.用户\nHTTP Method|URI|Description\n:---------------|:--------------|:-------------\nGET\t|/v1/user\t|获取所有用户记录\nGET\t|/v1/user/:id\t|根据id获取记录\nPOST|\t/v1/user\t|添加用户记录\nPUT\t|/v1/user/:id\t|修改某个用户记录\nDELETE|\t/v1/user/:id\t|删除某个用户记录\n \n####2. 部门\nHTTP Method|URI|Description\n:-------------------|:--------------|:-------------\nGET\t| /v1/department\t|获取所有部门记录\nGET\t| /v1/department/:id\t|根据id获取部门记录\nGET\t| /v1/department/:id?type=subtree\t|根据id获取该部门下所有的用户和子部门记录\nPOST|\t/v1/department\t|添加部门记录\nPUT\t| /v1/department/:id\t|修改某个部门记录\nDELETE|\t/v1/department/:id\t|删除某个部门记录\n \n####3. 系统\nHTTP Method|URI|Description\n:---------------|:--------------|:-------------\nGET\t|/v1/system\t|获取所有组记录\nGET\t|/v1/system/:id\t|根据id获取记录\nPOST|\t/v1/system\t|添加组记录\nPUT\t|/v1/system/:id\t|修改某个组记录\nDELETE|\t/v1/system/:id\t|删除某个组记录\n \n####4. 管理员\nHTTP Method|URI|Description\n:---------------|:--------------|:-------------\nGET\t| /v1/admin\t|获取所有管理员记录\nGET\t| /v1/admin/:id\t|根据id获取记录\nPOST|\t/v1/admin\t|添加管理员记录\nPUT\t| /v1/admin/:id\t|修改某个管理员记录\nDELETE|\t/v1/admin/:id|\t删除某个管理员记录\n \n###Record infomations\n####1.用户\nResponse\n\n```\n{\n    \"Id\": ${id},                  //用户ID\n    \"UserName\": ${user name},     //用户名\n    \"Password\": ${password},      //密码\n    \"Department\": ${department},  //所属部门\n    \"Mail\": ${mail},              //邮件\n    \"Telephone\": ${telephone},    //电话\n}\n```\n\n####2.部门\nResponse\n\n```\n{\n    \"Id\": ${id},                  //部门ID\n    \"Name\": ${name},              //部门名\n    \"Parent\", ${parent}           //上级部门   \n}\n```\n\n####3.系统\nResponse\n\n```\n{\n    \"Id\": ${id},                  //组ID\n    \"Name\": ${name},              //组名\n    \"Member\", ${member}           //成员\n}\n```\n\n####4. 管理员\nResponse\n\n```\n{\n    \"Id\": ${id},                  //管理员ID\n    \"Name\": ${name},              //名字\n    \"Password\", ${password}       //密码   \n}\n```\n\n###RESTful API\n####1. 用户\n* GET /v1/user\n\n此API用于查询所有 用户记录\n\n```\nRequest:\nGET / HTTP/1.1\nResponse:\nHTTP/1.1 200 OK\nContent-Type: application/json\n \n{\n   \n}\n```\nExample\n下面的示例将查询用户信息\n\n```\nRequest\nGET /v1/user HTTP/1.1\nResponse\nHTTP/1.1 200 OK\nContent-Type: application/json\n \n[\n  {\n  },\n  {\n  },\n  ......\n]\n```\n\n* GET /v1/user/:id\n此API用于查询指定的用户记录\n\n```\nRequest\nGET /v1/user/:id HTTP/1.1\nResponse\nHTTP/1.1 200 OK\nContent-Type: application/json\n \n{\n    \n}\n```\n\nExample\n下面的示例将查询id为1的用户录\n\n```\nRequest\nGET /v1/user/1 HTTP/1.1\nResponse\nHTTP/1.1 200 OK\nContent-Type: application/json\n \n{\n    \"code\": 0,\n    \"rows\": 1,\n    \"result\": [{\"id\": \"1\", \"name\": \"xxxx\", \"password\": \"xxxx\", \"department\":[1, 2], \n    \"mail\":\"xxx@xywy.com\", \"telephone\":\"15212233445\"}]\n}\n``` \n \n* POST /v1/user\n此API用于新增 用户记录记录\n\n```\nRequest\nPOST /v1/user HTTP/1.1\nContent-Type: application/json\n \n{\n    ${Record informations}\n}\n\nResponse\nHTTP/1.1 201 CREATED\nContent-Type: application/json\n \n{\n    \"code\":${code},   //type is int\n    \"id\": ${id}       //type is string, specifing the id inserted, which can be used in querying through the id    \n}\n```\n\nExample\n下面的示例将插入 用户记录\n\n```\nRequest\nPOST /v1/user HTTP/1.1\nContent-Type: application/json\n \n{\n    ${Record informations}\n}\nResponse\nHTTP/1.1 201 CREATED\nContent-Type: application/json\n \n{\n    \"code\": 0,\n    \"id\": 1\n}\n```\n \n \n* PUT /v1/user/:id\n此API用于修改用户记录\n\n```\nRequest\nPOST /v1/user/:id HTTP/1.1\nContent-Type: application/json\n \n{\n \n}\nResponse\nHTTP/1.1 201 CREATED\nContent-Type: application/json\n \n{\n    \"code\":0,\n    \"rows\": ${line}       //type is int\n}\n```\nExample\n下面的示例将修改用户信息\n\n```\nRequest\nPUT /v1/user/1 HTTP/1.1\nContent-Type: application/json\n \n{\n \n}\nResponse\nHTTP/1.1 201 UPDATED\nContent-Type: application/json\n \n{\n    \"code\": 0,\n    \"rows\"：3\n}\n```\n\n* DELETE /v1/user/:id\n此API用于删除用户记录\n\n```\nRequest\nDELETE /v1/user/:id\n{\n     \n}\nResponse\nHTTP/1.1 204 NO CONTENT\nContent-Type: application/json\n```\nExample\n下面的示例将删除用户记录\n\n```\nRequest\nDELETE  /v1/user/1 HTTP/1.1\n{\n}\nResponse\nHTTP/1.1 204 NO CONTENT\n```\n \n2. 部门\n \n* GET /v1/department \n此API用于查询所有部门记录\n\n```\nRequest\nGET /v1/department HTTP/1.1\nResponse\nHTTP/1.1 200 OK\nContent-Type: application/json\n \n{\n   ${Record informentions}\n}\n```\nExample\n下面的示例将查询部门信息\n\n```\nRequest\nGET /v1/department HTTP/1.1\nResponse\nHTTP/1.1 200 OK\nContent-Type: application/json\n \n[\n  {\n \n  },\n  {\n  },\n  ......\n]\n```\n \n* GET /v1/department/:id\n此API用于查询指定的部门记录\n\n```\nRequest\nGET /v1/department/:id HTTP/1.1\nResponse\nHTTP/1.1 200 OK\nContent-Type: application/json\n \n{\n    \n}\n```\n\nExample\n下面的示例将查询id为1的部门记录\n\n```\nRequest\nGET /v1/department/1 HTTP/1.1\nResponse\nHTTP/1.1 200 OK\nContent-Type: application/json\n \n{\n    \"code\": 0,\n    \"rows\": 1,\n    \"result\": [{\"id\": \"1\", \"name\": \"zonghezhikongzhongxin\", \"parent\": \"\"]\n}\n``` \n \n* GET /v1/department/:id?type=subtree\n此API用于查询指定的部门的所有子用户和子部门记录（树形结构）\n\n```\nRequest\nGET /v1/department/:id?type=subtree HTTP/1.1\nResponse\nHTTP/1.1 200 OK\nContent-Type: application/json\n \n{\n    \n}\n```\n\nExample\n下面的示例将查询id为1的部门的详细信息（包括子部门和用户）记录\n\n```\nRequest\nGET /v1/department/1?type=subtree HTTP/1.1\n\nResponse\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n    \"code\": 0,\n    \"rows\": 1,\n    \"result\": {\n                \"user\":[\n                        {\"id\": 1, \"name\": \"xxxx\", \"department\":[1], \"mail\":\"xxxx@xywy.com\", \"telephone\":\"xxxxx\"}, \n                        {\"id\": 2, \"name\": \"xxxxx\",\"department\":[1, 2], \"mail\":\"xxxxx@xywy.com\", \"telephone\":\"xxxxx\"},\n                        ......\n                       ]\n               \"department\":[\n                              {\"id\": 1 \"name\":\"sa\",   \"parent\":1},\n                              { \" id\": 1, \"name\" : \"anquan\", \"parent\" : 1 }\n                                ......\n                            ]\n             }\n \n ```\n \n* POST /v1/department\n此API用于新增 部门记录\n\n```\nRequest\nPOST /v1/department HTTP/1.1\nContent-Type: application/json\n \n{\n    ${Record informations}\n}\n\nResponse\nHTTP/1.1 201 CREATED\nContent-Type: application/json\n \n{\n    \"code\":${code},   //type is int\n    \"id\": ${id}       //type is string, specifing the id inserted, which can be used in querying through the id    \n}\n```\n\nExample\n下面的示例将插入部门记录\n\n```\nRequest\nPOST /v1/department HTTP/1.1\nContent-Type: application/json\n \n{\n    ${Record informations}\n}\n\nResponse\nHTTP/1.1 201 CREATED\nContent-Type: application/json\n \n{\n    \"code\": 0,\n    \"id\": 1\n}\n``` \n \n* PUT /v1/department/:id\n此API用于修改部门记录\n\n```\nRequest\nPOST /v1/department/:id HTTP/1.1\nContent-Type: application/json\n \n{\n \n}\nResponse\nHTTP/1.1 201 CREATED\nContent-Type: application/json\n \n{\n    \"code\":0,\n    \"rows\": ${line}       //type is int\n}\n```\n\nExample\n下面的示例将修改ID为1的部门信息\n\n```\nRequest\nPUT /v1/department/1 HTTP/1.1\nContent-Type: application/json\n \n{\n \n}\n\nResponse\nHTTP/1.1 201 UPDATED\nContent-Type: application/json\n \n{\n    \"code\": 0,\n    \"rows\"：3\n}\n```\n \n* DELETE /v1/department/:id\n此API用于删除部门记录\n\n```\nRequest\nDELETE /v1/department/:id\n{\n     \n}\n\nResponse\nHTTP/1.1 204 NO CONTENT\nContent-Type: application/json\n```\n\nExample\n下面的示例将删除部门记录\n\n```\nRequest\nDELETE  /v1/department/1 HTTP/1.1\n{\n}\n\nResponse\nHTTP/1.1 204 NO CONTENT\n```\n \n###3. 系统／管理员 与 用户Api很类似，只是URI稍有不同\n####系统： /v1/system\n####管理员： /v1/admin\n返回记录信息在 Record informations中有说明。\n \n","source":"_posts/blog/2015-04-10-ldapadmin-design.md","raw":"---\ntitle: \"统一账户管理系统RESTful api设计\"\ndate: 2015-04-10\ncategories: 技术\ntags: [\"RESTFul API\"]\n---\n\n\n***LDAPAdmin***, 为用户管理提供一组API，以HTTP-based RESTful API的形式提供服务，提供了对ldap数据的增删改查功能。主要用到了HTTP的四种方法：GET， POST， PUT和 DELETE。\n \n下面主要对LDAPAdmin 的REST Api做个简单介绍：\n \n##Functionality\n###Terminology\n###User stories\n* 利用该组件的HTTP API，通过提交一组描述 用户／部门／系统／管理员的JSON数据，添加、删除、更新、查询数据；\n* 利用该组件的HTTP API，可以方便的添加一条 用户／部门／系统／管理员记录；\n* 利用该组件的HTTP API，可以方便的更新一条指定的 用户／部门／系统／管理员记录；\n* 利用该组件的HTTP API，可以方便的将指定的 用户／部门／系统／管理员删除；\n\n###Scope and Non-Scope\n####Scope\n* 用户／部门／系统／管理员 信息相关数据的添加、更新、删除；\n* 查询 用户／部门／系统／管理员的信息；\n* 用户／部门／系统／管理员 的有效性；\n\n###Non-Scope\n* 用户数据的可靠性，数据由管理员负责维护\n\n \n##Low-level Design\n###Response Code\n\n\nCode|Remind|Description\n:--------------|:------------------|:-------------\n200\t|OK – [GET]|成功返回用户请求的数据\n201\t|CREATED – [POST/PUT]|\t新建/修改数据成功\n204\t|NO CONTENT – [DELETE]|\t删除数据成功\n400\t|INVALID REQUEST – [POST/PUT|用户发出请求有误，服务器没有新建/修改数据\n401\t|Unauthorized – [*]\t|token认证失败，token过期等情况\n403\t|Forbidden – [*]\t|用户认证成功，但没有权限进行相应操作（权限细分）\n404\t|NOT FOUND – [*]\t|请求的资源（在这里是表、字段不存在等情况）\n406\t|NOT Acceptable – [GET]|\t用户请求的格式不可得\n500\t|INTERNAL SERVER ERROR – [*]\t|服务器内部错误，用户无法判断请求是否成功\n \n###Response| Result\n#####除了每个响应都携带的返回码和可选的description字段，以下为该API的返回结果（具体形式在每种请求中都有举例）：\n\nMethod|Description\n:------------|:-------------\nGET\t|返回被查询对象的列表，或为空（查询结果为空）\nPOST|\t返回是否插入成功（1为成功，0为失败）\nPUT\t|返回被修改的行数\nDELETE|\t返回被删除的行数\n \n###Http methods table\n####1.用户\nHTTP Method|URI|Description\n:---------------|:--------------|:-------------\nGET\t|/v1/user\t|获取所有用户记录\nGET\t|/v1/user/:id\t|根据id获取记录\nPOST|\t/v1/user\t|添加用户记录\nPUT\t|/v1/user/:id\t|修改某个用户记录\nDELETE|\t/v1/user/:id\t|删除某个用户记录\n \n####2. 部门\nHTTP Method|URI|Description\n:-------------------|:--------------|:-------------\nGET\t| /v1/department\t|获取所有部门记录\nGET\t| /v1/department/:id\t|根据id获取部门记录\nGET\t| /v1/department/:id?type=subtree\t|根据id获取该部门下所有的用户和子部门记录\nPOST|\t/v1/department\t|添加部门记录\nPUT\t| /v1/department/:id\t|修改某个部门记录\nDELETE|\t/v1/department/:id\t|删除某个部门记录\n \n####3. 系统\nHTTP Method|URI|Description\n:---------------|:--------------|:-------------\nGET\t|/v1/system\t|获取所有组记录\nGET\t|/v1/system/:id\t|根据id获取记录\nPOST|\t/v1/system\t|添加组记录\nPUT\t|/v1/system/:id\t|修改某个组记录\nDELETE|\t/v1/system/:id\t|删除某个组记录\n \n####4. 管理员\nHTTP Method|URI|Description\n:---------------|:--------------|:-------------\nGET\t| /v1/admin\t|获取所有管理员记录\nGET\t| /v1/admin/:id\t|根据id获取记录\nPOST|\t/v1/admin\t|添加管理员记录\nPUT\t| /v1/admin/:id\t|修改某个管理员记录\nDELETE|\t/v1/admin/:id|\t删除某个管理员记录\n \n###Record infomations\n####1.用户\nResponse\n\n```\n{\n    \"Id\": ${id},                  //用户ID\n    \"UserName\": ${user name},     //用户名\n    \"Password\": ${password},      //密码\n    \"Department\": ${department},  //所属部门\n    \"Mail\": ${mail},              //邮件\n    \"Telephone\": ${telephone},    //电话\n}\n```\n\n####2.部门\nResponse\n\n```\n{\n    \"Id\": ${id},                  //部门ID\n    \"Name\": ${name},              //部门名\n    \"Parent\", ${parent}           //上级部门   \n}\n```\n\n####3.系统\nResponse\n\n```\n{\n    \"Id\": ${id},                  //组ID\n    \"Name\": ${name},              //组名\n    \"Member\", ${member}           //成员\n}\n```\n\n####4. 管理员\nResponse\n\n```\n{\n    \"Id\": ${id},                  //管理员ID\n    \"Name\": ${name},              //名字\n    \"Password\", ${password}       //密码   \n}\n```\n\n###RESTful API\n####1. 用户\n* GET /v1/user\n\n此API用于查询所有 用户记录\n\n```\nRequest:\nGET / HTTP/1.1\nResponse:\nHTTP/1.1 200 OK\nContent-Type: application/json\n \n{\n   \n}\n```\nExample\n下面的示例将查询用户信息\n\n```\nRequest\nGET /v1/user HTTP/1.1\nResponse\nHTTP/1.1 200 OK\nContent-Type: application/json\n \n[\n  {\n  },\n  {\n  },\n  ......\n]\n```\n\n* GET /v1/user/:id\n此API用于查询指定的用户记录\n\n```\nRequest\nGET /v1/user/:id HTTP/1.1\nResponse\nHTTP/1.1 200 OK\nContent-Type: application/json\n \n{\n    \n}\n```\n\nExample\n下面的示例将查询id为1的用户录\n\n```\nRequest\nGET /v1/user/1 HTTP/1.1\nResponse\nHTTP/1.1 200 OK\nContent-Type: application/json\n \n{\n    \"code\": 0,\n    \"rows\": 1,\n    \"result\": [{\"id\": \"1\", \"name\": \"xxxx\", \"password\": \"xxxx\", \"department\":[1, 2], \n    \"mail\":\"xxx@xywy.com\", \"telephone\":\"15212233445\"}]\n}\n``` \n \n* POST /v1/user\n此API用于新增 用户记录记录\n\n```\nRequest\nPOST /v1/user HTTP/1.1\nContent-Type: application/json\n \n{\n    ${Record informations}\n}\n\nResponse\nHTTP/1.1 201 CREATED\nContent-Type: application/json\n \n{\n    \"code\":${code},   //type is int\n    \"id\": ${id}       //type is string, specifing the id inserted, which can be used in querying through the id    \n}\n```\n\nExample\n下面的示例将插入 用户记录\n\n```\nRequest\nPOST /v1/user HTTP/1.1\nContent-Type: application/json\n \n{\n    ${Record informations}\n}\nResponse\nHTTP/1.1 201 CREATED\nContent-Type: application/json\n \n{\n    \"code\": 0,\n    \"id\": 1\n}\n```\n \n \n* PUT /v1/user/:id\n此API用于修改用户记录\n\n```\nRequest\nPOST /v1/user/:id HTTP/1.1\nContent-Type: application/json\n \n{\n \n}\nResponse\nHTTP/1.1 201 CREATED\nContent-Type: application/json\n \n{\n    \"code\":0,\n    \"rows\": ${line}       //type is int\n}\n```\nExample\n下面的示例将修改用户信息\n\n```\nRequest\nPUT /v1/user/1 HTTP/1.1\nContent-Type: application/json\n \n{\n \n}\nResponse\nHTTP/1.1 201 UPDATED\nContent-Type: application/json\n \n{\n    \"code\": 0,\n    \"rows\"：3\n}\n```\n\n* DELETE /v1/user/:id\n此API用于删除用户记录\n\n```\nRequest\nDELETE /v1/user/:id\n{\n     \n}\nResponse\nHTTP/1.1 204 NO CONTENT\nContent-Type: application/json\n```\nExample\n下面的示例将删除用户记录\n\n```\nRequest\nDELETE  /v1/user/1 HTTP/1.1\n{\n}\nResponse\nHTTP/1.1 204 NO CONTENT\n```\n \n2. 部门\n \n* GET /v1/department \n此API用于查询所有部门记录\n\n```\nRequest\nGET /v1/department HTTP/1.1\nResponse\nHTTP/1.1 200 OK\nContent-Type: application/json\n \n{\n   ${Record informentions}\n}\n```\nExample\n下面的示例将查询部门信息\n\n```\nRequest\nGET /v1/department HTTP/1.1\nResponse\nHTTP/1.1 200 OK\nContent-Type: application/json\n \n[\n  {\n \n  },\n  {\n  },\n  ......\n]\n```\n \n* GET /v1/department/:id\n此API用于查询指定的部门记录\n\n```\nRequest\nGET /v1/department/:id HTTP/1.1\nResponse\nHTTP/1.1 200 OK\nContent-Type: application/json\n \n{\n    \n}\n```\n\nExample\n下面的示例将查询id为1的部门记录\n\n```\nRequest\nGET /v1/department/1 HTTP/1.1\nResponse\nHTTP/1.1 200 OK\nContent-Type: application/json\n \n{\n    \"code\": 0,\n    \"rows\": 1,\n    \"result\": [{\"id\": \"1\", \"name\": \"zonghezhikongzhongxin\", \"parent\": \"\"]\n}\n``` \n \n* GET /v1/department/:id?type=subtree\n此API用于查询指定的部门的所有子用户和子部门记录（树形结构）\n\n```\nRequest\nGET /v1/department/:id?type=subtree HTTP/1.1\nResponse\nHTTP/1.1 200 OK\nContent-Type: application/json\n \n{\n    \n}\n```\n\nExample\n下面的示例将查询id为1的部门的详细信息（包括子部门和用户）记录\n\n```\nRequest\nGET /v1/department/1?type=subtree HTTP/1.1\n\nResponse\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n    \"code\": 0,\n    \"rows\": 1,\n    \"result\": {\n                \"user\":[\n                        {\"id\": 1, \"name\": \"xxxx\", \"department\":[1], \"mail\":\"xxxx@xywy.com\", \"telephone\":\"xxxxx\"}, \n                        {\"id\": 2, \"name\": \"xxxxx\",\"department\":[1, 2], \"mail\":\"xxxxx@xywy.com\", \"telephone\":\"xxxxx\"},\n                        ......\n                       ]\n               \"department\":[\n                              {\"id\": 1 \"name\":\"sa\",   \"parent\":1},\n                              { \" id\": 1, \"name\" : \"anquan\", \"parent\" : 1 }\n                                ......\n                            ]\n             }\n \n ```\n \n* POST /v1/department\n此API用于新增 部门记录\n\n```\nRequest\nPOST /v1/department HTTP/1.1\nContent-Type: application/json\n \n{\n    ${Record informations}\n}\n\nResponse\nHTTP/1.1 201 CREATED\nContent-Type: application/json\n \n{\n    \"code\":${code},   //type is int\n    \"id\": ${id}       //type is string, specifing the id inserted, which can be used in querying through the id    \n}\n```\n\nExample\n下面的示例将插入部门记录\n\n```\nRequest\nPOST /v1/department HTTP/1.1\nContent-Type: application/json\n \n{\n    ${Record informations}\n}\n\nResponse\nHTTP/1.1 201 CREATED\nContent-Type: application/json\n \n{\n    \"code\": 0,\n    \"id\": 1\n}\n``` \n \n* PUT /v1/department/:id\n此API用于修改部门记录\n\n```\nRequest\nPOST /v1/department/:id HTTP/1.1\nContent-Type: application/json\n \n{\n \n}\nResponse\nHTTP/1.1 201 CREATED\nContent-Type: application/json\n \n{\n    \"code\":0,\n    \"rows\": ${line}       //type is int\n}\n```\n\nExample\n下面的示例将修改ID为1的部门信息\n\n```\nRequest\nPUT /v1/department/1 HTTP/1.1\nContent-Type: application/json\n \n{\n \n}\n\nResponse\nHTTP/1.1 201 UPDATED\nContent-Type: application/json\n \n{\n    \"code\": 0,\n    \"rows\"：3\n}\n```\n \n* DELETE /v1/department/:id\n此API用于删除部门记录\n\n```\nRequest\nDELETE /v1/department/:id\n{\n     \n}\n\nResponse\nHTTP/1.1 204 NO CONTENT\nContent-Type: application/json\n```\n\nExample\n下面的示例将删除部门记录\n\n```\nRequest\nDELETE  /v1/department/1 HTTP/1.1\n{\n}\n\nResponse\nHTTP/1.1 204 NO CONTENT\n```\n \n###3. 系统／管理员 与 用户Api很类似，只是URI稍有不同\n####系统： /v1/system\n####管理员： /v1/admin\n返回记录信息在 Record informations中有说明。\n \n","slug":"blog/2015-04-10-ldapadmin-design","published":1,"updated":"2019-06-13T03:26:00.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwu44hnj0010fvujb2tiyhmw","content":"<p><strong><em>LDAPAdmin</em></strong>, 为用户管理提供一组API，以HTTP-based RESTful API的形式提供服务，提供了对ldap数据的增删改查功能。主要用到了HTTP的四种方法：GET， POST， PUT和 DELETE。</p>\n<p>下面主要对LDAPAdmin 的REST Api做个简单介绍：</p>\n<p>##Functionality</p>\n<p>###Terminology</p>\n<p>###User stories</p>\n<ul>\n<li>利用该组件的HTTP API，通过提交一组描述 用户／部门／系统／管理员的JSON数据，添加、删除、更新、查询数据；</li>\n<li>利用该组件的HTTP API，可以方便的添加一条 用户／部门／系统／管理员记录；</li>\n<li>利用该组件的HTTP API，可以方便的更新一条指定的 用户／部门／系统／管理员记录；</li>\n<li>利用该组件的HTTP API，可以方便的将指定的 用户／部门／系统／管理员删除；</li>\n</ul>\n<p>###Scope and Non-Scope</p>\n<p>####Scope</p>\n<ul>\n<li>用户／部门／系统／管理员 信息相关数据的添加、更新、删除；</li>\n<li>查询 用户／部门／系统／管理员的信息；</li>\n<li>用户／部门／系统／管理员 的有效性；</li>\n</ul>\n<p>###Non-Scope</p>\n<ul>\n<li>用户数据的可靠性，数据由管理员负责维护</li>\n</ul>\n<p>##Low-level Design</p>\n<p>###Response Code</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Code</th>\n<th align=\"left\">Remind</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">200</td>\n<td align=\"left\">OK – [GET]</td>\n<td align=\"left\">成功返回用户请求的数据</td>\n</tr>\n<tr>\n<td align=\"left\">201</td>\n<td align=\"left\">CREATED – [POST/PUT]</td>\n<td align=\"left\">新建/修改数据成功</td>\n</tr>\n<tr>\n<td align=\"left\">204</td>\n<td align=\"left\">NO CONTENT – [DELETE]</td>\n<td align=\"left\">删除数据成功</td>\n</tr>\n<tr>\n<td align=\"left\">400</td>\n<td align=\"left\">INVALID REQUEST – [POST/PUT</td>\n<td align=\"left\">用户发出请求有误，服务器没有新建/修改数据</td>\n</tr>\n<tr>\n<td align=\"left\">401</td>\n<td align=\"left\">Unauthorized – [*]</td>\n<td align=\"left\">token认证失败，token过期等情况</td>\n</tr>\n<tr>\n<td align=\"left\">403</td>\n<td align=\"left\">Forbidden – [*]</td>\n<td align=\"left\">用户认证成功，但没有权限进行相应操作（权限细分）</td>\n</tr>\n<tr>\n<td align=\"left\">404</td>\n<td align=\"left\">NOT FOUND – [*]</td>\n<td align=\"left\">请求的资源（在这里是表、字段不存在等情况）</td>\n</tr>\n<tr>\n<td align=\"left\">406</td>\n<td align=\"left\">NOT Acceptable – [GET]</td>\n<td align=\"left\">用户请求的格式不可得</td>\n</tr>\n<tr>\n<td align=\"left\">500</td>\n<td align=\"left\">INTERNAL SERVER ERROR – [*]</td>\n<td align=\"left\">服务器内部错误，用户无法判断请求是否成功</td>\n</tr>\n</tbody></table>\n<p>###Response| Result</p>\n<p>#####除了每个响应都携带的返回码和可选的description字段，以下为该API的返回结果（具体形式在每种请求中都有举例）：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Method</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">GET</td>\n<td align=\"left\">返回被查询对象的列表，或为空（查询结果为空）</td>\n</tr>\n<tr>\n<td align=\"left\">POST</td>\n<td align=\"left\">返回是否插入成功（1为成功，0为失败）</td>\n</tr>\n<tr>\n<td align=\"left\">PUT</td>\n<td align=\"left\">返回被修改的行数</td>\n</tr>\n<tr>\n<td align=\"left\">DELETE</td>\n<td align=\"left\">返回被删除的行数</td>\n</tr>\n</tbody></table>\n<p>###Http methods table</p>\n<p>####1.用户<br>HTTP Method|URI|Description<br>:—————|:————–|:————-<br>GET    |/v1/user    |获取所有用户记录<br>GET    |/v1/user/:id    |根据id获取记录<br>POST|    /v1/user    |添加用户记录<br>PUT    |/v1/user/:id    |修改某个用户记录<br>DELETE|    /v1/user/:id    |删除某个用户记录</p>\n<p>####2. 部门<br>HTTP Method|URI|Description<br>:——————-|:————–|:————-<br>GET    | /v1/department    |获取所有部门记录<br>GET    | /v1/department/:id    |根据id获取部门记录<br>GET    | /v1/department/:id?type=subtree    |根据id获取该部门下所有的用户和子部门记录<br>POST|    /v1/department    |添加部门记录<br>PUT    | /v1/department/:id    |修改某个部门记录<br>DELETE|    /v1/department/:id    |删除某个部门记录</p>\n<p>####3. 系统<br>HTTP Method|URI|Description<br>:—————|:————–|:————-<br>GET    |/v1/system    |获取所有组记录<br>GET    |/v1/system/:id    |根据id获取记录<br>POST|    /v1/system    |添加组记录<br>PUT    |/v1/system/:id    |修改某个组记录<br>DELETE|    /v1/system/:id    |删除某个组记录</p>\n<p>####4. 管理员<br>HTTP Method|URI|Description<br>:—————|:————–|:————-<br>GET    | /v1/admin    |获取所有管理员记录<br>GET    | /v1/admin/:id    |根据id获取记录<br>POST|    /v1/admin    |添加管理员记录<br>PUT    | /v1/admin/:id    |修改某个管理员记录<br>DELETE|    /v1/admin/:id|    删除某个管理员记录</p>\n<p>###Record infomations</p>\n<p>####1.用户<br>Response</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;Id&quot;: $&#123;id&#125;,                  //用户ID</span><br><span class=\"line\">    &quot;UserName&quot;: $&#123;user name&#125;,     //用户名</span><br><span class=\"line\">    &quot;Password&quot;: $&#123;password&#125;,      //密码</span><br><span class=\"line\">    &quot;Department&quot;: $&#123;department&#125;,  //所属部门</span><br><span class=\"line\">    &quot;Mail&quot;: $&#123;mail&#125;,              //邮件</span><br><span class=\"line\">    &quot;Telephone&quot;: $&#123;telephone&#125;,    //电话</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>####2.部门<br>Response</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;Id&quot;: $&#123;id&#125;,                  //部门ID</span><br><span class=\"line\">    &quot;Name&quot;: $&#123;name&#125;,              //部门名</span><br><span class=\"line\">    &quot;Parent&quot;, $&#123;parent&#125;           //上级部门   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>####3.系统<br>Response</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;Id&quot;: $&#123;id&#125;,                  //组ID</span><br><span class=\"line\">    &quot;Name&quot;: $&#123;name&#125;,              //组名</span><br><span class=\"line\">    &quot;Member&quot;, $&#123;member&#125;           //成员</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>####4. 管理员<br>Response</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;Id&quot;: $&#123;id&#125;,                  //管理员ID</span><br><span class=\"line\">    &quot;Name&quot;: $&#123;name&#125;,              //名字</span><br><span class=\"line\">    &quot;Password&quot;, $&#123;password&#125;       //密码   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>###RESTful API</p>\n<p>####1. 用户</p>\n<ul>\n<li>GET /v1/user</li>\n</ul>\n<p>此API用于查询所有 用户记录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Request:</span><br><span class=\"line\">GET / HTTP/1.1</span><br><span class=\"line\">Response:</span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Content-Type: application/json</span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Example<br>下面的示例将查询用户信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Request</span><br><span class=\"line\">GET /v1/user HTTP/1.1</span><br><span class=\"line\">Response</span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Content-Type: application/json</span><br><span class=\"line\"> </span><br><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ......</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>GET /v1/user/:id<br>此API用于查询指定的用户记录</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Request</span><br><span class=\"line\">GET /v1/user/:id HTTP/1.1</span><br><span class=\"line\">Response</span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Content-Type: application/json</span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Example<br>下面的示例将查询id为1的用户录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Request</span><br><span class=\"line\">GET /v1/user/1 HTTP/1.1</span><br><span class=\"line\">Response</span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Content-Type: application/json</span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;code&quot;: 0,</span><br><span class=\"line\">    &quot;rows&quot;: 1,</span><br><span class=\"line\">    &quot;result&quot;: [&#123;&quot;id&quot;: &quot;1&quot;, &quot;name&quot;: &quot;xxxx&quot;, &quot;password&quot;: &quot;xxxx&quot;, &quot;department&quot;:[1, 2], </span><br><span class=\"line\">    &quot;mail&quot;:&quot;xxx@xywy.com&quot;, &quot;telephone&quot;:&quot;15212233445&quot;&#125;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">``` </span><br><span class=\"line\"> </span><br><span class=\"line\">* POST /v1/user</span><br><span class=\"line\">此API用于新增 用户记录记录</span><br></pre></td></tr></table></figure>\n\n<p>Request<br>POST /v1/user HTTP/1.1<br>Content-Type: application/json</p>\n<p>{\n    ${Record informations}<br>}</p>\n<p>Response<br>HTTP/1.1 201 CREATED<br>Content-Type: application/json</p>\n<p>{\n    “code”:${code},   //type is int<br>    “id”: ${id}       //type is string, specifing the id inserted, which can be used in querying through the id<br>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Example</span><br><span class=\"line\">下面的示例将插入 用户记录</span><br></pre></td></tr></table></figure>\n\n<p>Request<br>POST /v1/user HTTP/1.1<br>Content-Type: application/json</p>\n<p>{\n    ${Record informations}<br>}\nResponse<br>HTTP/1.1 201 CREATED<br>Content-Type: application/json</p>\n<p>{\n    “code”: 0,<br>    “id”: 1<br>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">* PUT /v1/user/:id</span><br><span class=\"line\">此API用于修改用户记录</span><br></pre></td></tr></table></figure>\n\n<p>Request<br>POST /v1/user/:id HTTP/1.1<br>Content-Type: application/json</p>\n<p>{</p>\n<p>}\nResponse<br>HTTP/1.1 201 CREATED<br>Content-Type: application/json</p>\n<p>{\n    “code”:0,<br>    “rows”: ${line}       //type is int<br>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example</span><br><span class=\"line\">下面的示例将修改用户信息</span><br></pre></td></tr></table></figure>\n\n<p>Request<br>PUT /v1/user/1 HTTP/1.1<br>Content-Type: application/json</p>\n<p>{</p>\n<p>}\nResponse<br>HTTP/1.1 201 UPDATED<br>Content-Type: application/json</p>\n<p>{\n    “code”: 0,<br>    “rows”：3<br>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">* DELETE /v1/user/:id</span><br><span class=\"line\">此API用于删除用户记录</span><br></pre></td></tr></table></figure>\n\n<p>Request<br>DELETE /v1/user/:id<br>{</p>\n<p>}\nResponse<br>HTTP/1.1 204 NO CONTENT<br>Content-Type: application/json</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example</span><br><span class=\"line\">下面的示例将删除用户记录</span><br></pre></td></tr></table></figure>\n\n<p>Request<br>DELETE  /v1/user/1 HTTP/1.1<br>{\n}<br>Response<br>HTTP/1.1 204 NO CONTENT</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\">2. 部门</span><br><span class=\"line\"> </span><br><span class=\"line\">* GET /v1/department </span><br><span class=\"line\">此API用于查询所有部门记录</span><br></pre></td></tr></table></figure>\n\n<p>Request<br>GET /v1/department HTTP/1.1<br>Response<br>HTTP/1.1 200 OK<br>Content-Type: application/json</p>\n<p>{\n   ${Record informentions}<br>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example</span><br><span class=\"line\">下面的示例将查询部门信息</span><br></pre></td></tr></table></figure>\n\n<p>Request<br>GET /v1/department HTTP/1.1<br>Response<br>HTTP/1.1 200 OK<br>Content-Type: application/json</p>\n<p>[\n  {</p>\n<p>  },<br>  {<br>  },<br>  ……<br>]</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\">* GET /v1/department/:id</span><br><span class=\"line\">此API用于查询指定的部门记录</span><br></pre></td></tr></table></figure>\n\n<p>Request<br>GET /v1/department/:id HTTP/1.1<br>Response<br>HTTP/1.1 200 OK<br>Content-Type: application/json</p>\n<p>{</p>\n<p>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Example</span><br><span class=\"line\">下面的示例将查询id为1的部门记录</span><br></pre></td></tr></table></figure>\n\n<p>Request<br>GET /v1/department/1 HTTP/1.1<br>Response<br>HTTP/1.1 200 OK<br>Content-Type: application/json</p>\n<p>{\n    “code”: 0,<br>    “rows”: 1,<br>    “result”: [{“id”: “1”, “name”: “zonghezhikongzhongxin”, “parent”: “”]<br>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\">* GET /v1/department/:id?type=subtree</span><br><span class=\"line\">此API用于查询指定的部门的所有子用户和子部门记录（树形结构）</span><br></pre></td></tr></table></figure>\n\n<p>Request<br>GET /v1/department/:id?type=subtree HTTP/1.1<br>Response<br>HTTP/1.1 200 OK<br>Content-Type: application/json</p>\n<p>{</p>\n<p>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Example</span><br><span class=\"line\">下面的示例将查询id为1的部门的详细信息（包括子部门和用户）记录</span><br></pre></td></tr></table></figure>\n\n<p>Request<br>GET /v1/department/1?type=subtree HTTP/1.1</p>\n<p>Response<br>HTTP/1.1 200 OK<br>Content-Type: application/json</p>\n<p>{\n    “code”: 0,<br>    “rows”: 1,<br>    “result”: {<br>                “user”:[<br>                        {“id”: 1, “name”: “xxxx”, “department”:[1], “mail”:”<a href=\"mailto:xxxx@xywy.com\" target=\"_blank\" rel=\"noopener\">xxxx@xywy.com</a>“, “telephone”:”xxxxx”},<br>                        {“id”: 2, “name”: “xxxxx”,”department”:[1, 2], “mail”:”<a href=\"mailto:xxxxx@xywy.com\" target=\"_blank\" rel=\"noopener\">xxxxx@xywy.com</a>“, “telephone”:”xxxxx”},<br>                        ……<br>                       ]<br>               “department”:[<br>                              {“id”: 1 “name”:”sa”,   “parent”:1},<br>                              { “ id”: 1, “name” : “anquan”, “parent” : 1 }<br>                                ……<br>                            ]<br>             }</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\">* POST /v1/department</span><br><span class=\"line\">此API用于新增 部门记录</span><br></pre></td></tr></table></figure>\n\n<p>Request<br>POST /v1/department HTTP/1.1<br>Content-Type: application/json</p>\n<p>{\n    ${Record informations}<br>}</p>\n<p>Response<br>HTTP/1.1 201 CREATED<br>Content-Type: application/json</p>\n<p>{\n    “code”:${code},   //type is int<br>    “id”: ${id}       //type is string, specifing the id inserted, which can be used in querying through the id<br>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Example</span><br><span class=\"line\">下面的示例将插入部门记录</span><br></pre></td></tr></table></figure>\n\n<p>Request<br>POST /v1/department HTTP/1.1<br>Content-Type: application/json</p>\n<p>{\n    ${Record informations}<br>}</p>\n<p>Response<br>HTTP/1.1 201 CREATED<br>Content-Type: application/json</p>\n<p>{\n    “code”: 0,<br>    “id”: 1<br>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\">* PUT /v1/department/:id</span><br><span class=\"line\">此API用于修改部门记录</span><br></pre></td></tr></table></figure>\n\n<p>Request<br>POST /v1/department/:id HTTP/1.1<br>Content-Type: application/json</p>\n<p>{</p>\n<p>}\nResponse<br>HTTP/1.1 201 CREATED<br>Content-Type: application/json</p>\n<p>{\n    “code”:0,<br>    “rows”: ${line}       //type is int<br>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Example</span><br><span class=\"line\">下面的示例将修改ID为1的部门信息</span><br></pre></td></tr></table></figure>\n\n<p>Request<br>PUT /v1/department/1 HTTP/1.1<br>Content-Type: application/json</p>\n<p>{</p>\n<p>}</p>\n<p>Response<br>HTTP/1.1 201 UPDATED<br>Content-Type: application/json</p>\n<p>{\n    “code”: 0,<br>    “rows”：3<br>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\">* DELETE /v1/department/:id</span><br><span class=\"line\">此API用于删除部门记录</span><br></pre></td></tr></table></figure>\n\n<p>Request<br>DELETE /v1/department/:id<br>{</p>\n<p>}</p>\n<p>Response<br>HTTP/1.1 204 NO CONTENT<br>Content-Type: application/json</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Example</span><br><span class=\"line\">下面的示例将删除部门记录</span><br></pre></td></tr></table></figure>\n\n<p>Request<br>DELETE  /v1/department/1 HTTP/1.1<br>{\n}</p>\n<p>Response<br>HTTP/1.1 204 NO CONTENT</p>\n<pre><code>\n###3. 系统／管理员 与 用户Api很类似，只是URI稍有不同\n####系统： /v1/system\n####管理员： /v1/admin\n返回记录信息在 Record informations中有说明。\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p><strong><em>LDAPAdmin</em></strong>, 为用户管理提供一组API，以HTTP-based RESTful API的形式提供服务，提供了对ldap数据的增删改查功能。主要用到了HTTP的四种方法：GET， POST， PUT和 DELETE。</p>\n<p>下面主要对LDAPAdmin 的REST Api做个简单介绍：</p>\n<p>##Functionality</p>\n<p>###Terminology</p>\n<p>###User stories</p>\n<ul>\n<li>利用该组件的HTTP API，通过提交一组描述 用户／部门／系统／管理员的JSON数据，添加、删除、更新、查询数据；</li>\n<li>利用该组件的HTTP API，可以方便的添加一条 用户／部门／系统／管理员记录；</li>\n<li>利用该组件的HTTP API，可以方便的更新一条指定的 用户／部门／系统／管理员记录；</li>\n<li>利用该组件的HTTP API，可以方便的将指定的 用户／部门／系统／管理员删除；</li>\n</ul>\n<p>###Scope and Non-Scope</p>\n<p>####Scope</p>\n<ul>\n<li>用户／部门／系统／管理员 信息相关数据的添加、更新、删除；</li>\n<li>查询 用户／部门／系统／管理员的信息；</li>\n<li>用户／部门／系统／管理员 的有效性；</li>\n</ul>\n<p>###Non-Scope</p>\n<ul>\n<li>用户数据的可靠性，数据由管理员负责维护</li>\n</ul>\n<p>##Low-level Design</p>\n<p>###Response Code</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Code</th>\n<th align=\"left\">Remind</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">200</td>\n<td align=\"left\">OK – [GET]</td>\n<td align=\"left\">成功返回用户请求的数据</td>\n</tr>\n<tr>\n<td align=\"left\">201</td>\n<td align=\"left\">CREATED – [POST/PUT]</td>\n<td align=\"left\">新建/修改数据成功</td>\n</tr>\n<tr>\n<td align=\"left\">204</td>\n<td align=\"left\">NO CONTENT – [DELETE]</td>\n<td align=\"left\">删除数据成功</td>\n</tr>\n<tr>\n<td align=\"left\">400</td>\n<td align=\"left\">INVALID REQUEST – [POST/PUT</td>\n<td align=\"left\">用户发出请求有误，服务器没有新建/修改数据</td>\n</tr>\n<tr>\n<td align=\"left\">401</td>\n<td align=\"left\">Unauthorized – [*]</td>\n<td align=\"left\">token认证失败，token过期等情况</td>\n</tr>\n<tr>\n<td align=\"left\">403</td>\n<td align=\"left\">Forbidden – [*]</td>\n<td align=\"left\">用户认证成功，但没有权限进行相应操作（权限细分）</td>\n</tr>\n<tr>\n<td align=\"left\">404</td>\n<td align=\"left\">NOT FOUND – [*]</td>\n<td align=\"left\">请求的资源（在这里是表、字段不存在等情况）</td>\n</tr>\n<tr>\n<td align=\"left\">406</td>\n<td align=\"left\">NOT Acceptable – [GET]</td>\n<td align=\"left\">用户请求的格式不可得</td>\n</tr>\n<tr>\n<td align=\"left\">500</td>\n<td align=\"left\">INTERNAL SERVER ERROR – [*]</td>\n<td align=\"left\">服务器内部错误，用户无法判断请求是否成功</td>\n</tr>\n</tbody></table>\n<p>###Response| Result</p>\n<p>#####除了每个响应都携带的返回码和可选的description字段，以下为该API的返回结果（具体形式在每种请求中都有举例）：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Method</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">GET</td>\n<td align=\"left\">返回被查询对象的列表，或为空（查询结果为空）</td>\n</tr>\n<tr>\n<td align=\"left\">POST</td>\n<td align=\"left\">返回是否插入成功（1为成功，0为失败）</td>\n</tr>\n<tr>\n<td align=\"left\">PUT</td>\n<td align=\"left\">返回被修改的行数</td>\n</tr>\n<tr>\n<td align=\"left\">DELETE</td>\n<td align=\"left\">返回被删除的行数</td>\n</tr>\n</tbody></table>\n<p>###Http methods table</p>\n<p>####1.用户<br>HTTP Method|URI|Description<br>:—————|:————–|:————-<br>GET    |/v1/user    |获取所有用户记录<br>GET    |/v1/user/:id    |根据id获取记录<br>POST|    /v1/user    |添加用户记录<br>PUT    |/v1/user/:id    |修改某个用户记录<br>DELETE|    /v1/user/:id    |删除某个用户记录</p>\n<p>####2. 部门<br>HTTP Method|URI|Description<br>:——————-|:————–|:————-<br>GET    | /v1/department    |获取所有部门记录<br>GET    | /v1/department/:id    |根据id获取部门记录<br>GET    | /v1/department/:id?type=subtree    |根据id获取该部门下所有的用户和子部门记录<br>POST|    /v1/department    |添加部门记录<br>PUT    | /v1/department/:id    |修改某个部门记录<br>DELETE|    /v1/department/:id    |删除某个部门记录</p>\n<p>####3. 系统<br>HTTP Method|URI|Description<br>:—————|:————–|:————-<br>GET    |/v1/system    |获取所有组记录<br>GET    |/v1/system/:id    |根据id获取记录<br>POST|    /v1/system    |添加组记录<br>PUT    |/v1/system/:id    |修改某个组记录<br>DELETE|    /v1/system/:id    |删除某个组记录</p>\n<p>####4. 管理员<br>HTTP Method|URI|Description<br>:—————|:————–|:————-<br>GET    | /v1/admin    |获取所有管理员记录<br>GET    | /v1/admin/:id    |根据id获取记录<br>POST|    /v1/admin    |添加管理员记录<br>PUT    | /v1/admin/:id    |修改某个管理员记录<br>DELETE|    /v1/admin/:id|    删除某个管理员记录</p>\n<p>###Record infomations</p>\n<p>####1.用户<br>Response</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;Id&quot;: $&#123;id&#125;,                  //用户ID</span><br><span class=\"line\">    &quot;UserName&quot;: $&#123;user name&#125;,     //用户名</span><br><span class=\"line\">    &quot;Password&quot;: $&#123;password&#125;,      //密码</span><br><span class=\"line\">    &quot;Department&quot;: $&#123;department&#125;,  //所属部门</span><br><span class=\"line\">    &quot;Mail&quot;: $&#123;mail&#125;,              //邮件</span><br><span class=\"line\">    &quot;Telephone&quot;: $&#123;telephone&#125;,    //电话</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>####2.部门<br>Response</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;Id&quot;: $&#123;id&#125;,                  //部门ID</span><br><span class=\"line\">    &quot;Name&quot;: $&#123;name&#125;,              //部门名</span><br><span class=\"line\">    &quot;Parent&quot;, $&#123;parent&#125;           //上级部门   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>####3.系统<br>Response</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;Id&quot;: $&#123;id&#125;,                  //组ID</span><br><span class=\"line\">    &quot;Name&quot;: $&#123;name&#125;,              //组名</span><br><span class=\"line\">    &quot;Member&quot;, $&#123;member&#125;           //成员</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>####4. 管理员<br>Response</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;Id&quot;: $&#123;id&#125;,                  //管理员ID</span><br><span class=\"line\">    &quot;Name&quot;: $&#123;name&#125;,              //名字</span><br><span class=\"line\">    &quot;Password&quot;, $&#123;password&#125;       //密码   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>###RESTful API</p>\n<p>####1. 用户</p>\n<ul>\n<li>GET /v1/user</li>\n</ul>\n<p>此API用于查询所有 用户记录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Request:</span><br><span class=\"line\">GET / HTTP/1.1</span><br><span class=\"line\">Response:</span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Content-Type: application/json</span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Example<br>下面的示例将查询用户信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Request</span><br><span class=\"line\">GET /v1/user HTTP/1.1</span><br><span class=\"line\">Response</span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Content-Type: application/json</span><br><span class=\"line\"> </span><br><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ......</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>GET /v1/user/:id<br>此API用于查询指定的用户记录</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Request</span><br><span class=\"line\">GET /v1/user/:id HTTP/1.1</span><br><span class=\"line\">Response</span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Content-Type: application/json</span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Example<br>下面的示例将查询id为1的用户录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Request</span><br><span class=\"line\">GET /v1/user/1 HTTP/1.1</span><br><span class=\"line\">Response</span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Content-Type: application/json</span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;code&quot;: 0,</span><br><span class=\"line\">    &quot;rows&quot;: 1,</span><br><span class=\"line\">    &quot;result&quot;: [&#123;&quot;id&quot;: &quot;1&quot;, &quot;name&quot;: &quot;xxxx&quot;, &quot;password&quot;: &quot;xxxx&quot;, &quot;department&quot;:[1, 2], </span><br><span class=\"line\">    &quot;mail&quot;:&quot;xxx@xywy.com&quot;, &quot;telephone&quot;:&quot;15212233445&quot;&#125;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">``` </span><br><span class=\"line\"> </span><br><span class=\"line\">* POST /v1/user</span><br><span class=\"line\">此API用于新增 用户记录记录</span><br></pre></td></tr></table></figure>\n\n<p>Request<br>POST /v1/user HTTP/1.1<br>Content-Type: application/json</p>\n<p>{\n    ${Record informations}<br>}</p>\n<p>Response<br>HTTP/1.1 201 CREATED<br>Content-Type: application/json</p>\n<p>{\n    “code”:${code},   //type is int<br>    “id”: ${id}       //type is string, specifing the id inserted, which can be used in querying through the id<br>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Example</span><br><span class=\"line\">下面的示例将插入 用户记录</span><br></pre></td></tr></table></figure>\n\n<p>Request<br>POST /v1/user HTTP/1.1<br>Content-Type: application/json</p>\n<p>{\n    ${Record informations}<br>}\nResponse<br>HTTP/1.1 201 CREATED<br>Content-Type: application/json</p>\n<p>{\n    “code”: 0,<br>    “id”: 1<br>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">* PUT /v1/user/:id</span><br><span class=\"line\">此API用于修改用户记录</span><br></pre></td></tr></table></figure>\n\n<p>Request<br>POST /v1/user/:id HTTP/1.1<br>Content-Type: application/json</p>\n<p>{</p>\n<p>}\nResponse<br>HTTP/1.1 201 CREATED<br>Content-Type: application/json</p>\n<p>{\n    “code”:0,<br>    “rows”: ${line}       //type is int<br>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example</span><br><span class=\"line\">下面的示例将修改用户信息</span><br></pre></td></tr></table></figure>\n\n<p>Request<br>PUT /v1/user/1 HTTP/1.1<br>Content-Type: application/json</p>\n<p>{</p>\n<p>}\nResponse<br>HTTP/1.1 201 UPDATED<br>Content-Type: application/json</p>\n<p>{\n    “code”: 0,<br>    “rows”：3<br>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">* DELETE /v1/user/:id</span><br><span class=\"line\">此API用于删除用户记录</span><br></pre></td></tr></table></figure>\n\n<p>Request<br>DELETE /v1/user/:id<br>{</p>\n<p>}\nResponse<br>HTTP/1.1 204 NO CONTENT<br>Content-Type: application/json</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example</span><br><span class=\"line\">下面的示例将删除用户记录</span><br></pre></td></tr></table></figure>\n\n<p>Request<br>DELETE  /v1/user/1 HTTP/1.1<br>{\n}<br>Response<br>HTTP/1.1 204 NO CONTENT</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\">2. 部门</span><br><span class=\"line\"> </span><br><span class=\"line\">* GET /v1/department </span><br><span class=\"line\">此API用于查询所有部门记录</span><br></pre></td></tr></table></figure>\n\n<p>Request<br>GET /v1/department HTTP/1.1<br>Response<br>HTTP/1.1 200 OK<br>Content-Type: application/json</p>\n<p>{\n   ${Record informentions}<br>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example</span><br><span class=\"line\">下面的示例将查询部门信息</span><br></pre></td></tr></table></figure>\n\n<p>Request<br>GET /v1/department HTTP/1.1<br>Response<br>HTTP/1.1 200 OK<br>Content-Type: application/json</p>\n<p>[\n  {</p>\n<p>  },<br>  {<br>  },<br>  ……<br>]</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\">* GET /v1/department/:id</span><br><span class=\"line\">此API用于查询指定的部门记录</span><br></pre></td></tr></table></figure>\n\n<p>Request<br>GET /v1/department/:id HTTP/1.1<br>Response<br>HTTP/1.1 200 OK<br>Content-Type: application/json</p>\n<p>{</p>\n<p>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Example</span><br><span class=\"line\">下面的示例将查询id为1的部门记录</span><br></pre></td></tr></table></figure>\n\n<p>Request<br>GET /v1/department/1 HTTP/1.1<br>Response<br>HTTP/1.1 200 OK<br>Content-Type: application/json</p>\n<p>{\n    “code”: 0,<br>    “rows”: 1,<br>    “result”: [{“id”: “1”, “name”: “zonghezhikongzhongxin”, “parent”: “”]<br>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\">* GET /v1/department/:id?type=subtree</span><br><span class=\"line\">此API用于查询指定的部门的所有子用户和子部门记录（树形结构）</span><br></pre></td></tr></table></figure>\n\n<p>Request<br>GET /v1/department/:id?type=subtree HTTP/1.1<br>Response<br>HTTP/1.1 200 OK<br>Content-Type: application/json</p>\n<p>{</p>\n<p>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Example</span><br><span class=\"line\">下面的示例将查询id为1的部门的详细信息（包括子部门和用户）记录</span><br></pre></td></tr></table></figure>\n\n<p>Request<br>GET /v1/department/1?type=subtree HTTP/1.1</p>\n<p>Response<br>HTTP/1.1 200 OK<br>Content-Type: application/json</p>\n<p>{\n    “code”: 0,<br>    “rows”: 1,<br>    “result”: {<br>                “user”:[<br>                        {“id”: 1, “name”: “xxxx”, “department”:[1], “mail”:”<a href=\"mailto:xxxx@xywy.com\" target=\"_blank\" rel=\"noopener\">xxxx@xywy.com</a>“, “telephone”:”xxxxx”},<br>                        {“id”: 2, “name”: “xxxxx”,”department”:[1, 2], “mail”:”<a href=\"mailto:xxxxx@xywy.com\" target=\"_blank\" rel=\"noopener\">xxxxx@xywy.com</a>“, “telephone”:”xxxxx”},<br>                        ……<br>                       ]<br>               “department”:[<br>                              {“id”: 1 “name”:”sa”,   “parent”:1},<br>                              { “ id”: 1, “name” : “anquan”, “parent” : 1 }<br>                                ……<br>                            ]<br>             }</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\">* POST /v1/department</span><br><span class=\"line\">此API用于新增 部门记录</span><br></pre></td></tr></table></figure>\n\n<p>Request<br>POST /v1/department HTTP/1.1<br>Content-Type: application/json</p>\n<p>{\n    ${Record informations}<br>}</p>\n<p>Response<br>HTTP/1.1 201 CREATED<br>Content-Type: application/json</p>\n<p>{\n    “code”:${code},   //type is int<br>    “id”: ${id}       //type is string, specifing the id inserted, which can be used in querying through the id<br>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Example</span><br><span class=\"line\">下面的示例将插入部门记录</span><br></pre></td></tr></table></figure>\n\n<p>Request<br>POST /v1/department HTTP/1.1<br>Content-Type: application/json</p>\n<p>{\n    ${Record informations}<br>}</p>\n<p>Response<br>HTTP/1.1 201 CREATED<br>Content-Type: application/json</p>\n<p>{\n    “code”: 0,<br>    “id”: 1<br>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\">* PUT /v1/department/:id</span><br><span class=\"line\">此API用于修改部门记录</span><br></pre></td></tr></table></figure>\n\n<p>Request<br>POST /v1/department/:id HTTP/1.1<br>Content-Type: application/json</p>\n<p>{</p>\n<p>}\nResponse<br>HTTP/1.1 201 CREATED<br>Content-Type: application/json</p>\n<p>{\n    “code”:0,<br>    “rows”: ${line}       //type is int<br>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Example</span><br><span class=\"line\">下面的示例将修改ID为1的部门信息</span><br></pre></td></tr></table></figure>\n\n<p>Request<br>PUT /v1/department/1 HTTP/1.1<br>Content-Type: application/json</p>\n<p>{</p>\n<p>}</p>\n<p>Response<br>HTTP/1.1 201 UPDATED<br>Content-Type: application/json</p>\n<p>{\n    “code”: 0,<br>    “rows”：3<br>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\">* DELETE /v1/department/:id</span><br><span class=\"line\">此API用于删除部门记录</span><br></pre></td></tr></table></figure>\n\n<p>Request<br>DELETE /v1/department/:id<br>{</p>\n<p>}</p>\n<p>Response<br>HTTP/1.1 204 NO CONTENT<br>Content-Type: application/json</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Example</span><br><span class=\"line\">下面的示例将删除部门记录</span><br></pre></td></tr></table></figure>\n\n<p>Request<br>DELETE  /v1/department/1 HTTP/1.1<br>{\n}</p>\n<p>Response<br>HTTP/1.1 204 NO CONTENT</p>\n<pre><code>\n###3. 系统／管理员 与 用户Api很类似，只是URI稍有不同\n####系统： /v1/system\n####管理员： /v1/admin\n返回记录信息在 Record informations中有说明。\n</code></pre>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Thu Jun 13 2019 11:26:00 GMT+0800 (CST)","title":"统一账户管理系统RESTful api设计","path":"blog/2015-04-10-ldapadmin-design/","eyeCatchImage":null,"excerpt":null,"date":"2015-04-09T16:00:00.000Z","pv":0,"totalPV":0,"categories":"技术","tags":["RESTFul API"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Swift条件展开初始化","date":"2016-09-05T16:00:00.000Z","_content":"\n原文链接：[Idiomatic Swift: conditional unwrapping initialization](http://ericasadun.com/2016/08/04/idiomatic-swift-conditional-unwrapping-initialization/)\n\nSwift-Users上，Dan T 问：   \n目前我这样写：\n```\nlet dobString: String\nif let dob = dob {\n  dobString = serverDateFormatter.stringFromDate(dob)\n}\nelse {\n  dobString = \"\"\n}\n```\n有没有更好，更通用的方法实现同样的功能？\n\n<!--more-->\n\n我假设serverDateFormatter是NSDateFormatter的实例，这样的话，Dan这样写会更好：\n\n```\nlet dobString: String = {\n  guard let dob = dob else { return \"\" }\n  return serverDateFormatter.string(from: dob)\n}\n```\n我认为这样写更清晰，dobString只出现了一次。（如果他没有用NSDateFormatter，并且需要第二层展开，guard let语句需要第二个分句来执行条件绑定在stringFromDate返回的结果上）。\n\nUpdate：Tim Vermeulen 有更漂亮的一行代码解决方案：\n```\nlet dobString = dob.flatMap(serverDateFormatter.stringFromDate) ?? \"\"\n```\n\n我很确定以上代码中flatMap可以用map代替，这样可以节约四个字符。\n你有更好的方案？可以在评论里留言，发推文，或者发到Swift-Users 邮件列表。","source":"_posts/blog/conditional-unwrapping-initialization.md","raw":"---\ntitle: \"Swift条件展开初始化\"\ndate: 2016-09-06\ncategories: 技术\ntags: [\"Swift\", \"翻译\"]\n---\n\n原文链接：[Idiomatic Swift: conditional unwrapping initialization](http://ericasadun.com/2016/08/04/idiomatic-swift-conditional-unwrapping-initialization/)\n\nSwift-Users上，Dan T 问：   \n目前我这样写：\n```\nlet dobString: String\nif let dob = dob {\n  dobString = serverDateFormatter.stringFromDate(dob)\n}\nelse {\n  dobString = \"\"\n}\n```\n有没有更好，更通用的方法实现同样的功能？\n\n<!--more-->\n\n我假设serverDateFormatter是NSDateFormatter的实例，这样的话，Dan这样写会更好：\n\n```\nlet dobString: String = {\n  guard let dob = dob else { return \"\" }\n  return serverDateFormatter.string(from: dob)\n}\n```\n我认为这样写更清晰，dobString只出现了一次。（如果他没有用NSDateFormatter，并且需要第二层展开，guard let语句需要第二个分句来执行条件绑定在stringFromDate返回的结果上）。\n\nUpdate：Tim Vermeulen 有更漂亮的一行代码解决方案：\n```\nlet dobString = dob.flatMap(serverDateFormatter.stringFromDate) ?? \"\"\n```\n\n我很确定以上代码中flatMap可以用map代替，这样可以节约四个字符。\n你有更好的方案？可以在评论里留言，发推文，或者发到Swift-Users 邮件列表。","slug":"blog/conditional-unwrapping-initialization","published":1,"updated":"2019-06-13T03:26:00.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwu44hnk0013fvuj44fn5raj","content":"<p>原文链接：<a href=\"http://ericasadun.com/2016/08/04/idiomatic-swift-conditional-unwrapping-initialization/\" target=\"_blank\" rel=\"noopener\">Idiomatic Swift: conditional unwrapping initialization</a></p>\n<p>Swift-Users上，Dan T 问：<br>目前我这样写：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let dobString: String</span><br><span class=\"line\">if let dob = dob &#123;</span><br><span class=\"line\">  dobString = serverDateFormatter.stringFromDate(dob)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else &#123;</span><br><span class=\"line\">  dobString = &quot;&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>有没有更好，更通用的方法实现同样的功能？</p>\n<a id=\"more\"></a>\n\n<p>我假设serverDateFormatter是NSDateFormatter的实例，这样的话，Dan这样写会更好：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let dobString: String = &#123;</span><br><span class=\"line\">  guard let dob = dob else &#123; return &quot;&quot; &#125;</span><br><span class=\"line\">  return serverDateFormatter.string(from: dob)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我认为这样写更清晰，dobString只出现了一次。（如果他没有用NSDateFormatter，并且需要第二层展开，guard let语句需要第二个分句来执行条件绑定在stringFromDate返回的结果上）。</p>\n<p>Update：Tim Vermeulen 有更漂亮的一行代码解决方案：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let dobString = dob.flatMap(serverDateFormatter.stringFromDate) ?? &quot;&quot;</span><br></pre></td></tr></table></figure>\n\n<p>我很确定以上代码中flatMap可以用map代替，这样可以节约四个字符。<br>你有更好的方案？可以在评论里留言，发推文，或者发到Swift-Users 邮件列表。</p>\n","site":{"data":{}},"excerpt":"<p>原文链接：<a href=\"http://ericasadun.com/2016/08/04/idiomatic-swift-conditional-unwrapping-initialization/\" target=\"_blank\" rel=\"noopener\">Idiomatic Swift: conditional unwrapping initialization</a></p>\n<p>Swift-Users上，Dan T 问：<br>目前我这样写：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let dobString: String</span><br><span class=\"line\">if let dob = dob &#123;</span><br><span class=\"line\">  dobString = serverDateFormatter.stringFromDate(dob)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else &#123;</span><br><span class=\"line\">  dobString = &quot;&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>有没有更好，更通用的方法实现同样的功能？</p>","more":"<p>我假设serverDateFormatter是NSDateFormatter的实例，这样的话，Dan这样写会更好：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let dobString: String = &#123;</span><br><span class=\"line\">  guard let dob = dob else &#123; return &quot;&quot; &#125;</span><br><span class=\"line\">  return serverDateFormatter.string(from: dob)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我认为这样写更清晰，dobString只出现了一次。（如果他没有用NSDateFormatter，并且需要第二层展开，guard let语句需要第二个分句来执行条件绑定在stringFromDate返回的结果上）。</p>\n<p>Update：Tim Vermeulen 有更漂亮的一行代码解决方案：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let dobString = dob.flatMap(serverDateFormatter.stringFromDate) ?? &quot;&quot;</span><br></pre></td></tr></table></figure>\n\n<p>我很确定以上代码中flatMap可以用map代替，这样可以节约四个字符。<br>你有更好的方案？可以在评论里留言，发推文，或者发到Swift-Users 邮件列表。</p>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Thu Jun 13 2019 11:26:00 GMT+0800 (CST)","title":"Swift条件展开初始化","path":"blog/conditional-unwrapping-initialization/","eyeCatchImage":null,"excerpt":"<p>原文链接：<a href=\"http://ericasadun.com/2016/08/04/idiomatic-swift-conditional-unwrapping-initialization/\" target=\"_blank\" rel=\"noopener\">Idiomatic Swift: conditional unwrapping initialization</a></p>\n<p>Swift-Users上，Dan T 问：<br>目前我这样写：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let dobString: String</span><br><span class=\"line\">if let dob = dob &#123;</span><br><span class=\"line\">  dobString = serverDateFormatter.stringFromDate(dob)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else &#123;</span><br><span class=\"line\">  dobString = &quot;&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>有没有更好，更通用的方法实现同样的功能？</p>","date":"2016-09-05T16:00:00.000Z","pv":0,"totalPV":0,"categories":"技术","tags":["Swift","翻译"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"ReactiveCocoa中的基本算子","date":"2016-08-13T16:00:00.000Z","_content":"\n原文链接: [Basic Operators](https://github.com/ReactiveCocoa/ReactiveCocoa/blob/master/Documentation/BasicOperators.md)\n\n这个文档解释ReactiveCocoa中最常用的Operator，以及一些用例。注意Operators，在这里指的是signal和signal producers之间的转换，不是Swift中的操作符，换句话说，这些是ReactiveCocoa提供处理事件流的组合原语。该文档使用术语“事件流”来描述Signal和SignalProducer的概念。\n\n### 事件流副作用\n#### 观察（Observation）\nSignal可以被观察通过observe函数，需要一个Observer作为参数，任何事件流都会发送给它。\n```\nsignal.observe(Signal.Observer { event in\n  switch event {\n    case let .Next(next):\n      print(\"Next: \\(next)\")\n    case let .Failed(error):\n      print(\"Failed: \\(error)\")\n    case .Completed:\n      print(\"Completed\")\n    case .Interrupted:\n      print(\"Interrupted\")\n  }\n})\n```\n<!--more--> \n\n或者可以用Next, Failed, Completed 和Interrupted事件的回调函数，当相应的事件发生时它（回调函数）会被调用。\n```\nsignal.observeNext { next in\n  print(\"Next: \\(next)\")\n}\nsignal.observeFailed { error in\n  print(\"Failed: \\(error)\")\n}\nsignal.observeCompleted {\n  print(\"Completed\")\n}\nsignal.observeInterrupted {\n  print(\"Interrupted\")\n}\n```\n注意可以不用观察所有四种类型的事件，因为参数是可选类型, 你只需要给你关心的事件提供回调函数。\n\n#### Injecting effects\nSignalProducer会引入副作用，当使用on操作符但没有实际订阅它。\n\n```\nlet producer = signalProducer\n  .on(started: {\n    print(\"Started\")\n  }, event: { event in\n    print(\"Event: \\(event)\")\n  }, failed: { error in\n    print(\"Failed: \\(error)\")\n  }, completed: {\n    print(\"completed\")\n  }, interrupted: {\n    print(\"interrupted\")\n  }, terminated: {\n    print(\"Terminated\")\n  }, disposed: {\n    print(\"Disposed\")\n  }, next: { value in\n    print(\"Next: \\(value)\")\n  })\n```\n与observe类似，你只需要给你关心的事件提供回调函数。\n注意不会有任何打印直到producer调用started（也许再其他任何地方调用started）。\n\n### 组合算子（Operator composition）\n#### Lifting\n转换事件流\n以下操作符可以将一个事件流转换成一个新的事件流。\n\n#### Mapping\nmap用于事件流中所有的值，然后将结果创建成一个新的流。\n```\nlet (signal, observer) = Signal<String, NoError>.pipe()\n\nsignal\n  .map{ string in string.uppercaseString }\n  .observeNext { next in print(next) }\n\n  observer.sendNext(\"a\") //Prints A\n  observer.sendNext(\"c\") //Prints B\n  observer.sendNext(\"c\") //Prints C\n```\n#### Filtering\n**filter** 用于包含满足一定条件的事件流的值。\n```\nlet (signal, observer) = Signal<Int, NoError>.pipe()\n\nsignal\n  .filter { number in number % 2 == 0 }\n  .observeNext { next in print(next) }\n\nobserver.sendNext(1)   //Not printed\nobserver.sendNext(2)   //Prints 2\nobserver.sendNext(3)   //Not printed\nobserver.sendNext(4)   //Print 4\n```\n##### 聚集(Aggregating)\n**reduce** 用于将一个事件流中的所有值聚集成一个单一的合并后得值，注意只有当输入的流完成时才会得到最后的结果。\n```\nlet (signal, observer) = Signal<Int, NoError>.pipe()\nsignal\n  .reduce{ $0 * $1 }\n  .observeNext{ next in print(next) }\n\nobserver.sendNext(1) //Not printed\nobserver.sendNext(2) //Not printed\nobserver.sendNext(3) //Not printed\nobserver.sendNext(4) //Not printed\nobserver.sendCompleted() //print 10\n```\n**collect** 将一个事件流的所有值聚合到一个数组中，注意只有当输入的流完成时才会得到最后的结果。\n```\nlet (signal, observer) = Signal<Int, NoError>.pipe()\n\nsignal\n    .collect()\n    .observeNext { next in print(next) }\n\nobserver.sendNext(1)     // nothing printed\nobserver.sendNext(2)     // nothing printed\nobserver.sendNext(3)     // nothing printed\nobserver.sendCompleted()   // prints [1, 2, 3]\n```\n### 合并事件流（Combining event streams）\n这些操作会合并多个事件流中的值成一个新的、统一的流。\n\n#### 合并最新的值（Combining latest values）\n**combineLatest** 方法合并两个事件流最后的值。\n产生的流将会发送它的第一个值当每一个输入流至少有一个值发送之后，之后，每一个输入流的新值产生一个新值输出。\n```\nlet (numbersSignal, numbersObserver) = Signal<Int, NoError>.pipe()\nlet (lettersSignal, lettersObserver) = Signal<Int, NoError>.pipe()\n\nlet signal = combineLatest(numbersSignal, lettersSignal)\nsignal.observeNext { next in print(next) }\nsignal.observeCompleted { print(\"Completed\") }\n\nnumbersObserver.sendNext(0)      // nothing printed\nnumbersObserver.sendNext(1)      // nothing printed\nlettersObserver.sendNext(\"A\")    // prints (1, A)\nnumbersObserver.sendNext(2)      // prints (2, A)\nnumbersObserver.sendCompleted()  // nothing printed\nlettersObserver.sendNext(\"B\")    // prints (2, B)\nlettersObserver.sendNext(\"C\")    // prints (2, C)\nlettersObserver.sendCompleted()  // prints \"Completed\"\ncombineLatestWith算子功能相同，不同的是它是一个算子。\n```\n### 压缩（Zipping）\n**zip**函数结合两个事件流成一对。任何第N个元组的元素相当于第N个输入流的元素。\n意思是说输出流的第N个值只有当每个输入流发送了至少N个值之后才会发送。\n```\nlet (numbersSignal, numbersObserver) = Signal<Int, NoError>.pipe()\nlet (lettersSignal, lettersObserver) = Signal<String, NoError>.pipe()\n\nlet signal = zip(numbersSignal, lettersSignal)\nsignal.observeNext { next in print(\"Next: \\(next)\") }\nsignal.observeCompleted { print(\"Completed\") }\n\nnumbersObserver.sendNext(0)      // nothing printed\nnumbersObserver.sendNext(1)      // nothing printed\nlettersObserver.sendNext(\"A\")    // prints (0, A)\nnumbersObserver.sendNext(2)      // nothing printed\nnumbersObserver.sendCompleted()  // nothing printed\nlettersObserver.sendNext(\"B\")    // prints (1, B)\nlettersObserver.sendNext(\"C\")    // prints (2, C) & \"Completed\"\n```\n**zipWith**算子功能相同，不同之处是它是一个算子。","source":"_posts/blog/basic-operators.md","raw":"---\ntitle: \"ReactiveCocoa中的基本算子\"\ndate: 2016-08-14\ncategories: 技术\ntags: [\"算子\", \"ReactiveCocoa\"]\n---\n\n原文链接: [Basic Operators](https://github.com/ReactiveCocoa/ReactiveCocoa/blob/master/Documentation/BasicOperators.md)\n\n这个文档解释ReactiveCocoa中最常用的Operator，以及一些用例。注意Operators，在这里指的是signal和signal producers之间的转换，不是Swift中的操作符，换句话说，这些是ReactiveCocoa提供处理事件流的组合原语。该文档使用术语“事件流”来描述Signal和SignalProducer的概念。\n\n### 事件流副作用\n#### 观察（Observation）\nSignal可以被观察通过observe函数，需要一个Observer作为参数，任何事件流都会发送给它。\n```\nsignal.observe(Signal.Observer { event in\n  switch event {\n    case let .Next(next):\n      print(\"Next: \\(next)\")\n    case let .Failed(error):\n      print(\"Failed: \\(error)\")\n    case .Completed:\n      print(\"Completed\")\n    case .Interrupted:\n      print(\"Interrupted\")\n  }\n})\n```\n<!--more--> \n\n或者可以用Next, Failed, Completed 和Interrupted事件的回调函数，当相应的事件发生时它（回调函数）会被调用。\n```\nsignal.observeNext { next in\n  print(\"Next: \\(next)\")\n}\nsignal.observeFailed { error in\n  print(\"Failed: \\(error)\")\n}\nsignal.observeCompleted {\n  print(\"Completed\")\n}\nsignal.observeInterrupted {\n  print(\"Interrupted\")\n}\n```\n注意可以不用观察所有四种类型的事件，因为参数是可选类型, 你只需要给你关心的事件提供回调函数。\n\n#### Injecting effects\nSignalProducer会引入副作用，当使用on操作符但没有实际订阅它。\n\n```\nlet producer = signalProducer\n  .on(started: {\n    print(\"Started\")\n  }, event: { event in\n    print(\"Event: \\(event)\")\n  }, failed: { error in\n    print(\"Failed: \\(error)\")\n  }, completed: {\n    print(\"completed\")\n  }, interrupted: {\n    print(\"interrupted\")\n  }, terminated: {\n    print(\"Terminated\")\n  }, disposed: {\n    print(\"Disposed\")\n  }, next: { value in\n    print(\"Next: \\(value)\")\n  })\n```\n与observe类似，你只需要给你关心的事件提供回调函数。\n注意不会有任何打印直到producer调用started（也许再其他任何地方调用started）。\n\n### 组合算子（Operator composition）\n#### Lifting\n转换事件流\n以下操作符可以将一个事件流转换成一个新的事件流。\n\n#### Mapping\nmap用于事件流中所有的值，然后将结果创建成一个新的流。\n```\nlet (signal, observer) = Signal<String, NoError>.pipe()\n\nsignal\n  .map{ string in string.uppercaseString }\n  .observeNext { next in print(next) }\n\n  observer.sendNext(\"a\") //Prints A\n  observer.sendNext(\"c\") //Prints B\n  observer.sendNext(\"c\") //Prints C\n```\n#### Filtering\n**filter** 用于包含满足一定条件的事件流的值。\n```\nlet (signal, observer) = Signal<Int, NoError>.pipe()\n\nsignal\n  .filter { number in number % 2 == 0 }\n  .observeNext { next in print(next) }\n\nobserver.sendNext(1)   //Not printed\nobserver.sendNext(2)   //Prints 2\nobserver.sendNext(3)   //Not printed\nobserver.sendNext(4)   //Print 4\n```\n##### 聚集(Aggregating)\n**reduce** 用于将一个事件流中的所有值聚集成一个单一的合并后得值，注意只有当输入的流完成时才会得到最后的结果。\n```\nlet (signal, observer) = Signal<Int, NoError>.pipe()\nsignal\n  .reduce{ $0 * $1 }\n  .observeNext{ next in print(next) }\n\nobserver.sendNext(1) //Not printed\nobserver.sendNext(2) //Not printed\nobserver.sendNext(3) //Not printed\nobserver.sendNext(4) //Not printed\nobserver.sendCompleted() //print 10\n```\n**collect** 将一个事件流的所有值聚合到一个数组中，注意只有当输入的流完成时才会得到最后的结果。\n```\nlet (signal, observer) = Signal<Int, NoError>.pipe()\n\nsignal\n    .collect()\n    .observeNext { next in print(next) }\n\nobserver.sendNext(1)     // nothing printed\nobserver.sendNext(2)     // nothing printed\nobserver.sendNext(3)     // nothing printed\nobserver.sendCompleted()   // prints [1, 2, 3]\n```\n### 合并事件流（Combining event streams）\n这些操作会合并多个事件流中的值成一个新的、统一的流。\n\n#### 合并最新的值（Combining latest values）\n**combineLatest** 方法合并两个事件流最后的值。\n产生的流将会发送它的第一个值当每一个输入流至少有一个值发送之后，之后，每一个输入流的新值产生一个新值输出。\n```\nlet (numbersSignal, numbersObserver) = Signal<Int, NoError>.pipe()\nlet (lettersSignal, lettersObserver) = Signal<Int, NoError>.pipe()\n\nlet signal = combineLatest(numbersSignal, lettersSignal)\nsignal.observeNext { next in print(next) }\nsignal.observeCompleted { print(\"Completed\") }\n\nnumbersObserver.sendNext(0)      // nothing printed\nnumbersObserver.sendNext(1)      // nothing printed\nlettersObserver.sendNext(\"A\")    // prints (1, A)\nnumbersObserver.sendNext(2)      // prints (2, A)\nnumbersObserver.sendCompleted()  // nothing printed\nlettersObserver.sendNext(\"B\")    // prints (2, B)\nlettersObserver.sendNext(\"C\")    // prints (2, C)\nlettersObserver.sendCompleted()  // prints \"Completed\"\ncombineLatestWith算子功能相同，不同的是它是一个算子。\n```\n### 压缩（Zipping）\n**zip**函数结合两个事件流成一对。任何第N个元组的元素相当于第N个输入流的元素。\n意思是说输出流的第N个值只有当每个输入流发送了至少N个值之后才会发送。\n```\nlet (numbersSignal, numbersObserver) = Signal<Int, NoError>.pipe()\nlet (lettersSignal, lettersObserver) = Signal<String, NoError>.pipe()\n\nlet signal = zip(numbersSignal, lettersSignal)\nsignal.observeNext { next in print(\"Next: \\(next)\") }\nsignal.observeCompleted { print(\"Completed\") }\n\nnumbersObserver.sendNext(0)      // nothing printed\nnumbersObserver.sendNext(1)      // nothing printed\nlettersObserver.sendNext(\"A\")    // prints (0, A)\nnumbersObserver.sendNext(2)      // nothing printed\nnumbersObserver.sendCompleted()  // nothing printed\nlettersObserver.sendNext(\"B\")    // prints (1, B)\nlettersObserver.sendNext(\"C\")    // prints (2, C) & \"Completed\"\n```\n**zipWith**算子功能相同，不同之处是它是一个算子。","slug":"blog/basic-operators","published":1,"updated":"2019-06-13T03:26:00.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwu44hnl0016fvujdzun9w9a","content":"<p>原文链接: <a href=\"https://github.com/ReactiveCocoa/ReactiveCocoa/blob/master/Documentation/BasicOperators.md\" target=\"_blank\" rel=\"noopener\">Basic Operators</a></p>\n<p>这个文档解释ReactiveCocoa中最常用的Operator，以及一些用例。注意Operators，在这里指的是signal和signal producers之间的转换，不是Swift中的操作符，换句话说，这些是ReactiveCocoa提供处理事件流的组合原语。该文档使用术语“事件流”来描述Signal和SignalProducer的概念。</p>\n<h3 id=\"事件流副作用\"><a href=\"#事件流副作用\" class=\"headerlink\" title=\"事件流副作用\"></a>事件流副作用</h3><h4 id=\"观察（Observation）\"><a href=\"#观察（Observation）\" class=\"headerlink\" title=\"观察（Observation）\"></a>观察（Observation）</h4><p>Signal可以被观察通过observe函数，需要一个Observer作为参数，任何事件流都会发送给它。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">signal.observe(Signal.Observer &#123; event in</span><br><span class=\"line\">  switch event &#123;</span><br><span class=\"line\">    case let .Next(next):</span><br><span class=\"line\">      print(&quot;Next: \\(next)&quot;)</span><br><span class=\"line\">    case let .Failed(error):</span><br><span class=\"line\">      print(&quot;Failed: \\(error)&quot;)</span><br><span class=\"line\">    case .Completed:</span><br><span class=\"line\">      print(&quot;Completed&quot;)</span><br><span class=\"line\">    case .Interrupted:</span><br><span class=\"line\">      print(&quot;Interrupted&quot;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a> \n\n<p>或者可以用Next, Failed, Completed 和Interrupted事件的回调函数，当相应的事件发生时它（回调函数）会被调用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">signal.observeNext &#123; next in</span><br><span class=\"line\">  print(&quot;Next: \\(next)&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">signal.observeFailed &#123; error in</span><br><span class=\"line\">  print(&quot;Failed: \\(error)&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">signal.observeCompleted &#123;</span><br><span class=\"line\">  print(&quot;Completed&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">signal.observeInterrupted &#123;</span><br><span class=\"line\">  print(&quot;Interrupted&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意可以不用观察所有四种类型的事件，因为参数是可选类型, 你只需要给你关心的事件提供回调函数。</p>\n<h4 id=\"Injecting-effects\"><a href=\"#Injecting-effects\" class=\"headerlink\" title=\"Injecting effects\"></a>Injecting effects</h4><p>SignalProducer会引入副作用，当使用on操作符但没有实际订阅它。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let producer = signalProducer</span><br><span class=\"line\">  .on(started: &#123;</span><br><span class=\"line\">    print(&quot;Started&quot;)</span><br><span class=\"line\">  &#125;, event: &#123; event in</span><br><span class=\"line\">    print(&quot;Event: \\(event)&quot;)</span><br><span class=\"line\">  &#125;, failed: &#123; error in</span><br><span class=\"line\">    print(&quot;Failed: \\(error)&quot;)</span><br><span class=\"line\">  &#125;, completed: &#123;</span><br><span class=\"line\">    print(&quot;completed&quot;)</span><br><span class=\"line\">  &#125;, interrupted: &#123;</span><br><span class=\"line\">    print(&quot;interrupted&quot;)</span><br><span class=\"line\">  &#125;, terminated: &#123;</span><br><span class=\"line\">    print(&quot;Terminated&quot;)</span><br><span class=\"line\">  &#125;, disposed: &#123;</span><br><span class=\"line\">    print(&quot;Disposed&quot;)</span><br><span class=\"line\">  &#125;, next: &#123; value in</span><br><span class=\"line\">    print(&quot;Next: \\(value)&quot;)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>与observe类似，你只需要给你关心的事件提供回调函数。<br>注意不会有任何打印直到producer调用started（也许再其他任何地方调用started）。</p>\n<h3 id=\"组合算子（Operator-composition）\"><a href=\"#组合算子（Operator-composition）\" class=\"headerlink\" title=\"组合算子（Operator composition）\"></a>组合算子（Operator composition）</h3><h4 id=\"Lifting\"><a href=\"#Lifting\" class=\"headerlink\" title=\"Lifting\"></a>Lifting</h4><p>转换事件流<br>以下操作符可以将一个事件流转换成一个新的事件流。</p>\n<h4 id=\"Mapping\"><a href=\"#Mapping\" class=\"headerlink\" title=\"Mapping\"></a>Mapping</h4><p>map用于事件流中所有的值，然后将结果创建成一个新的流。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let (signal, observer) = Signal&lt;String, NoError&gt;.pipe()</span><br><span class=\"line\"></span><br><span class=\"line\">signal</span><br><span class=\"line\">  .map&#123; string in string.uppercaseString &#125;</span><br><span class=\"line\">  .observeNext &#123; next in print(next) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  observer.sendNext(&quot;a&quot;) //Prints A</span><br><span class=\"line\">  observer.sendNext(&quot;c&quot;) //Prints B</span><br><span class=\"line\">  observer.sendNext(&quot;c&quot;) //Prints C</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Filtering\"><a href=\"#Filtering\" class=\"headerlink\" title=\"Filtering\"></a>Filtering</h4><p><strong>filter</strong> 用于包含满足一定条件的事件流的值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let (signal, observer) = Signal&lt;Int, NoError&gt;.pipe()</span><br><span class=\"line\"></span><br><span class=\"line\">signal</span><br><span class=\"line\">  .filter &#123; number in number % 2 == 0 &#125;</span><br><span class=\"line\">  .observeNext &#123; next in print(next) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">observer.sendNext(1)   //Not printed</span><br><span class=\"line\">observer.sendNext(2)   //Prints 2</span><br><span class=\"line\">observer.sendNext(3)   //Not printed</span><br><span class=\"line\">observer.sendNext(4)   //Print 4</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"聚集-Aggregating\"><a href=\"#聚集-Aggregating\" class=\"headerlink\" title=\"聚集(Aggregating)\"></a>聚集(Aggregating)</h5><p><strong>reduce</strong> 用于将一个事件流中的所有值聚集成一个单一的合并后得值，注意只有当输入的流完成时才会得到最后的结果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let (signal, observer) = Signal&lt;Int, NoError&gt;.pipe()</span><br><span class=\"line\">signal</span><br><span class=\"line\">  .reduce&#123; $0 * $1 &#125;</span><br><span class=\"line\">  .observeNext&#123; next in print(next) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">observer.sendNext(1) //Not printed</span><br><span class=\"line\">observer.sendNext(2) //Not printed</span><br><span class=\"line\">observer.sendNext(3) //Not printed</span><br><span class=\"line\">observer.sendNext(4) //Not printed</span><br><span class=\"line\">observer.sendCompleted() //print 10</span><br></pre></td></tr></table></figure>\n\n<p><strong>collect</strong> 将一个事件流的所有值聚合到一个数组中，注意只有当输入的流完成时才会得到最后的结果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let (signal, observer) = Signal&lt;Int, NoError&gt;.pipe()</span><br><span class=\"line\"></span><br><span class=\"line\">signal</span><br><span class=\"line\">    .collect()</span><br><span class=\"line\">    .observeNext &#123; next in print(next) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">observer.sendNext(1)     // nothing printed</span><br><span class=\"line\">observer.sendNext(2)     // nothing printed</span><br><span class=\"line\">observer.sendNext(3)     // nothing printed</span><br><span class=\"line\">observer.sendCompleted()   // prints [1, 2, 3]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"合并事件流（Combining-event-streams）\"><a href=\"#合并事件流（Combining-event-streams）\" class=\"headerlink\" title=\"合并事件流（Combining event streams）\"></a>合并事件流（Combining event streams）</h3><p>这些操作会合并多个事件流中的值成一个新的、统一的流。</p>\n<h4 id=\"合并最新的值（Combining-latest-values）\"><a href=\"#合并最新的值（Combining-latest-values）\" class=\"headerlink\" title=\"合并最新的值（Combining latest values）\"></a>合并最新的值（Combining latest values）</h4><p><strong>combineLatest</strong> 方法合并两个事件流最后的值。<br>产生的流将会发送它的第一个值当每一个输入流至少有一个值发送之后，之后，每一个输入流的新值产生一个新值输出。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let (numbersSignal, numbersObserver) = Signal&lt;Int, NoError&gt;.pipe()</span><br><span class=\"line\">let (lettersSignal, lettersObserver) = Signal&lt;Int, NoError&gt;.pipe()</span><br><span class=\"line\"></span><br><span class=\"line\">let signal = combineLatest(numbersSignal, lettersSignal)</span><br><span class=\"line\">signal.observeNext &#123; next in print(next) &#125;</span><br><span class=\"line\">signal.observeCompleted &#123; print(&quot;Completed&quot;) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">numbersObserver.sendNext(0)      // nothing printed</span><br><span class=\"line\">numbersObserver.sendNext(1)      // nothing printed</span><br><span class=\"line\">lettersObserver.sendNext(&quot;A&quot;)    // prints (1, A)</span><br><span class=\"line\">numbersObserver.sendNext(2)      // prints (2, A)</span><br><span class=\"line\">numbersObserver.sendCompleted()  // nothing printed</span><br><span class=\"line\">lettersObserver.sendNext(&quot;B&quot;)    // prints (2, B)</span><br><span class=\"line\">lettersObserver.sendNext(&quot;C&quot;)    // prints (2, C)</span><br><span class=\"line\">lettersObserver.sendCompleted()  // prints &quot;Completed&quot;</span><br><span class=\"line\">combineLatestWith算子功能相同，不同的是它是一个算子。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"压缩（Zipping）\"><a href=\"#压缩（Zipping）\" class=\"headerlink\" title=\"压缩（Zipping）\"></a>压缩（Zipping）</h3><p><strong>zip</strong>函数结合两个事件流成一对。任何第N个元组的元素相当于第N个输入流的元素。<br>意思是说输出流的第N个值只有当每个输入流发送了至少N个值之后才会发送。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let (numbersSignal, numbersObserver) = Signal&lt;Int, NoError&gt;.pipe()</span><br><span class=\"line\">let (lettersSignal, lettersObserver) = Signal&lt;String, NoError&gt;.pipe()</span><br><span class=\"line\"></span><br><span class=\"line\">let signal = zip(numbersSignal, lettersSignal)</span><br><span class=\"line\">signal.observeNext &#123; next in print(&quot;Next: \\(next)&quot;) &#125;</span><br><span class=\"line\">signal.observeCompleted &#123; print(&quot;Completed&quot;) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">numbersObserver.sendNext(0)      // nothing printed</span><br><span class=\"line\">numbersObserver.sendNext(1)      // nothing printed</span><br><span class=\"line\">lettersObserver.sendNext(&quot;A&quot;)    // prints (0, A)</span><br><span class=\"line\">numbersObserver.sendNext(2)      // nothing printed</span><br><span class=\"line\">numbersObserver.sendCompleted()  // nothing printed</span><br><span class=\"line\">lettersObserver.sendNext(&quot;B&quot;)    // prints (1, B)</span><br><span class=\"line\">lettersObserver.sendNext(&quot;C&quot;)    // prints (2, C) &amp; &quot;Completed&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>zipWith</strong>算子功能相同，不同之处是它是一个算子。</p>\n","site":{"data":{}},"excerpt":"<p>原文链接: <a href=\"https://github.com/ReactiveCocoa/ReactiveCocoa/blob/master/Documentation/BasicOperators.md\" target=\"_blank\" rel=\"noopener\">Basic Operators</a></p>\n<p>这个文档解释ReactiveCocoa中最常用的Operator，以及一些用例。注意Operators，在这里指的是signal和signal producers之间的转换，不是Swift中的操作符，换句话说，这些是ReactiveCocoa提供处理事件流的组合原语。该文档使用术语“事件流”来描述Signal和SignalProducer的概念。</p>\n<h3 id=\"事件流副作用\"><a href=\"#事件流副作用\" class=\"headerlink\" title=\"事件流副作用\"></a>事件流副作用</h3><h4 id=\"观察（Observation）\"><a href=\"#观察（Observation）\" class=\"headerlink\" title=\"观察（Observation）\"></a>观察（Observation）</h4><p>Signal可以被观察通过observe函数，需要一个Observer作为参数，任何事件流都会发送给它。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">signal.observe(Signal.Observer &#123; event in</span><br><span class=\"line\">  switch event &#123;</span><br><span class=\"line\">    case let .Next(next):</span><br><span class=\"line\">      print(&quot;Next: \\(next)&quot;)</span><br><span class=\"line\">    case let .Failed(error):</span><br><span class=\"line\">      print(&quot;Failed: \\(error)&quot;)</span><br><span class=\"line\">    case .Completed:</span><br><span class=\"line\">      print(&quot;Completed&quot;)</span><br><span class=\"line\">    case .Interrupted:</span><br><span class=\"line\">      print(&quot;Interrupted&quot;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>","more":"<p>或者可以用Next, Failed, Completed 和Interrupted事件的回调函数，当相应的事件发生时它（回调函数）会被调用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">signal.observeNext &#123; next in</span><br><span class=\"line\">  print(&quot;Next: \\(next)&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">signal.observeFailed &#123; error in</span><br><span class=\"line\">  print(&quot;Failed: \\(error)&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">signal.observeCompleted &#123;</span><br><span class=\"line\">  print(&quot;Completed&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">signal.observeInterrupted &#123;</span><br><span class=\"line\">  print(&quot;Interrupted&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意可以不用观察所有四种类型的事件，因为参数是可选类型, 你只需要给你关心的事件提供回调函数。</p>\n<h4 id=\"Injecting-effects\"><a href=\"#Injecting-effects\" class=\"headerlink\" title=\"Injecting effects\"></a>Injecting effects</h4><p>SignalProducer会引入副作用，当使用on操作符但没有实际订阅它。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let producer = signalProducer</span><br><span class=\"line\">  .on(started: &#123;</span><br><span class=\"line\">    print(&quot;Started&quot;)</span><br><span class=\"line\">  &#125;, event: &#123; event in</span><br><span class=\"line\">    print(&quot;Event: \\(event)&quot;)</span><br><span class=\"line\">  &#125;, failed: &#123; error in</span><br><span class=\"line\">    print(&quot;Failed: \\(error)&quot;)</span><br><span class=\"line\">  &#125;, completed: &#123;</span><br><span class=\"line\">    print(&quot;completed&quot;)</span><br><span class=\"line\">  &#125;, interrupted: &#123;</span><br><span class=\"line\">    print(&quot;interrupted&quot;)</span><br><span class=\"line\">  &#125;, terminated: &#123;</span><br><span class=\"line\">    print(&quot;Terminated&quot;)</span><br><span class=\"line\">  &#125;, disposed: &#123;</span><br><span class=\"line\">    print(&quot;Disposed&quot;)</span><br><span class=\"line\">  &#125;, next: &#123; value in</span><br><span class=\"line\">    print(&quot;Next: \\(value)&quot;)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>与observe类似，你只需要给你关心的事件提供回调函数。<br>注意不会有任何打印直到producer调用started（也许再其他任何地方调用started）。</p>\n<h3 id=\"组合算子（Operator-composition）\"><a href=\"#组合算子（Operator-composition）\" class=\"headerlink\" title=\"组合算子（Operator composition）\"></a>组合算子（Operator composition）</h3><h4 id=\"Lifting\"><a href=\"#Lifting\" class=\"headerlink\" title=\"Lifting\"></a>Lifting</h4><p>转换事件流<br>以下操作符可以将一个事件流转换成一个新的事件流。</p>\n<h4 id=\"Mapping\"><a href=\"#Mapping\" class=\"headerlink\" title=\"Mapping\"></a>Mapping</h4><p>map用于事件流中所有的值，然后将结果创建成一个新的流。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let (signal, observer) = Signal&lt;String, NoError&gt;.pipe()</span><br><span class=\"line\"></span><br><span class=\"line\">signal</span><br><span class=\"line\">  .map&#123; string in string.uppercaseString &#125;</span><br><span class=\"line\">  .observeNext &#123; next in print(next) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  observer.sendNext(&quot;a&quot;) //Prints A</span><br><span class=\"line\">  observer.sendNext(&quot;c&quot;) //Prints B</span><br><span class=\"line\">  observer.sendNext(&quot;c&quot;) //Prints C</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Filtering\"><a href=\"#Filtering\" class=\"headerlink\" title=\"Filtering\"></a>Filtering</h4><p><strong>filter</strong> 用于包含满足一定条件的事件流的值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let (signal, observer) = Signal&lt;Int, NoError&gt;.pipe()</span><br><span class=\"line\"></span><br><span class=\"line\">signal</span><br><span class=\"line\">  .filter &#123; number in number % 2 == 0 &#125;</span><br><span class=\"line\">  .observeNext &#123; next in print(next) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">observer.sendNext(1)   //Not printed</span><br><span class=\"line\">observer.sendNext(2)   //Prints 2</span><br><span class=\"line\">observer.sendNext(3)   //Not printed</span><br><span class=\"line\">observer.sendNext(4)   //Print 4</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"聚集-Aggregating\"><a href=\"#聚集-Aggregating\" class=\"headerlink\" title=\"聚集(Aggregating)\"></a>聚集(Aggregating)</h5><p><strong>reduce</strong> 用于将一个事件流中的所有值聚集成一个单一的合并后得值，注意只有当输入的流完成时才会得到最后的结果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let (signal, observer) = Signal&lt;Int, NoError&gt;.pipe()</span><br><span class=\"line\">signal</span><br><span class=\"line\">  .reduce&#123; $0 * $1 &#125;</span><br><span class=\"line\">  .observeNext&#123; next in print(next) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">observer.sendNext(1) //Not printed</span><br><span class=\"line\">observer.sendNext(2) //Not printed</span><br><span class=\"line\">observer.sendNext(3) //Not printed</span><br><span class=\"line\">observer.sendNext(4) //Not printed</span><br><span class=\"line\">observer.sendCompleted() //print 10</span><br></pre></td></tr></table></figure>\n\n<p><strong>collect</strong> 将一个事件流的所有值聚合到一个数组中，注意只有当输入的流完成时才会得到最后的结果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let (signal, observer) = Signal&lt;Int, NoError&gt;.pipe()</span><br><span class=\"line\"></span><br><span class=\"line\">signal</span><br><span class=\"line\">    .collect()</span><br><span class=\"line\">    .observeNext &#123; next in print(next) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">observer.sendNext(1)     // nothing printed</span><br><span class=\"line\">observer.sendNext(2)     // nothing printed</span><br><span class=\"line\">observer.sendNext(3)     // nothing printed</span><br><span class=\"line\">observer.sendCompleted()   // prints [1, 2, 3]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"合并事件流（Combining-event-streams）\"><a href=\"#合并事件流（Combining-event-streams）\" class=\"headerlink\" title=\"合并事件流（Combining event streams）\"></a>合并事件流（Combining event streams）</h3><p>这些操作会合并多个事件流中的值成一个新的、统一的流。</p>\n<h4 id=\"合并最新的值（Combining-latest-values）\"><a href=\"#合并最新的值（Combining-latest-values）\" class=\"headerlink\" title=\"合并最新的值（Combining latest values）\"></a>合并最新的值（Combining latest values）</h4><p><strong>combineLatest</strong> 方法合并两个事件流最后的值。<br>产生的流将会发送它的第一个值当每一个输入流至少有一个值发送之后，之后，每一个输入流的新值产生一个新值输出。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let (numbersSignal, numbersObserver) = Signal&lt;Int, NoError&gt;.pipe()</span><br><span class=\"line\">let (lettersSignal, lettersObserver) = Signal&lt;Int, NoError&gt;.pipe()</span><br><span class=\"line\"></span><br><span class=\"line\">let signal = combineLatest(numbersSignal, lettersSignal)</span><br><span class=\"line\">signal.observeNext &#123; next in print(next) &#125;</span><br><span class=\"line\">signal.observeCompleted &#123; print(&quot;Completed&quot;) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">numbersObserver.sendNext(0)      // nothing printed</span><br><span class=\"line\">numbersObserver.sendNext(1)      // nothing printed</span><br><span class=\"line\">lettersObserver.sendNext(&quot;A&quot;)    // prints (1, A)</span><br><span class=\"line\">numbersObserver.sendNext(2)      // prints (2, A)</span><br><span class=\"line\">numbersObserver.sendCompleted()  // nothing printed</span><br><span class=\"line\">lettersObserver.sendNext(&quot;B&quot;)    // prints (2, B)</span><br><span class=\"line\">lettersObserver.sendNext(&quot;C&quot;)    // prints (2, C)</span><br><span class=\"line\">lettersObserver.sendCompleted()  // prints &quot;Completed&quot;</span><br><span class=\"line\">combineLatestWith算子功能相同，不同的是它是一个算子。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"压缩（Zipping）\"><a href=\"#压缩（Zipping）\" class=\"headerlink\" title=\"压缩（Zipping）\"></a>压缩（Zipping）</h3><p><strong>zip</strong>函数结合两个事件流成一对。任何第N个元组的元素相当于第N个输入流的元素。<br>意思是说输出流的第N个值只有当每个输入流发送了至少N个值之后才会发送。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let (numbersSignal, numbersObserver) = Signal&lt;Int, NoError&gt;.pipe()</span><br><span class=\"line\">let (lettersSignal, lettersObserver) = Signal&lt;String, NoError&gt;.pipe()</span><br><span class=\"line\"></span><br><span class=\"line\">let signal = zip(numbersSignal, lettersSignal)</span><br><span class=\"line\">signal.observeNext &#123; next in print(&quot;Next: \\(next)&quot;) &#125;</span><br><span class=\"line\">signal.observeCompleted &#123; print(&quot;Completed&quot;) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">numbersObserver.sendNext(0)      // nothing printed</span><br><span class=\"line\">numbersObserver.sendNext(1)      // nothing printed</span><br><span class=\"line\">lettersObserver.sendNext(&quot;A&quot;)    // prints (0, A)</span><br><span class=\"line\">numbersObserver.sendNext(2)      // nothing printed</span><br><span class=\"line\">numbersObserver.sendCompleted()  // nothing printed</span><br><span class=\"line\">lettersObserver.sendNext(&quot;B&quot;)    // prints (1, B)</span><br><span class=\"line\">lettersObserver.sendNext(&quot;C&quot;)    // prints (2, C) &amp; &quot;Completed&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>zipWith</strong>算子功能相同，不同之处是它是一个算子。</p>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Thu Jun 13 2019 11:26:00 GMT+0800 (CST)","title":"ReactiveCocoa中的基本算子","path":"blog/basic-operators/","eyeCatchImage":null,"excerpt":"<p>原文链接: <a href=\"https://github.com/ReactiveCocoa/ReactiveCocoa/blob/master/Documentation/BasicOperators.md\" target=\"_blank\" rel=\"noopener\">Basic Operators</a></p>\n<p>这个文档解释ReactiveCocoa中最常用的Operator，以及一些用例。注意Operators，在这里指的是signal和signal producers之间的转换，不是Swift中的操作符，换句话说，这些是ReactiveCocoa提供处理事件流的组合原语。该文档使用术语“事件流”来描述Signal和SignalProducer的概念。</p>\n<h3 id=\"事件流副作用\"><a href=\"#事件流副作用\" class=\"headerlink\" title=\"事件流副作用\"></a>事件流副作用</h3><h4 id=\"观察（Observation）\"><a href=\"#观察（Observation）\" class=\"headerlink\" title=\"观察（Observation）\"></a>观察（Observation）</h4><p>Signal可以被观察通过observe函数，需要一个Observer作为参数，任何事件流都会发送给它。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">signal.observe(Signal.Observer &#123; event in</span><br><span class=\"line\">  switch event &#123;</span><br><span class=\"line\">    case let .Next(next):</span><br><span class=\"line\">      print(&quot;Next: \\(next)&quot;)</span><br><span class=\"line\">    case let .Failed(error):</span><br><span class=\"line\">      print(&quot;Failed: \\(error)&quot;)</span><br><span class=\"line\">    case .Completed:</span><br><span class=\"line\">      print(&quot;Completed&quot;)</span><br><span class=\"line\">    case .Interrupted:</span><br><span class=\"line\">      print(&quot;Interrupted&quot;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>","date":"2016-08-13T16:00:00.000Z","pv":0,"totalPV":0,"categories":"技术","tags":["算子","ReactiveCocoa"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Hello World","date":"2014-03-01T16:00:00.000Z","_content":"Welcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","source":"_posts/blog/hello-world.md","raw":"---\ntitle: \"Hello World\"\ndate: 2014-03-02\ncategories: 教程\n---\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","slug":"blog/hello-world","published":1,"updated":"2019-06-13T03:26:00.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwu44hnl0018fvujnhmza394","content":"<p>Welcome to <a href=\"http://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"http://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"http://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"http://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"http://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"http://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"http://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"http://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"http://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"http://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"http://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"http://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"http://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"http://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Thu Jun 13 2019 11:26:00 GMT+0800 (CST)","title":"Hello World","path":"blog/hello-world/","eyeCatchImage":null,"excerpt":null,"date":"2014-03-01T16:00:00.000Z","pv":0,"totalPV":0,"categories":"教程","tags":[],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"如何使用curl进行http请求","date":"2016-08-31T16:00:00.000Z","_content":"\n如今的互联网时代，我们在日常开发中经常需要测试HTTP[S] API，有一些含用户界面的工具使用很方便，如Chrome插件Postman等。 但作为码农的我们有时候会觉得带图形的东西还不如命令行下敲一段命令来的简便，今天介绍一款可以在命令行下测试API的工具curl。\n\n<!--more-->\n### curl是什么？\ncurl是一个利用URL语法在命令行下工作的文件传输工具，1997年首次发行。它支持文件上传和下载，所以是综合传输工具，但按传统，习惯称cURL为下载工具。cURL还包含了用于程序开发的libcurl。\ncurl支持的通信协议有FTP、FTPS、HTTP、HTTPS、TFTP、SFTP、Gopher、SCP、Telnet、DICT、FILE、LDAP、LDAPS、IMAP、POP3、SMTP和RTSP。(来自wikipedia)\n\n### HTTP 请求\n#### 1.POST请求\n```\ncurl -H \"Content-Type: application/json\" -X POST -d \\\n  '{\n    \"key1\": \"value1\",\n    \"key2\": \"value2\",\n    ......\n  }' http://localhost:3000/\n```\n> 参数说明：    \n-H: 表示后面紧跟请求头部参数\n-X: 后面紧跟请求指令，如:GET/POST/DELETE/PUT/UPDATE等，没有此参数时默认是GET请求。\n-d: 后紧跟HTTP POST 数据。\n\n#### 2. GET请求\n```\ncurl -X GET http://localhost:3000/\n```\n或者\n```\ncurl http://localhost:3000/\n```\nNOTE:可用此命令查看网页源码，如：\n\n```\ncurl www.google.com\n```\n\n#### 3. DELETE请求\n```\ncurl -X DELETE http://localhost:3000/\n```","source":"_posts/blog/how-to-use-curl.md","raw":"---\ntitle: \"如何使用curl进行http请求\"\ndate: 2016-09-01\ncategories: 工具\ntags: [\"工具\"]\n---\n\n如今的互联网时代，我们在日常开发中经常需要测试HTTP[S] API，有一些含用户界面的工具使用很方便，如Chrome插件Postman等。 但作为码农的我们有时候会觉得带图形的东西还不如命令行下敲一段命令来的简便，今天介绍一款可以在命令行下测试API的工具curl。\n\n<!--more-->\n### curl是什么？\ncurl是一个利用URL语法在命令行下工作的文件传输工具，1997年首次发行。它支持文件上传和下载，所以是综合传输工具，但按传统，习惯称cURL为下载工具。cURL还包含了用于程序开发的libcurl。\ncurl支持的通信协议有FTP、FTPS、HTTP、HTTPS、TFTP、SFTP、Gopher、SCP、Telnet、DICT、FILE、LDAP、LDAPS、IMAP、POP3、SMTP和RTSP。(来自wikipedia)\n\n### HTTP 请求\n#### 1.POST请求\n```\ncurl -H \"Content-Type: application/json\" -X POST -d \\\n  '{\n    \"key1\": \"value1\",\n    \"key2\": \"value2\",\n    ......\n  }' http://localhost:3000/\n```\n> 参数说明：    \n-H: 表示后面紧跟请求头部参数\n-X: 后面紧跟请求指令，如:GET/POST/DELETE/PUT/UPDATE等，没有此参数时默认是GET请求。\n-d: 后紧跟HTTP POST 数据。\n\n#### 2. GET请求\n```\ncurl -X GET http://localhost:3000/\n```\n或者\n```\ncurl http://localhost:3000/\n```\nNOTE:可用此命令查看网页源码，如：\n\n```\ncurl www.google.com\n```\n\n#### 3. DELETE请求\n```\ncurl -X DELETE http://localhost:3000/\n```","slug":"blog/how-to-use-curl","published":1,"updated":"2019-06-13T03:26:00.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwu44hnm001bfvujmytjn2w4","content":"<p>如今的互联网时代，我们在日常开发中经常需要测试HTTP[S] API，有一些含用户界面的工具使用很方便，如Chrome插件Postman等。 但作为码农的我们有时候会觉得带图形的东西还不如命令行下敲一段命令来的简便，今天介绍一款可以在命令行下测试API的工具curl。</p>\n<a id=\"more\"></a>\n<h3 id=\"curl是什么？\"><a href=\"#curl是什么？\" class=\"headerlink\" title=\"curl是什么？\"></a>curl是什么？</h3><p>curl是一个利用URL语法在命令行下工作的文件传输工具，1997年首次发行。它支持文件上传和下载，所以是综合传输工具，但按传统，习惯称cURL为下载工具。cURL还包含了用于程序开发的libcurl。<br>curl支持的通信协议有FTP、FTPS、HTTP、HTTPS、TFTP、SFTP、Gopher、SCP、Telnet、DICT、FILE、LDAP、LDAPS、IMAP、POP3、SMTP和RTSP。(来自wikipedia)</p>\n<h3 id=\"HTTP-请求\"><a href=\"#HTTP-请求\" class=\"headerlink\" title=\"HTTP 请求\"></a>HTTP 请求</h3><h4 id=\"1-POST请求\"><a href=\"#1-POST请求\" class=\"headerlink\" title=\"1.POST请求\"></a>1.POST请求</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -H &quot;Content-Type: application/json&quot; -X POST -d \\</span><br><span class=\"line\">  &apos;&#123;</span><br><span class=\"line\">    &quot;key1&quot;: &quot;value1&quot;,</span><br><span class=\"line\">    &quot;key2&quot;: &quot;value2&quot;,</span><br><span class=\"line\">    ......</span><br><span class=\"line\">  &#125;&apos; http://localhost:3000/</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>参数说明：<br>-H: 表示后面紧跟请求头部参数<br>-X: 后面紧跟请求指令，如:GET/POST/DELETE/PUT/UPDATE等，没有此参数时默认是GET请求。<br>-d: 后紧跟HTTP POST 数据。</p>\n</blockquote>\n<h4 id=\"2-GET请求\"><a href=\"#2-GET请求\" class=\"headerlink\" title=\"2. GET请求\"></a>2. GET请求</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X GET http://localhost:3000/</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://localhost:3000/</span><br></pre></td></tr></table></figure>\n\n<p>NOTE:可用此命令查看网页源码，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl www.google.com</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-DELETE请求\"><a href=\"#3-DELETE请求\" class=\"headerlink\" title=\"3. DELETE请求\"></a>3. DELETE请求</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X DELETE http://localhost:3000/</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>如今的互联网时代，我们在日常开发中经常需要测试HTTP[S] API，有一些含用户界面的工具使用很方便，如Chrome插件Postman等。 但作为码农的我们有时候会觉得带图形的东西还不如命令行下敲一段命令来的简便，今天介绍一款可以在命令行下测试API的工具curl。</p>","more":"<h3 id=\"curl是什么？\"><a href=\"#curl是什么？\" class=\"headerlink\" title=\"curl是什么？\"></a>curl是什么？</h3><p>curl是一个利用URL语法在命令行下工作的文件传输工具，1997年首次发行。它支持文件上传和下载，所以是综合传输工具，但按传统，习惯称cURL为下载工具。cURL还包含了用于程序开发的libcurl。<br>curl支持的通信协议有FTP、FTPS、HTTP、HTTPS、TFTP、SFTP、Gopher、SCP、Telnet、DICT、FILE、LDAP、LDAPS、IMAP、POP3、SMTP和RTSP。(来自wikipedia)</p>\n<h3 id=\"HTTP-请求\"><a href=\"#HTTP-请求\" class=\"headerlink\" title=\"HTTP 请求\"></a>HTTP 请求</h3><h4 id=\"1-POST请求\"><a href=\"#1-POST请求\" class=\"headerlink\" title=\"1.POST请求\"></a>1.POST请求</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -H &quot;Content-Type: application/json&quot; -X POST -d \\</span><br><span class=\"line\">  &apos;&#123;</span><br><span class=\"line\">    &quot;key1&quot;: &quot;value1&quot;,</span><br><span class=\"line\">    &quot;key2&quot;: &quot;value2&quot;,</span><br><span class=\"line\">    ......</span><br><span class=\"line\">  &#125;&apos; http://localhost:3000/</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>参数说明：<br>-H: 表示后面紧跟请求头部参数<br>-X: 后面紧跟请求指令，如:GET/POST/DELETE/PUT/UPDATE等，没有此参数时默认是GET请求。<br>-d: 后紧跟HTTP POST 数据。</p>\n</blockquote>\n<h4 id=\"2-GET请求\"><a href=\"#2-GET请求\" class=\"headerlink\" title=\"2. GET请求\"></a>2. GET请求</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X GET http://localhost:3000/</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://localhost:3000/</span><br></pre></td></tr></table></figure>\n\n<p>NOTE:可用此命令查看网页源码，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl www.google.com</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-DELETE请求\"><a href=\"#3-DELETE请求\" class=\"headerlink\" title=\"3. DELETE请求\"></a>3. DELETE请求</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X DELETE http://localhost:3000/</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Thu Jun 13 2019 11:26:00 GMT+0800 (CST)","title":"如何使用curl进行http请求","path":"blog/how-to-use-curl/","eyeCatchImage":null,"excerpt":"<p>如今的互联网时代，我们在日常开发中经常需要测试HTTP[S] API，有一些含用户界面的工具使用很方便，如Chrome插件Postman等。 但作为码农的我们有时候会觉得带图形的东西还不如命令行下敲一段命令来的简便，今天介绍一款可以在命令行下测试API的工具curl。</p>","date":"2016-08-31T16:00:00.000Z","pv":0,"totalPV":0,"categories":"工具","tags":["工具"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"markdown语法","date":"2015-10-11T16:00:00.000Z","_content":"本文转自[这里](http://blog.izhangbo.cn/掌握这几种markdown语法你就够了/)\n \n使用 Markdown 真的可以写出非常整洁的文档来，看到很多人都在使用，自己也忍不住学习了下。网上有很多讲解 markdown 语法的，资料庞大复杂不够简练，学个基础语法置于这么麻烦么。我做了一些整理，保证你学了这些，就可以使用 markdown 去秀文档了。\n\n```\n1、标题：\n\n#h1级标题\n##h2级标题\n###h3级标题\n####h4级标题\n#####h5级标题\n######h6级标题\n\n2、分割线：三个以上的短线 即可作出分割线(需要空行隔开生效)\n\n3、超链接：[连接名称](网址 , 标题)\n[我是链接名](http://www.izhangbo.cn, “我是标题”)\n[<i class=”icon-refresh”></i> 点我刷新](/sonfilename/)\n\n另一种超链接写法：[链接名][链接代号]\n[here][3]\n然后在别的地方定义 3 这个详细链接信息，[3]: http://www.izhangbo.cn “haode”\n\n4、键盘键\n<kbd>Ctrl+[</kbd> and <kbd>Ctrl+]</kbd>\n\n5、code格式：反引号\nUse the `printf()` function.\n“There is a literal backtick (`) here.针对在代码区段内插入反引号的情况“\n\n6、强调：\n*斜体强调*\n**粗体强调**\n\n7、图片\n![Alt text](/path/to/img.jpg “Optional title”)\n\n8、上角标\n这里加个上角标[^stackedit]\n\n[^stackedit]:角标内容详情\n\n9、使用 icon 图标文字\n<i class=”icon-cog”></i>\n\n10、段落：以一个空行开始，以一个空行结束，中间的就是一个段落。\n\n11、表格：这个稍微有些复杂\nItem | Value\n——– | —\nComputer | $1600\nPhone | $12\nPipe | $1\n\n12、无序列表：使用 – 加一个空格(需要空行隔开生效)\n\n– 无需列表1\n– 无序列表2\n– 无序列表3\n\n13、有序列表：使用 数字 加一个英文句点(需要空行隔开生效)\n1. 有序列表\n2. 有序列表\n3. 有序列表\n4. 有序列表\n5. 有序列表\n\n14、行缩进：使用 “:加空格”\n: 这里有个空格，可进行行缩进。\n\n15、换行缩进形成代码区块\n\n这里先换行，然后缩进4个空格，之后的内容便可以原样显示了，适合用于显示代码内容。直到文本结束或最后一个存在缩进的行为止。\n16、块引用\n>给引用的文本开始位置都加一个 ‘>’，\n>便可组成一个块引用。在块引用中，可以结合\n>其他markdown元素一块使用，比如列表。\n>**强调**\n也可以只在第一行加大于号，其他位置不加。\n\n>- 块引用里使用列表，需要和上面的内容隔开一个空行\n>- 记得加空格哦。\n\n如果你要在 markdown 中使用特殊字符，需要对它们进行转义。\n```\n如果你对 markdown 的来龙去脉很感兴趣，并参与研究，请移步[这里](https://github.com/riku/Markdown-Syntax-CN/blob/master/syntax.md)。\n","source":"_posts/blog/markdown语法.md","raw":"---\ntitle: \"markdown语法\"\ndate: 2015-10-12\ncategories: 教程\ntags: [\"markdown\"]\n---\n本文转自[这里](http://blog.izhangbo.cn/掌握这几种markdown语法你就够了/)\n \n使用 Markdown 真的可以写出非常整洁的文档来，看到很多人都在使用，自己也忍不住学习了下。网上有很多讲解 markdown 语法的，资料庞大复杂不够简练，学个基础语法置于这么麻烦么。我做了一些整理，保证你学了这些，就可以使用 markdown 去秀文档了。\n\n```\n1、标题：\n\n#h1级标题\n##h2级标题\n###h3级标题\n####h4级标题\n#####h5级标题\n######h6级标题\n\n2、分割线：三个以上的短线 即可作出分割线(需要空行隔开生效)\n\n3、超链接：[连接名称](网址 , 标题)\n[我是链接名](http://www.izhangbo.cn, “我是标题”)\n[<i class=”icon-refresh”></i> 点我刷新](/sonfilename/)\n\n另一种超链接写法：[链接名][链接代号]\n[here][3]\n然后在别的地方定义 3 这个详细链接信息，[3]: http://www.izhangbo.cn “haode”\n\n4、键盘键\n<kbd>Ctrl+[</kbd> and <kbd>Ctrl+]</kbd>\n\n5、code格式：反引号\nUse the `printf()` function.\n“There is a literal backtick (`) here.针对在代码区段内插入反引号的情况“\n\n6、强调：\n*斜体强调*\n**粗体强调**\n\n7、图片\n![Alt text](/path/to/img.jpg “Optional title”)\n\n8、上角标\n这里加个上角标[^stackedit]\n\n[^stackedit]:角标内容详情\n\n9、使用 icon 图标文字\n<i class=”icon-cog”></i>\n\n10、段落：以一个空行开始，以一个空行结束，中间的就是一个段落。\n\n11、表格：这个稍微有些复杂\nItem | Value\n——– | —\nComputer | $1600\nPhone | $12\nPipe | $1\n\n12、无序列表：使用 – 加一个空格(需要空行隔开生效)\n\n– 无需列表1\n– 无序列表2\n– 无序列表3\n\n13、有序列表：使用 数字 加一个英文句点(需要空行隔开生效)\n1. 有序列表\n2. 有序列表\n3. 有序列表\n4. 有序列表\n5. 有序列表\n\n14、行缩进：使用 “:加空格”\n: 这里有个空格，可进行行缩进。\n\n15、换行缩进形成代码区块\n\n这里先换行，然后缩进4个空格，之后的内容便可以原样显示了，适合用于显示代码内容。直到文本结束或最后一个存在缩进的行为止。\n16、块引用\n>给引用的文本开始位置都加一个 ‘>’，\n>便可组成一个块引用。在块引用中，可以结合\n>其他markdown元素一块使用，比如列表。\n>**强调**\n也可以只在第一行加大于号，其他位置不加。\n\n>- 块引用里使用列表，需要和上面的内容隔开一个空行\n>- 记得加空格哦。\n\n如果你要在 markdown 中使用特殊字符，需要对它们进行转义。\n```\n如果你对 markdown 的来龙去脉很感兴趣，并参与研究，请移步[这里](https://github.com/riku/Markdown-Syntax-CN/blob/master/syntax.md)。\n","slug":"blog/markdown语法","published":1,"updated":"2019-06-13T03:26:00.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwu44hnn001efvujli1rsg1p","content":"<p>本文转自<a href=\"http://blog.izhangbo.cn/掌握这几种markdown语法你就够了/\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>使用 Markdown 真的可以写出非常整洁的文档来，看到很多人都在使用，自己也忍不住学习了下。网上有很多讲解 markdown 语法的，资料庞大复杂不够简练，学个基础语法置于这么麻烦么。我做了一些整理，保证你学了这些，就可以使用 markdown 去秀文档了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、标题：</span><br><span class=\"line\"></span><br><span class=\"line\">#h1级标题</span><br><span class=\"line\">##h2级标题</span><br><span class=\"line\">###h3级标题</span><br><span class=\"line\">####h4级标题</span><br><span class=\"line\">#####h5级标题</span><br><span class=\"line\">######h6级标题</span><br><span class=\"line\"></span><br><span class=\"line\">2、分割线：三个以上的短线 即可作出分割线(需要空行隔开生效)</span><br><span class=\"line\"></span><br><span class=\"line\">3、超链接：[连接名称](网址 , 标题)</span><br><span class=\"line\">[我是链接名](http://www.izhangbo.cn, “我是标题”)</span><br><span class=\"line\">[&lt;i class=”icon-refresh”&gt;&lt;/i&gt; 点我刷新](/sonfilename/)</span><br><span class=\"line\"></span><br><span class=\"line\">另一种超链接写法：[链接名][链接代号]</span><br><span class=\"line\">[here][3]</span><br><span class=\"line\">然后在别的地方定义 3 这个详细链接信息，[3]: http://www.izhangbo.cn “haode”</span><br><span class=\"line\"></span><br><span class=\"line\">4、键盘键</span><br><span class=\"line\">&lt;kbd&gt;Ctrl+[&lt;/kbd&gt; and &lt;kbd&gt;Ctrl+]&lt;/kbd&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">5、code格式：反引号</span><br><span class=\"line\">Use the `printf()` function.</span><br><span class=\"line\">“There is a literal backtick (`) here.针对在代码区段内插入反引号的情况“</span><br><span class=\"line\"></span><br><span class=\"line\">6、强调：</span><br><span class=\"line\">*斜体强调*</span><br><span class=\"line\">**粗体强调**</span><br><span class=\"line\"></span><br><span class=\"line\">7、图片</span><br><span class=\"line\">![Alt text](/path/to/img.jpg “Optional title”)</span><br><span class=\"line\"></span><br><span class=\"line\">8、上角标</span><br><span class=\"line\">这里加个上角标[^stackedit]</span><br><span class=\"line\"></span><br><span class=\"line\">[^stackedit]:角标内容详情</span><br><span class=\"line\"></span><br><span class=\"line\">9、使用 icon 图标文字</span><br><span class=\"line\">&lt;i class=”icon-cog”&gt;&lt;/i&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">10、段落：以一个空行开始，以一个空行结束，中间的就是一个段落。</span><br><span class=\"line\"></span><br><span class=\"line\">11、表格：这个稍微有些复杂</span><br><span class=\"line\">Item | Value</span><br><span class=\"line\">——– | —</span><br><span class=\"line\">Computer | $1600</span><br><span class=\"line\">Phone | $12</span><br><span class=\"line\">Pipe | $1</span><br><span class=\"line\"></span><br><span class=\"line\">12、无序列表：使用 – 加一个空格(需要空行隔开生效)</span><br><span class=\"line\"></span><br><span class=\"line\">– 无需列表1</span><br><span class=\"line\">– 无序列表2</span><br><span class=\"line\">– 无序列表3</span><br><span class=\"line\"></span><br><span class=\"line\">13、有序列表：使用 数字 加一个英文句点(需要空行隔开生效)</span><br><span class=\"line\">1. 有序列表</span><br><span class=\"line\">2. 有序列表</span><br><span class=\"line\">3. 有序列表</span><br><span class=\"line\">4. 有序列表</span><br><span class=\"line\">5. 有序列表</span><br><span class=\"line\"></span><br><span class=\"line\">14、行缩进：使用 “:加空格”</span><br><span class=\"line\">: 这里有个空格，可进行行缩进。</span><br><span class=\"line\"></span><br><span class=\"line\">15、换行缩进形成代码区块</span><br><span class=\"line\"></span><br><span class=\"line\">这里先换行，然后缩进4个空格，之后的内容便可以原样显示了，适合用于显示代码内容。直到文本结束或最后一个存在缩进的行为止。</span><br><span class=\"line\">16、块引用</span><br><span class=\"line\">&gt;给引用的文本开始位置都加一个 ‘&gt;’，</span><br><span class=\"line\">&gt;便可组成一个块引用。在块引用中，可以结合</span><br><span class=\"line\">&gt;其他markdown元素一块使用，比如列表。</span><br><span class=\"line\">&gt;**强调**</span><br><span class=\"line\">也可以只在第一行加大于号，其他位置不加。</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;- 块引用里使用列表，需要和上面的内容隔开一个空行</span><br><span class=\"line\">&gt;- 记得加空格哦。</span><br><span class=\"line\"></span><br><span class=\"line\">如果你要在 markdown 中使用特殊字符，需要对它们进行转义。</span><br></pre></td></tr></table></figure>\n\n<p>如果你对 markdown 的来龙去脉很感兴趣，并参与研究，请移步<a href=\"https://github.com/riku/Markdown-Syntax-CN/blob/master/syntax.md\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文转自<a href=\"http://blog.izhangbo.cn/掌握这几种markdown语法你就够了/\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>使用 Markdown 真的可以写出非常整洁的文档来，看到很多人都在使用，自己也忍不住学习了下。网上有很多讲解 markdown 语法的，资料庞大复杂不够简练，学个基础语法置于这么麻烦么。我做了一些整理，保证你学了这些，就可以使用 markdown 去秀文档了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、标题：</span><br><span class=\"line\"></span><br><span class=\"line\">#h1级标题</span><br><span class=\"line\">##h2级标题</span><br><span class=\"line\">###h3级标题</span><br><span class=\"line\">####h4级标题</span><br><span class=\"line\">#####h5级标题</span><br><span class=\"line\">######h6级标题</span><br><span class=\"line\"></span><br><span class=\"line\">2、分割线：三个以上的短线 即可作出分割线(需要空行隔开生效)</span><br><span class=\"line\"></span><br><span class=\"line\">3、超链接：[连接名称](网址 , 标题)</span><br><span class=\"line\">[我是链接名](http://www.izhangbo.cn, “我是标题”)</span><br><span class=\"line\">[&lt;i class=”icon-refresh”&gt;&lt;/i&gt; 点我刷新](/sonfilename/)</span><br><span class=\"line\"></span><br><span class=\"line\">另一种超链接写法：[链接名][链接代号]</span><br><span class=\"line\">[here][3]</span><br><span class=\"line\">然后在别的地方定义 3 这个详细链接信息，[3]: http://www.izhangbo.cn “haode”</span><br><span class=\"line\"></span><br><span class=\"line\">4、键盘键</span><br><span class=\"line\">&lt;kbd&gt;Ctrl+[&lt;/kbd&gt; and &lt;kbd&gt;Ctrl+]&lt;/kbd&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">5、code格式：反引号</span><br><span class=\"line\">Use the `printf()` function.</span><br><span class=\"line\">“There is a literal backtick (`) here.针对在代码区段内插入反引号的情况“</span><br><span class=\"line\"></span><br><span class=\"line\">6、强调：</span><br><span class=\"line\">*斜体强调*</span><br><span class=\"line\">**粗体强调**</span><br><span class=\"line\"></span><br><span class=\"line\">7、图片</span><br><span class=\"line\">![Alt text](/path/to/img.jpg “Optional title”)</span><br><span class=\"line\"></span><br><span class=\"line\">8、上角标</span><br><span class=\"line\">这里加个上角标[^stackedit]</span><br><span class=\"line\"></span><br><span class=\"line\">[^stackedit]:角标内容详情</span><br><span class=\"line\"></span><br><span class=\"line\">9、使用 icon 图标文字</span><br><span class=\"line\">&lt;i class=”icon-cog”&gt;&lt;/i&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">10、段落：以一个空行开始，以一个空行结束，中间的就是一个段落。</span><br><span class=\"line\"></span><br><span class=\"line\">11、表格：这个稍微有些复杂</span><br><span class=\"line\">Item | Value</span><br><span class=\"line\">——– | —</span><br><span class=\"line\">Computer | $1600</span><br><span class=\"line\">Phone | $12</span><br><span class=\"line\">Pipe | $1</span><br><span class=\"line\"></span><br><span class=\"line\">12、无序列表：使用 – 加一个空格(需要空行隔开生效)</span><br><span class=\"line\"></span><br><span class=\"line\">– 无需列表1</span><br><span class=\"line\">– 无序列表2</span><br><span class=\"line\">– 无序列表3</span><br><span class=\"line\"></span><br><span class=\"line\">13、有序列表：使用 数字 加一个英文句点(需要空行隔开生效)</span><br><span class=\"line\">1. 有序列表</span><br><span class=\"line\">2. 有序列表</span><br><span class=\"line\">3. 有序列表</span><br><span class=\"line\">4. 有序列表</span><br><span class=\"line\">5. 有序列表</span><br><span class=\"line\"></span><br><span class=\"line\">14、行缩进：使用 “:加空格”</span><br><span class=\"line\">: 这里有个空格，可进行行缩进。</span><br><span class=\"line\"></span><br><span class=\"line\">15、换行缩进形成代码区块</span><br><span class=\"line\"></span><br><span class=\"line\">这里先换行，然后缩进4个空格，之后的内容便可以原样显示了，适合用于显示代码内容。直到文本结束或最后一个存在缩进的行为止。</span><br><span class=\"line\">16、块引用</span><br><span class=\"line\">&gt;给引用的文本开始位置都加一个 ‘&gt;’，</span><br><span class=\"line\">&gt;便可组成一个块引用。在块引用中，可以结合</span><br><span class=\"line\">&gt;其他markdown元素一块使用，比如列表。</span><br><span class=\"line\">&gt;**强调**</span><br><span class=\"line\">也可以只在第一行加大于号，其他位置不加。</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;- 块引用里使用列表，需要和上面的内容隔开一个空行</span><br><span class=\"line\">&gt;- 记得加空格哦。</span><br><span class=\"line\"></span><br><span class=\"line\">如果你要在 markdown 中使用特殊字符，需要对它们进行转义。</span><br></pre></td></tr></table></figure>\n\n<p>如果你对 markdown 的来龙去脉很感兴趣，并参与研究，请移步<a href=\"https://github.com/riku/Markdown-Syntax-CN/blob/master/syntax.md\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Thu Jun 13 2019 11:26:00 GMT+0800 (CST)","title":"markdown语法","path":"blog/markdown语法/","eyeCatchImage":null,"excerpt":null,"date":"2015-10-11T16:00:00.000Z","pv":0,"totalPV":0,"categories":"教程","tags":["markdown"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Pandas","date":"2019-04-10T06:58:49.000Z","draft":false,"_content":"\n### Pandas 速查手册\n\n对于数据科学家，无论是数据分析还是数据挖掘，如果用 Python作为工具，Pandas是一个非常重要的Python包，它不仅提供了很多方法，是的数据处理变得非常简单，同时由于底层使用Numpy，使得数据处理的速度也很快，比Python内置的方法有很大优势。\n\n#### Pandas包导入\n``` python\nimport pandas as pd\nimport numpy as np\n```\n<!--more-->\n\n#### 数据导入\n\n- pd.read\\_csv(filename)  读取csv文件\n- pd.read\\_table(filename) 从限定分隔符的文本文件中导入数据\n- pd.read\\_excel(filename) 从excel文件中导入数据\n- pd.read\\_sql(query, connection\\_object) 从sql表/库中导入数据\n- pd.read\\_json(json\\_string) 从json格式的字符串中导入数据\n\n\n未完待续……\n","source":"_posts/blog/pandas.md","raw":"---\ntitle: \"Pandas\"\ndate: 2019-04-10T22:58:49+08:00\ntags: [\"Pandas\", \"数据分析\"]\ncategories: 技术\ndraft: false\n---\n\n### Pandas 速查手册\n\n对于数据科学家，无论是数据分析还是数据挖掘，如果用 Python作为工具，Pandas是一个非常重要的Python包，它不仅提供了很多方法，是的数据处理变得非常简单，同时由于底层使用Numpy，使得数据处理的速度也很快，比Python内置的方法有很大优势。\n\n#### Pandas包导入\n``` python\nimport pandas as pd\nimport numpy as np\n```\n<!--more-->\n\n#### 数据导入\n\n- pd.read\\_csv(filename)  读取csv文件\n- pd.read\\_table(filename) 从限定分隔符的文本文件中导入数据\n- pd.read\\_excel(filename) 从excel文件中导入数据\n- pd.read\\_sql(query, connection\\_object) 从sql表/库中导入数据\n- pd.read\\_json(json\\_string) 从json格式的字符串中导入数据\n\n\n未完待续……\n","slug":"blog/pandas","published":1,"updated":"2019-06-13T03:26:00.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwu44hno001ifvujyuiupvdr","content":"<h3 id=\"Pandas-速查手册\"><a href=\"#Pandas-速查手册\" class=\"headerlink\" title=\"Pandas 速查手册\"></a>Pandas 速查手册</h3><p>对于数据科学家，无论是数据分析还是数据挖掘，如果用 Python作为工具，Pandas是一个非常重要的Python包，它不仅提供了很多方法，是的数据处理变得非常简单，同时由于底层使用Numpy，使得数据处理的速度也很快，比Python内置的方法有很大优势。</p>\n<h4 id=\"Pandas包导入\"><a href=\"#Pandas包导入\" class=\"headerlink\" title=\"Pandas包导入\"></a>Pandas包导入</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h4 id=\"数据导入\"><a href=\"#数据导入\" class=\"headerlink\" title=\"数据导入\"></a>数据导入</h4><ul>\n<li>pd.read_csv(filename)  读取csv文件</li>\n<li>pd.read_table(filename) 从限定分隔符的文本文件中导入数据</li>\n<li>pd.read_excel(filename) 从excel文件中导入数据</li>\n<li>pd.read_sql(query, connection_object) 从sql表/库中导入数据</li>\n<li>pd.read_json(json_string) 从json格式的字符串中导入数据</li>\n</ul>\n<p>未完待续……</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"Pandas-速查手册\"><a href=\"#Pandas-速查手册\" class=\"headerlink\" title=\"Pandas 速查手册\"></a>Pandas 速查手册</h3><p>对于数据科学家，无论是数据分析还是数据挖掘，如果用 Python作为工具，Pandas是一个非常重要的Python包，它不仅提供了很多方法，是的数据处理变得非常简单，同时由于底层使用Numpy，使得数据处理的速度也很快，比Python内置的方法有很大优势。</p>\n<h4 id=\"Pandas包导入\"><a href=\"#Pandas包导入\" class=\"headerlink\" title=\"Pandas包导入\"></a>Pandas包导入</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br></pre></td></tr></table></figure>","more":"<h4 id=\"数据导入\"><a href=\"#数据导入\" class=\"headerlink\" title=\"数据导入\"></a>数据导入</h4><ul>\n<li>pd.read_csv(filename)  读取csv文件</li>\n<li>pd.read_table(filename) 从限定分隔符的文本文件中导入数据</li>\n<li>pd.read_excel(filename) 从excel文件中导入数据</li>\n<li>pd.read_sql(query, connection_object) 从sql表/库中导入数据</li>\n<li>pd.read_json(json_string) 从json格式的字符串中导入数据</li>\n</ul>\n<p>未完待续……</p>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Thu Jun 13 2019 11:26:00 GMT+0800 (CST)","title":"Pandas","path":"blog/pandas/","eyeCatchImage":null,"excerpt":"<h3 id=\"Pandas-速查手册\"><a href=\"#Pandas-速查手册\" class=\"headerlink\" title=\"Pandas 速查手册\"></a>Pandas 速查手册</h3><p>对于数据科学家，无论是数据分析还是数据挖掘，如果用 Python作为工具，Pandas是一个非常重要的Python包，它不仅提供了很多方法，是的数据处理变得非常简单，同时由于底层使用Numpy，使得数据处理的速度也很快，比Python内置的方法有很大优势。</p>\n<h4 id=\"Pandas包导入\"><a href=\"#Pandas包导入\" class=\"headerlink\" title=\"Pandas包导入\"></a>Pandas包导入</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br></pre></td></tr></table></figure>","date":"2019-04-10T06:58:49.000Z","pv":0,"totalPV":0,"categories":"技术","tags":["Pandas","数据分析"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"“机器学习通用工作流程”","date":"2019-06-10T03:30:22.000Z","draft":false,"_content":"\n机器学习的通用工作流程总结为如下几个步骤：\n \n### 1.   定义问题，收集数据集\n\n首先我们必须先定义多面对的问题。  \n1)  输入的数据是什么？你要预测什么？  \n2) 你面对的是什么类型的问题？二分类问题、多分类问题、标量回归问题  \n向量回归问题还是其他问题，确定问题类型，有助于选择模型架构，损失函数。  \n同时做出如下`假设`：\n\n-  假设输出可以根据输入进行预测\n- 假设可用数据包含足够多的信息，足以学习输入和输出之间的关系\n\n<!--more-->\n\n### 2. 选择衡量成功的指标\n\n要控制一件事物，就需要能够观察它。要取得成功，就必须给出成功的定义：精度？准确率和召回率，客户保留率？衡量成功的指标将指引你选择损失函数，即模型要优化什么。\n对于平衡分类问题，精度和接受者操作特征曲线下面积是常用指标。对于类别不平衡问题，可以使用准确率和召回率。对于排序和多标签分类问题，可以使用平均准确率和召回率。也可以自定义衡量成功的标准。\n\n### 3. 确定评估方法\n  \n一旦明确了目标，必须确定如何衡量当前的进展，以下三种常见的评估方法：  \n1) 留出验证集，数据量很大时可以使用这种方法。  \n2) K折交叉验证， 如果留出验证的样本太少，无法保证可靠性，可以选择这种方法。  \n3) 重复的K折验证，如果可用的数据很少，同时模型评估有需要非常准确，那么应该使用这种方法。  \n只需选择以上三种之一即可。  \n\n### 4. 准备数据\n\n一旦知道了要训练什么，要优化什么以及评估方法，那么就已经准备好训练模型了。但首先应该将数据格式化，使其可以输入到机器学习模型中。  \n1) 将数据格式化为张量  \n2) 这些张量的取值通常应该缩放为较小的值，比如在【-1， 1】区间或者【0， 1】  \n3) 如果不同的特征具有不同的取值范围，那么应该做数据标准化。  \n4) 可能需要做特征工程， 尤其对于小数据集  \n准备好数据数据和目标数据的张量后，就可以开始训练模型了。  \n\n### 5. 开发比基准更好的模型\n\n这一阶段的目标是获得统计功效，即开发一个小型模型，可以打败纯随机的基准。注意，不一定总能获得统计功效，如果尝试多种合理的架构之后仍然无法打败随机基准，那么可能问题的答案并不在输入数据中， 也就是前面的两个假设成立。 这些假设可能是错误的，这样的话需要重新开始，  \n如果一切都顺利，需要选择三个关键参数来构建第一个工作模型。  \n1) 最后一层的激活函数  \n2) 损失函数，损失函数应该匹配要解决的问题类型。  \n3) 优化配置，你要使用那种优化器？学习率是多少？  大多数情况下，rmsprop及其默认的学习率是稳妥  的。  \n\n### 6. 扩大模型规模，开发过拟合的模型\n\n一旦得到了具有统计功效的模型，问题就变成了模型是否足够强大？他是否具有足够多的层和参数来对问题进行建模？  \n通过：  \n1) 添加更多的层  \n2) 让每一层变得更大  \n3) 训练更多的轮次  \n来得到过拟合的模型。  \n要始终监控训练损失和验证损失，以及你所关心的指标的训练值和验证值。如果你发现模型在验证数据上的性能开始下降，那么就出现了过拟合。  \n\n### 7. 模型正则化与调节超参数\n  \n这一步是最费时间的，你将不断的调节模型，在验证数据上评估，再次调节模型，然后重复这一过程。直到模型达到最佳性能。应该尝试以下：  \n1) 添加dropout  \n2) 尝试不同架构，增加或减少层数  \n3) 添加L1或L2正则化  \n4) 尝试不同的超参数（比如美称的单元数或优化器的学习率），以找到最佳配置  \n5) （可选）反复做特征工程，添加新特性或删除美后信息的特征  \n\n\n","source":"_posts/blog/ml-general-workflow.md","raw":"---\ntitle: “机器学习通用工作流程”\ndate: 2019-06-10T19:30:22+08:00\ntags: [“机器学习”, “深度学习”]\ncategories: 技术\ndraft: false\n---\n\n机器学习的通用工作流程总结为如下几个步骤：\n \n### 1.   定义问题，收集数据集\n\n首先我们必须先定义多面对的问题。  \n1)  输入的数据是什么？你要预测什么？  \n2) 你面对的是什么类型的问题？二分类问题、多分类问题、标量回归问题  \n向量回归问题还是其他问题，确定问题类型，有助于选择模型架构，损失函数。  \n同时做出如下`假设`：\n\n-  假设输出可以根据输入进行预测\n- 假设可用数据包含足够多的信息，足以学习输入和输出之间的关系\n\n<!--more-->\n\n### 2. 选择衡量成功的指标\n\n要控制一件事物，就需要能够观察它。要取得成功，就必须给出成功的定义：精度？准确率和召回率，客户保留率？衡量成功的指标将指引你选择损失函数，即模型要优化什么。\n对于平衡分类问题，精度和接受者操作特征曲线下面积是常用指标。对于类别不平衡问题，可以使用准确率和召回率。对于排序和多标签分类问题，可以使用平均准确率和召回率。也可以自定义衡量成功的标准。\n\n### 3. 确定评估方法\n  \n一旦明确了目标，必须确定如何衡量当前的进展，以下三种常见的评估方法：  \n1) 留出验证集，数据量很大时可以使用这种方法。  \n2) K折交叉验证， 如果留出验证的样本太少，无法保证可靠性，可以选择这种方法。  \n3) 重复的K折验证，如果可用的数据很少，同时模型评估有需要非常准确，那么应该使用这种方法。  \n只需选择以上三种之一即可。  \n\n### 4. 准备数据\n\n一旦知道了要训练什么，要优化什么以及评估方法，那么就已经准备好训练模型了。但首先应该将数据格式化，使其可以输入到机器学习模型中。  \n1) 将数据格式化为张量  \n2) 这些张量的取值通常应该缩放为较小的值，比如在【-1， 1】区间或者【0， 1】  \n3) 如果不同的特征具有不同的取值范围，那么应该做数据标准化。  \n4) 可能需要做特征工程， 尤其对于小数据集  \n准备好数据数据和目标数据的张量后，就可以开始训练模型了。  \n\n### 5. 开发比基准更好的模型\n\n这一阶段的目标是获得统计功效，即开发一个小型模型，可以打败纯随机的基准。注意，不一定总能获得统计功效，如果尝试多种合理的架构之后仍然无法打败随机基准，那么可能问题的答案并不在输入数据中， 也就是前面的两个假设成立。 这些假设可能是错误的，这样的话需要重新开始，  \n如果一切都顺利，需要选择三个关键参数来构建第一个工作模型。  \n1) 最后一层的激活函数  \n2) 损失函数，损失函数应该匹配要解决的问题类型。  \n3) 优化配置，你要使用那种优化器？学习率是多少？  大多数情况下，rmsprop及其默认的学习率是稳妥  的。  \n\n### 6. 扩大模型规模，开发过拟合的模型\n\n一旦得到了具有统计功效的模型，问题就变成了模型是否足够强大？他是否具有足够多的层和参数来对问题进行建模？  \n通过：  \n1) 添加更多的层  \n2) 让每一层变得更大  \n3) 训练更多的轮次  \n来得到过拟合的模型。  \n要始终监控训练损失和验证损失，以及你所关心的指标的训练值和验证值。如果你发现模型在验证数据上的性能开始下降，那么就出现了过拟合。  \n\n### 7. 模型正则化与调节超参数\n  \n这一步是最费时间的，你将不断的调节模型，在验证数据上评估，再次调节模型，然后重复这一过程。直到模型达到最佳性能。应该尝试以下：  \n1) 添加dropout  \n2) 尝试不同架构，增加或减少层数  \n3) 添加L1或L2正则化  \n4) 尝试不同的超参数（比如美称的单元数或优化器的学习率），以找到最佳配置  \n5) （可选）反复做特征工程，添加新特性或删除美后信息的特征  \n\n\n","slug":"blog/ml-general-workflow","published":1,"updated":"2019-06-13T03:26:00.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwu44hno001lfvujadn5m18s","content":"<p>机器学习的通用工作流程总结为如下几个步骤：</p>\n<h3 id=\"1-定义问题，收集数据集\"><a href=\"#1-定义问题，收集数据集\" class=\"headerlink\" title=\"1.   定义问题，收集数据集\"></a>1.   定义问题，收集数据集</h3><p>首先我们必须先定义多面对的问题。<br>1)  输入的数据是什么？你要预测什么？<br>2) 你面对的是什么类型的问题？二分类问题、多分类问题、标量回归问题<br>向量回归问题还是其他问题，确定问题类型，有助于选择模型架构，损失函数。<br>同时做出如下<code>假设</code>：</p>\n<ul>\n<li>假设输出可以根据输入进行预测</li>\n<li>假设可用数据包含足够多的信息，足以学习输入和输出之间的关系</li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"2-选择衡量成功的指标\"><a href=\"#2-选择衡量成功的指标\" class=\"headerlink\" title=\"2. 选择衡量成功的指标\"></a>2. 选择衡量成功的指标</h3><p>要控制一件事物，就需要能够观察它。要取得成功，就必须给出成功的定义：精度？准确率和召回率，客户保留率？衡量成功的指标将指引你选择损失函数，即模型要优化什么。<br>对于平衡分类问题，精度和接受者操作特征曲线下面积是常用指标。对于类别不平衡问题，可以使用准确率和召回率。对于排序和多标签分类问题，可以使用平均准确率和召回率。也可以自定义衡量成功的标准。</p>\n<h3 id=\"3-确定评估方法\"><a href=\"#3-确定评估方法\" class=\"headerlink\" title=\"3. 确定评估方法\"></a>3. 确定评估方法</h3><p>一旦明确了目标，必须确定如何衡量当前的进展，以下三种常见的评估方法：<br>1) 留出验证集，数据量很大时可以使用这种方法。<br>2) K折交叉验证， 如果留出验证的样本太少，无法保证可靠性，可以选择这种方法。<br>3) 重复的K折验证，如果可用的数据很少，同时模型评估有需要非常准确，那么应该使用这种方法。<br>只需选择以上三种之一即可。  </p>\n<h3 id=\"4-准备数据\"><a href=\"#4-准备数据\" class=\"headerlink\" title=\"4. 准备数据\"></a>4. 准备数据</h3><p>一旦知道了要训练什么，要优化什么以及评估方法，那么就已经准备好训练模型了。但首先应该将数据格式化，使其可以输入到机器学习模型中。<br>1) 将数据格式化为张量<br>2) 这些张量的取值通常应该缩放为较小的值，比如在【-1， 1】区间或者【0， 1】<br>3) 如果不同的特征具有不同的取值范围，那么应该做数据标准化。<br>4) 可能需要做特征工程， 尤其对于小数据集<br>准备好数据数据和目标数据的张量后，就可以开始训练模型了。  </p>\n<h3 id=\"5-开发比基准更好的模型\"><a href=\"#5-开发比基准更好的模型\" class=\"headerlink\" title=\"5. 开发比基准更好的模型\"></a>5. 开发比基准更好的模型</h3><p>这一阶段的目标是获得统计功效，即开发一个小型模型，可以打败纯随机的基准。注意，不一定总能获得统计功效，如果尝试多种合理的架构之后仍然无法打败随机基准，那么可能问题的答案并不在输入数据中， 也就是前面的两个假设成立。 这些假设可能是错误的，这样的话需要重新开始，<br>如果一切都顺利，需要选择三个关键参数来构建第一个工作模型。<br>1) 最后一层的激活函数<br>2) 损失函数，损失函数应该匹配要解决的问题类型。<br>3) 优化配置，你要使用那种优化器？学习率是多少？  大多数情况下，rmsprop及其默认的学习率是稳妥  的。  </p>\n<h3 id=\"6-扩大模型规模，开发过拟合的模型\"><a href=\"#6-扩大模型规模，开发过拟合的模型\" class=\"headerlink\" title=\"6. 扩大模型规模，开发过拟合的模型\"></a>6. 扩大模型规模，开发过拟合的模型</h3><p>一旦得到了具有统计功效的模型，问题就变成了模型是否足够强大？他是否具有足够多的层和参数来对问题进行建模？<br>通过：<br>1) 添加更多的层<br>2) 让每一层变得更大<br>3) 训练更多的轮次<br>来得到过拟合的模型。<br>要始终监控训练损失和验证损失，以及你所关心的指标的训练值和验证值。如果你发现模型在验证数据上的性能开始下降，那么就出现了过拟合。  </p>\n<h3 id=\"7-模型正则化与调节超参数\"><a href=\"#7-模型正则化与调节超参数\" class=\"headerlink\" title=\"7. 模型正则化与调节超参数\"></a>7. 模型正则化与调节超参数</h3><p>这一步是最费时间的，你将不断的调节模型，在验证数据上评估，再次调节模型，然后重复这一过程。直到模型达到最佳性能。应该尝试以下：<br>1) 添加dropout<br>2) 尝试不同架构，增加或减少层数<br>3) 添加L1或L2正则化<br>4) 尝试不同的超参数（比如美称的单元数或优化器的学习率），以找到最佳配置<br>5) （可选）反复做特征工程，添加新特性或删除美后信息的特征  </p>\n","site":{"data":{}},"excerpt":"<p>机器学习的通用工作流程总结为如下几个步骤：</p>\n<h3 id=\"1-定义问题，收集数据集\"><a href=\"#1-定义问题，收集数据集\" class=\"headerlink\" title=\"1.   定义问题，收集数据集\"></a>1.   定义问题，收集数据集</h3><p>首先我们必须先定义多面对的问题。<br>1)  输入的数据是什么？你要预测什么？<br>2) 你面对的是什么类型的问题？二分类问题、多分类问题、标量回归问题<br>向量回归问题还是其他问题，确定问题类型，有助于选择模型架构，损失函数。<br>同时做出如下<code>假设</code>：</p>\n<ul>\n<li>假设输出可以根据输入进行预测</li>\n<li>假设可用数据包含足够多的信息，足以学习输入和输出之间的关系</li>\n</ul>","more":"<h3 id=\"2-选择衡量成功的指标\"><a href=\"#2-选择衡量成功的指标\" class=\"headerlink\" title=\"2. 选择衡量成功的指标\"></a>2. 选择衡量成功的指标</h3><p>要控制一件事物，就需要能够观察它。要取得成功，就必须给出成功的定义：精度？准确率和召回率，客户保留率？衡量成功的指标将指引你选择损失函数，即模型要优化什么。<br>对于平衡分类问题，精度和接受者操作特征曲线下面积是常用指标。对于类别不平衡问题，可以使用准确率和召回率。对于排序和多标签分类问题，可以使用平均准确率和召回率。也可以自定义衡量成功的标准。</p>\n<h3 id=\"3-确定评估方法\"><a href=\"#3-确定评估方法\" class=\"headerlink\" title=\"3. 确定评估方法\"></a>3. 确定评估方法</h3><p>一旦明确了目标，必须确定如何衡量当前的进展，以下三种常见的评估方法：<br>1) 留出验证集，数据量很大时可以使用这种方法。<br>2) K折交叉验证， 如果留出验证的样本太少，无法保证可靠性，可以选择这种方法。<br>3) 重复的K折验证，如果可用的数据很少，同时模型评估有需要非常准确，那么应该使用这种方法。<br>只需选择以上三种之一即可。  </p>\n<h3 id=\"4-准备数据\"><a href=\"#4-准备数据\" class=\"headerlink\" title=\"4. 准备数据\"></a>4. 准备数据</h3><p>一旦知道了要训练什么，要优化什么以及评估方法，那么就已经准备好训练模型了。但首先应该将数据格式化，使其可以输入到机器学习模型中。<br>1) 将数据格式化为张量<br>2) 这些张量的取值通常应该缩放为较小的值，比如在【-1， 1】区间或者【0， 1】<br>3) 如果不同的特征具有不同的取值范围，那么应该做数据标准化。<br>4) 可能需要做特征工程， 尤其对于小数据集<br>准备好数据数据和目标数据的张量后，就可以开始训练模型了。  </p>\n<h3 id=\"5-开发比基准更好的模型\"><a href=\"#5-开发比基准更好的模型\" class=\"headerlink\" title=\"5. 开发比基准更好的模型\"></a>5. 开发比基准更好的模型</h3><p>这一阶段的目标是获得统计功效，即开发一个小型模型，可以打败纯随机的基准。注意，不一定总能获得统计功效，如果尝试多种合理的架构之后仍然无法打败随机基准，那么可能问题的答案并不在输入数据中， 也就是前面的两个假设成立。 这些假设可能是错误的，这样的话需要重新开始，<br>如果一切都顺利，需要选择三个关键参数来构建第一个工作模型。<br>1) 最后一层的激活函数<br>2) 损失函数，损失函数应该匹配要解决的问题类型。<br>3) 优化配置，你要使用那种优化器？学习率是多少？  大多数情况下，rmsprop及其默认的学习率是稳妥  的。  </p>\n<h3 id=\"6-扩大模型规模，开发过拟合的模型\"><a href=\"#6-扩大模型规模，开发过拟合的模型\" class=\"headerlink\" title=\"6. 扩大模型规模，开发过拟合的模型\"></a>6. 扩大模型规模，开发过拟合的模型</h3><p>一旦得到了具有统计功效的模型，问题就变成了模型是否足够强大？他是否具有足够多的层和参数来对问题进行建模？<br>通过：<br>1) 添加更多的层<br>2) 让每一层变得更大<br>3) 训练更多的轮次<br>来得到过拟合的模型。<br>要始终监控训练损失和验证损失，以及你所关心的指标的训练值和验证值。如果你发现模型在验证数据上的性能开始下降，那么就出现了过拟合。  </p>\n<h3 id=\"7-模型正则化与调节超参数\"><a href=\"#7-模型正则化与调节超参数\" class=\"headerlink\" title=\"7. 模型正则化与调节超参数\"></a>7. 模型正则化与调节超参数</h3><p>这一步是最费时间的，你将不断的调节模型，在验证数据上评估，再次调节模型，然后重复这一过程。直到模型达到最佳性能。应该尝试以下：<br>1) 添加dropout<br>2) 尝试不同架构，增加或减少层数<br>3) 添加L1或L2正则化<br>4) 尝试不同的超参数（比如美称的单元数或优化器的学习率），以找到最佳配置<br>5) （可选）反复做特征工程，添加新特性或删除美后信息的特征  </p>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Thu Jun 13 2019 11:26:00 GMT+0800 (CST)","title":"“机器学习通用工作流程”","path":"blog/ml-general-workflow/","eyeCatchImage":null,"excerpt":"<p>机器学习的通用工作流程总结为如下几个步骤：</p>\n<h3 id=\"1-定义问题，收集数据集\"><a href=\"#1-定义问题，收集数据集\" class=\"headerlink\" title=\"1.   定义问题，收集数据集\"></a>1.   定义问题，收集数据集</h3><p>首先我们必须先定义多面对的问题。<br>1)  输入的数据是什么？你要预测什么？<br>2) 你面对的是什么类型的问题？二分类问题、多分类问题、标量回归问题<br>向量回归问题还是其他问题，确定问题类型，有助于选择模型架构，损失函数。<br>同时做出如下<code>假设</code>：</p>\n<ul>\n<li>假设输出可以根据输入进行预测</li>\n<li>假设可用数据包含足够多的信息，足以学习输入和输出之间的关系</li>\n</ul>","date":"2019-06-10T03:30:22.000Z","pv":0,"totalPV":0,"categories":"技术","tags":["“机器学习”","“深度学习”"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"如何解决retain cycle","date":"2015-10-27T16:00:00.000Z","_content":"\n当遇到retain cycle是，一般我们的解决办法是让一个变为weak reference，而选择让那个变成weak reference是个问题。 我们可以把存在retain cycle的两个对象看成是 父－子 关系。 在这个关系当中，父可以拥有子，但是子不可以拥有父，因此，在这个问题中，我们可以把作为 父 的对象定义为strong， 而作为 子 的对象定义为weak，这样就解决了retain cycle。\n","source":"_posts/blog/the-solution-of-retain-cycle.md","raw":"---\ntitle: \"如何解决retain cycle\"\ndate: 2015-10-28\ncategories: 技术\ntags: [\"iOS\"]\n---\n\n当遇到retain cycle是，一般我们的解决办法是让一个变为weak reference，而选择让那个变成weak reference是个问题。 我们可以把存在retain cycle的两个对象看成是 父－子 关系。 在这个关系当中，父可以拥有子，但是子不可以拥有父，因此，在这个问题中，我们可以把作为 父 的对象定义为strong， 而作为 子 的对象定义为weak，这样就解决了retain cycle。\n","slug":"blog/the-solution-of-retain-cycle","published":1,"updated":"2019-06-13T03:26:00.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwu44hnp001ofvujdaa3zdx0","content":"<p>当遇到retain cycle是，一般我们的解决办法是让一个变为weak reference，而选择让那个变成weak reference是个问题。 我们可以把存在retain cycle的两个对象看成是 父－子 关系。 在这个关系当中，父可以拥有子，但是子不可以拥有父，因此，在这个问题中，我们可以把作为 父 的对象定义为strong， 而作为 子 的对象定义为weak，这样就解决了retain cycle。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>当遇到retain cycle是，一般我们的解决办法是让一个变为weak reference，而选择让那个变成weak reference是个问题。 我们可以把存在retain cycle的两个对象看成是 父－子 关系。 在这个关系当中，父可以拥有子，但是子不可以拥有父，因此，在这个问题中，我们可以把作为 父 的对象定义为strong， 而作为 子 的对象定义为weak，这样就解决了retain cycle。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Thu Jun 13 2019 11:26:00 GMT+0800 (CST)","title":"如何解决retain cycle","path":"blog/the-solution-of-retain-cycle/","eyeCatchImage":null,"excerpt":null,"date":"2015-10-27T16:00:00.000Z","pv":0,"totalPV":0,"categories":"技术","tags":["iOS"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"<<自控力>>读书笔记","date":"2016-05-19T16:00:00.000Z","_content":"\n### 一. 意志力是什么？\n**意志力其实是“我要做”，“我不要”和“我想要”这三种力量。**\n\n深入剖析:   \n\n- 更难的事是什么？想象你正面临一个意志力挑战，更难的事是什么？它为什么这么困难？\n- 认清两个自我。你的意志力挑战是，如何描述想抗衡的两个自我？冲动的你想要什么？明智的你想要什么？    \n\n意志力实验:\n\n- 记录你的意志力选择。至少一天，注意观察你做的关于意志力的决定。\n- 5分钟大脑训练冥想。在脑海中默念“呼”和“吸”，把注意力集中在呼吸上。\n当你走神的时候，重新集中注意力。\n\n<!--more--> \n\n### 二. 意志力的本能：人生来就能抵制奶酪蛋糕的诱惑\n\n**意志力是种生理本能，它和压力一样，通过不断进化来保护我们不受自身伤害。**\n\n深入剖析:\n\n- 什么是威胁？对你的意志力挑战来说，什么是需要克制的内在冲动？\n- 压力和自控，试着找出持续一整天或以整周德压力，看看它对你的自控力产生怎样的影响。你有过强烈的欲望吗？你发过脾气吗？你把要做的事拖到明天吗？\n\n\n意志力实验:\n\n- 呼吸出你的自控力。把你的呼吸降到每分钟4～6次，将身体调整到适合自控的生理状态。\n- 5分钟给意志力加油。出门活动，哪怕是只在周围转转，也能减少压力，改善心情，提供动力。\n- 睡眠。打盹和补觉可以消除睡眠不足的影响。\n- 放松能让你恢复意志力储备。躺下，深呼吸，让“放松的生理反应”帮你从自控和压力造成的疲惫中恢复过来。\n\n### 三. 累到无力抵抗，为什么自控力和肌肉一样有极限？\n**自控力像肌肉一样有极限，自控力用得太多会疲惫，但坚持锻炼能增强自控力。**\n\n深入剖析:\n\n- 意志力的上下波动。 本周，记录你的自控力，特别注意什么时候你的意志力强，什么时候你容易放弃。\n- 你的疲惫感是真的吗？下次你觉得自己太“疲惫”而无法自控的时候，看看自己能不能挺过第一波疲惫，向前迈出一步。\n\n意志力实验:\n\n- 意志力饮食。确保你的身体摄入了足够的食物，能为你提供足够的能量。\n- 意志力锻炼。本周，选择一件事做（“我想要”的力量）或不做（“我不想”的力量），或者纪录一件你不曾关注的事情，以此锻炼你的“自控力肌肉”。\n- 发现你的“我想要”的力量。发现自己最重要的“我想要”的力量，也就是你脆弱的时候给你力量的东西，每当你面对诱惑，想要放弃的时候，想一想这个东西。\n\n### 四. 容忍罪恶：为何善行之后会有恶行？\n**当我们将意志力挑战看成衡量道德水平的标准时，善行就会允许我们做坏事，为了能更好的自控，我们要忘掉美德，关注目标和价值观。**\n\n深入剖析:\n\n- 善与恶：当你的意志力挑战成功时，你会不会告诉自己你很“好”，然后允许自己做一些“坏”事。\n- 你是否向明天赊账？你是否会告诉自己明天会弥补今天的过错？如果是这样的话，你是否真的弥补上了？\n- 光环效应：你是不是看到了坏东西好的一面，如折扣省钱，零脂肪，保护环境？\n- 你觉得自己是谁？当你想到你的意志力挑战时，你觉得哪部分的你才是“真实”的你？是想追求目标的你，还\n是需要被控制的你？\n\n意志力实验:\n\n- 明天和今天毫无区别，当你想改变行为的时候，试着减小行为的变化性，而不是减少某种行为。\n- 取消许可，牢记理由。下一回，当你发现自己在用曾经的善行为放纵辩护的时候，停下来想一想做“好”事的\n原因，而不是你应不应该得到奖励。","source":"_posts/blog/自控力读书笔记.md","raw":"---\ntitle: \"<<自控力>>读书笔记\"\ndate: 2016-05-20\ncategories: 笔记\ntags: [\"读书笔记\"]\n---\n\n### 一. 意志力是什么？\n**意志力其实是“我要做”，“我不要”和“我想要”这三种力量。**\n\n深入剖析:   \n\n- 更难的事是什么？想象你正面临一个意志力挑战，更难的事是什么？它为什么这么困难？\n- 认清两个自我。你的意志力挑战是，如何描述想抗衡的两个自我？冲动的你想要什么？明智的你想要什么？    \n\n意志力实验:\n\n- 记录你的意志力选择。至少一天，注意观察你做的关于意志力的决定。\n- 5分钟大脑训练冥想。在脑海中默念“呼”和“吸”，把注意力集中在呼吸上。\n当你走神的时候，重新集中注意力。\n\n<!--more--> \n\n### 二. 意志力的本能：人生来就能抵制奶酪蛋糕的诱惑\n\n**意志力是种生理本能，它和压力一样，通过不断进化来保护我们不受自身伤害。**\n\n深入剖析:\n\n- 什么是威胁？对你的意志力挑战来说，什么是需要克制的内在冲动？\n- 压力和自控，试着找出持续一整天或以整周德压力，看看它对你的自控力产生怎样的影响。你有过强烈的欲望吗？你发过脾气吗？你把要做的事拖到明天吗？\n\n\n意志力实验:\n\n- 呼吸出你的自控力。把你的呼吸降到每分钟4～6次，将身体调整到适合自控的生理状态。\n- 5分钟给意志力加油。出门活动，哪怕是只在周围转转，也能减少压力，改善心情，提供动力。\n- 睡眠。打盹和补觉可以消除睡眠不足的影响。\n- 放松能让你恢复意志力储备。躺下，深呼吸，让“放松的生理反应”帮你从自控和压力造成的疲惫中恢复过来。\n\n### 三. 累到无力抵抗，为什么自控力和肌肉一样有极限？\n**自控力像肌肉一样有极限，自控力用得太多会疲惫，但坚持锻炼能增强自控力。**\n\n深入剖析:\n\n- 意志力的上下波动。 本周，记录你的自控力，特别注意什么时候你的意志力强，什么时候你容易放弃。\n- 你的疲惫感是真的吗？下次你觉得自己太“疲惫”而无法自控的时候，看看自己能不能挺过第一波疲惫，向前迈出一步。\n\n意志力实验:\n\n- 意志力饮食。确保你的身体摄入了足够的食物，能为你提供足够的能量。\n- 意志力锻炼。本周，选择一件事做（“我想要”的力量）或不做（“我不想”的力量），或者纪录一件你不曾关注的事情，以此锻炼你的“自控力肌肉”。\n- 发现你的“我想要”的力量。发现自己最重要的“我想要”的力量，也就是你脆弱的时候给你力量的东西，每当你面对诱惑，想要放弃的时候，想一想这个东西。\n\n### 四. 容忍罪恶：为何善行之后会有恶行？\n**当我们将意志力挑战看成衡量道德水平的标准时，善行就会允许我们做坏事，为了能更好的自控，我们要忘掉美德，关注目标和价值观。**\n\n深入剖析:\n\n- 善与恶：当你的意志力挑战成功时，你会不会告诉自己你很“好”，然后允许自己做一些“坏”事。\n- 你是否向明天赊账？你是否会告诉自己明天会弥补今天的过错？如果是这样的话，你是否真的弥补上了？\n- 光环效应：你是不是看到了坏东西好的一面，如折扣省钱，零脂肪，保护环境？\n- 你觉得自己是谁？当你想到你的意志力挑战时，你觉得哪部分的你才是“真实”的你？是想追求目标的你，还\n是需要被控制的你？\n\n意志力实验:\n\n- 明天和今天毫无区别，当你想改变行为的时候，试着减小行为的变化性，而不是减少某种行为。\n- 取消许可，牢记理由。下一回，当你发现自己在用曾经的善行为放纵辩护的时候，停下来想一想做“好”事的\n原因，而不是你应不应该得到奖励。","slug":"blog/自控力读书笔记","published":1,"updated":"2019-06-13T03:26:00.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwu44hnq001rfvuj7z3r124q","content":"<h3 id=\"一-意志力是什么？\"><a href=\"#一-意志力是什么？\" class=\"headerlink\" title=\"一. 意志力是什么？\"></a>一. 意志力是什么？</h3><p><strong>意志力其实是“我要做”，“我不要”和“我想要”这三种力量。</strong></p>\n<p>深入剖析:   </p>\n<ul>\n<li>更难的事是什么？想象你正面临一个意志力挑战，更难的事是什么？它为什么这么困难？</li>\n<li>认清两个自我。你的意志力挑战是，如何描述想抗衡的两个自我？冲动的你想要什么？明智的你想要什么？    </li>\n</ul>\n<p>意志力实验:</p>\n<ul>\n<li>记录你的意志力选择。至少一天，注意观察你做的关于意志力的决定。</li>\n<li>5分钟大脑训练冥想。在脑海中默念“呼”和“吸”，把注意力集中在呼吸上。<br>当你走神的时候，重新集中注意力。</li>\n</ul>\n<a id=\"more\"></a> \n\n<h3 id=\"二-意志力的本能：人生来就能抵制奶酪蛋糕的诱惑\"><a href=\"#二-意志力的本能：人生来就能抵制奶酪蛋糕的诱惑\" class=\"headerlink\" title=\"二. 意志力的本能：人生来就能抵制奶酪蛋糕的诱惑\"></a>二. 意志力的本能：人生来就能抵制奶酪蛋糕的诱惑</h3><p><strong>意志力是种生理本能，它和压力一样，通过不断进化来保护我们不受自身伤害。</strong></p>\n<p>深入剖析:</p>\n<ul>\n<li>什么是威胁？对你的意志力挑战来说，什么是需要克制的内在冲动？</li>\n<li>压力和自控，试着找出持续一整天或以整周德压力，看看它对你的自控力产生怎样的影响。你有过强烈的欲望吗？你发过脾气吗？你把要做的事拖到明天吗？</li>\n</ul>\n<p>意志力实验:</p>\n<ul>\n<li>呼吸出你的自控力。把你的呼吸降到每分钟4～6次，将身体调整到适合自控的生理状态。</li>\n<li>5分钟给意志力加油。出门活动，哪怕是只在周围转转，也能减少压力，改善心情，提供动力。</li>\n<li>睡眠。打盹和补觉可以消除睡眠不足的影响。</li>\n<li>放松能让你恢复意志力储备。躺下，深呼吸，让“放松的生理反应”帮你从自控和压力造成的疲惫中恢复过来。</li>\n</ul>\n<h3 id=\"三-累到无力抵抗，为什么自控力和肌肉一样有极限？\"><a href=\"#三-累到无力抵抗，为什么自控力和肌肉一样有极限？\" class=\"headerlink\" title=\"三. 累到无力抵抗，为什么自控力和肌肉一样有极限？\"></a>三. 累到无力抵抗，为什么自控力和肌肉一样有极限？</h3><p><strong>自控力像肌肉一样有极限，自控力用得太多会疲惫，但坚持锻炼能增强自控力。</strong></p>\n<p>深入剖析:</p>\n<ul>\n<li>意志力的上下波动。 本周，记录你的自控力，特别注意什么时候你的意志力强，什么时候你容易放弃。</li>\n<li>你的疲惫感是真的吗？下次你觉得自己太“疲惫”而无法自控的时候，看看自己能不能挺过第一波疲惫，向前迈出一步。</li>\n</ul>\n<p>意志力实验:</p>\n<ul>\n<li>意志力饮食。确保你的身体摄入了足够的食物，能为你提供足够的能量。</li>\n<li>意志力锻炼。本周，选择一件事做（“我想要”的力量）或不做（“我不想”的力量），或者纪录一件你不曾关注的事情，以此锻炼你的“自控力肌肉”。</li>\n<li>发现你的“我想要”的力量。发现自己最重要的“我想要”的力量，也就是你脆弱的时候给你力量的东西，每当你面对诱惑，想要放弃的时候，想一想这个东西。</li>\n</ul>\n<h3 id=\"四-容忍罪恶：为何善行之后会有恶行？\"><a href=\"#四-容忍罪恶：为何善行之后会有恶行？\" class=\"headerlink\" title=\"四. 容忍罪恶：为何善行之后会有恶行？\"></a>四. 容忍罪恶：为何善行之后会有恶行？</h3><p><strong>当我们将意志力挑战看成衡量道德水平的标准时，善行就会允许我们做坏事，为了能更好的自控，我们要忘掉美德，关注目标和价值观。</strong></p>\n<p>深入剖析:</p>\n<ul>\n<li>善与恶：当你的意志力挑战成功时，你会不会告诉自己你很“好”，然后允许自己做一些“坏”事。</li>\n<li>你是否向明天赊账？你是否会告诉自己明天会弥补今天的过错？如果是这样的话，你是否真的弥补上了？</li>\n<li>光环效应：你是不是看到了坏东西好的一面，如折扣省钱，零脂肪，保护环境？</li>\n<li>你觉得自己是谁？当你想到你的意志力挑战时，你觉得哪部分的你才是“真实”的你？是想追求目标的你，还<br>是需要被控制的你？</li>\n</ul>\n<p>意志力实验:</p>\n<ul>\n<li>明天和今天毫无区别，当你想改变行为的时候，试着减小行为的变化性，而不是减少某种行为。</li>\n<li>取消许可，牢记理由。下一回，当你发现自己在用曾经的善行为放纵辩护的时候，停下来想一想做“好”事的<br>原因，而不是你应不应该得到奖励。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"一-意志力是什么？\"><a href=\"#一-意志力是什么？\" class=\"headerlink\" title=\"一. 意志力是什么？\"></a>一. 意志力是什么？</h3><p><strong>意志力其实是“我要做”，“我不要”和“我想要”这三种力量。</strong></p>\n<p>深入剖析:   </p>\n<ul>\n<li>更难的事是什么？想象你正面临一个意志力挑战，更难的事是什么？它为什么这么困难？</li>\n<li>认清两个自我。你的意志力挑战是，如何描述想抗衡的两个自我？冲动的你想要什么？明智的你想要什么？    </li>\n</ul>\n<p>意志力实验:</p>\n<ul>\n<li>记录你的意志力选择。至少一天，注意观察你做的关于意志力的决定。</li>\n<li>5分钟大脑训练冥想。在脑海中默念“呼”和“吸”，把注意力集中在呼吸上。<br>当你走神的时候，重新集中注意力。</li>\n</ul>","more":"<h3 id=\"二-意志力的本能：人生来就能抵制奶酪蛋糕的诱惑\"><a href=\"#二-意志力的本能：人生来就能抵制奶酪蛋糕的诱惑\" class=\"headerlink\" title=\"二. 意志力的本能：人生来就能抵制奶酪蛋糕的诱惑\"></a>二. 意志力的本能：人生来就能抵制奶酪蛋糕的诱惑</h3><p><strong>意志力是种生理本能，它和压力一样，通过不断进化来保护我们不受自身伤害。</strong></p>\n<p>深入剖析:</p>\n<ul>\n<li>什么是威胁？对你的意志力挑战来说，什么是需要克制的内在冲动？</li>\n<li>压力和自控，试着找出持续一整天或以整周德压力，看看它对你的自控力产生怎样的影响。你有过强烈的欲望吗？你发过脾气吗？你把要做的事拖到明天吗？</li>\n</ul>\n<p>意志力实验:</p>\n<ul>\n<li>呼吸出你的自控力。把你的呼吸降到每分钟4～6次，将身体调整到适合自控的生理状态。</li>\n<li>5分钟给意志力加油。出门活动，哪怕是只在周围转转，也能减少压力，改善心情，提供动力。</li>\n<li>睡眠。打盹和补觉可以消除睡眠不足的影响。</li>\n<li>放松能让你恢复意志力储备。躺下，深呼吸，让“放松的生理反应”帮你从自控和压力造成的疲惫中恢复过来。</li>\n</ul>\n<h3 id=\"三-累到无力抵抗，为什么自控力和肌肉一样有极限？\"><a href=\"#三-累到无力抵抗，为什么自控力和肌肉一样有极限？\" class=\"headerlink\" title=\"三. 累到无力抵抗，为什么自控力和肌肉一样有极限？\"></a>三. 累到无力抵抗，为什么自控力和肌肉一样有极限？</h3><p><strong>自控力像肌肉一样有极限，自控力用得太多会疲惫，但坚持锻炼能增强自控力。</strong></p>\n<p>深入剖析:</p>\n<ul>\n<li>意志力的上下波动。 本周，记录你的自控力，特别注意什么时候你的意志力强，什么时候你容易放弃。</li>\n<li>你的疲惫感是真的吗？下次你觉得自己太“疲惫”而无法自控的时候，看看自己能不能挺过第一波疲惫，向前迈出一步。</li>\n</ul>\n<p>意志力实验:</p>\n<ul>\n<li>意志力饮食。确保你的身体摄入了足够的食物，能为你提供足够的能量。</li>\n<li>意志力锻炼。本周，选择一件事做（“我想要”的力量）或不做（“我不想”的力量），或者纪录一件你不曾关注的事情，以此锻炼你的“自控力肌肉”。</li>\n<li>发现你的“我想要”的力量。发现自己最重要的“我想要”的力量，也就是你脆弱的时候给你力量的东西，每当你面对诱惑，想要放弃的时候，想一想这个东西。</li>\n</ul>\n<h3 id=\"四-容忍罪恶：为何善行之后会有恶行？\"><a href=\"#四-容忍罪恶：为何善行之后会有恶行？\" class=\"headerlink\" title=\"四. 容忍罪恶：为何善行之后会有恶行？\"></a>四. 容忍罪恶：为何善行之后会有恶行？</h3><p><strong>当我们将意志力挑战看成衡量道德水平的标准时，善行就会允许我们做坏事，为了能更好的自控，我们要忘掉美德，关注目标和价值观。</strong></p>\n<p>深入剖析:</p>\n<ul>\n<li>善与恶：当你的意志力挑战成功时，你会不会告诉自己你很“好”，然后允许自己做一些“坏”事。</li>\n<li>你是否向明天赊账？你是否会告诉自己明天会弥补今天的过错？如果是这样的话，你是否真的弥补上了？</li>\n<li>光环效应：你是不是看到了坏东西好的一面，如折扣省钱，零脂肪，保护环境？</li>\n<li>你觉得自己是谁？当你想到你的意志力挑战时，你觉得哪部分的你才是“真实”的你？是想追求目标的你，还<br>是需要被控制的你？</li>\n</ul>\n<p>意志力实验:</p>\n<ul>\n<li>明天和今天毫无区别，当你想改变行为的时候，试着减小行为的变化性，而不是减少某种行为。</li>\n<li>取消许可，牢记理由。下一回，当你发现自己在用曾经的善行为放纵辩护的时候，停下来想一想做“好”事的<br>原因，而不是你应不应该得到奖励。</li>\n</ul>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Thu Jun 13 2019 11:26:00 GMT+0800 (CST)","title":"<<自控力>>读书笔记","path":"blog/自控力读书笔记/","eyeCatchImage":null,"excerpt":"<h3 id=\"一-意志力是什么？\"><a href=\"#一-意志力是什么？\" class=\"headerlink\" title=\"一. 意志力是什么？\"></a>一. 意志力是什么？</h3><p><strong>意志力其实是“我要做”，“我不要”和“我想要”这三种力量。</strong></p>\n<p>深入剖析:   </p>\n<ul>\n<li>更难的事是什么？想象你正面临一个意志力挑战，更难的事是什么？它为什么这么困难？</li>\n<li>认清两个自我。你的意志力挑战是，如何描述想抗衡的两个自我？冲动的你想要什么？明智的你想要什么？    </li>\n</ul>\n<p>意志力实验:</p>\n<ul>\n<li>记录你的意志力选择。至少一天，注意观察你做的关于意志力的决定。</li>\n<li>5分钟大脑训练冥想。在脑海中默念“呼”和“吸”，把注意力集中在呼吸上。<br>当你走神的时候，重新集中注意力。</li>\n</ul>","date":"2016-05-19T16:00:00.000Z","pv":0,"totalPV":0,"categories":"笔记","tags":["读书笔记"],"internalLinks":[],"keywords":[],"keywordsLength":0}}],"PostAsset":[],"PostCategory":[{"post_id":"cjwu44hna000afvuj5r4li4mb","category_id":"cjwu44hn80007fvuj5n3i9aj5","_id":"cjwu44hnf000hfvujpdzbaz9o"},{"post_id":"cjwu44hn30003fvujfoj35c76","category_id":"cjwu44hn80007fvuj5n3i9aj5","_id":"cjwu44hng000lfvuj62624tur"},{"post_id":"cjwu44hnd000ffvuj0vbpspvw","category_id":"cjwu44hn80007fvuj5n3i9aj5","_id":"cjwu44hng000nfvujgbjhutyt"},{"post_id":"cjwu44hn70005fvujeywbm80p","category_id":"cjwu44hn80007fvuj5n3i9aj5","_id":"cjwu44hnh000rfvujs36ofijc"},{"post_id":"cjwu44hne000gfvujrxyz0qk0","category_id":"cjwu44hn80007fvuj5n3i9aj5","_id":"cjwu44hni000ufvujwvrwcdie"},{"post_id":"cjwu44hn90009fvuj2qzku8gs","category_id":"cjwu44hn80007fvuj5n3i9aj5","_id":"cjwu44hnj000zfvuj1hcyz1t1"},{"post_id":"cjwu44hng000mfvujvo8z89xs","category_id":"cjwu44hn80007fvuj5n3i9aj5","_id":"cjwu44hnk0011fvuj0nf121l0"},{"post_id":"cjwu44hnb000bfvujomwpg38w","category_id":"cjwu44hng000ofvuj3avkgnd1","_id":"cjwu44hnk0014fvujxl5u4cyk"},{"post_id":"cjwu44hni000tfvujv9q2wj0s","category_id":"cjwu44hn80007fvuj5n3i9aj5","_id":"cjwu44hnl0017fvujufrlj6uh"},{"post_id":"cjwu44hnf000kfvujivtt1djz","category_id":"cjwu44hni000vfvujwql7y4x9","_id":"cjwu44hnm0019fvuj8sl0dad5"},{"post_id":"cjwu44hnj0010fvujb2tiyhmw","category_id":"cjwu44hn80007fvuj5n3i9aj5","_id":"cjwu44hnn001cfvuj5qiw4a9x"},{"post_id":"cjwu44hnk0013fvuj44fn5raj","category_id":"cjwu44hn80007fvuj5n3i9aj5","_id":"cjwu44hnn001ffvujqxnf4715"},{"post_id":"cjwu44hnh000qfvujpyoxggkr","category_id":"cjwu44hnk0012fvuj6r8z664u","_id":"cjwu44hno001jfvujl67cifp5"},{"post_id":"cjwu44hnl0016fvujdzun9w9a","category_id":"cjwu44hn80007fvuj5n3i9aj5","_id":"cjwu44hnp001mfvujxhajkdjf"},{"post_id":"cjwu44hnl0018fvujnhmza394","category_id":"cjwu44hni000vfvujwql7y4x9","_id":"cjwu44hnq001pfvuj9ke30d05"},{"post_id":"cjwu44hnm001bfvujmytjn2w4","category_id":"cjwu44hnk0012fvuj6r8z664u","_id":"cjwu44hnq001sfvujqpn6is3w"},{"post_id":"cjwu44hnn001efvujli1rsg1p","category_id":"cjwu44hni000vfvujwql7y4x9","_id":"cjwu44hnr001ufvujfcbfj1pf"},{"post_id":"cjwu44hno001ifvujyuiupvdr","category_id":"cjwu44hn80007fvuj5n3i9aj5","_id":"cjwu44hnr001xfvujbrety6tp"},{"post_id":"cjwu44hno001lfvujadn5m18s","category_id":"cjwu44hn80007fvuj5n3i9aj5","_id":"cjwu44hnr001yfvujg585ljym"},{"post_id":"cjwu44hnp001ofvujdaa3zdx0","category_id":"cjwu44hn80007fvuj5n3i9aj5","_id":"cjwu44hnr0020fvujkocmqfhe"},{"post_id":"cjwu44hnq001rfvuj7z3r124q","category_id":"cjwu44hnr001wfvujebg587iv","_id":"cjwu44hns0024fvuj5vjukdtt"}],"PostTag":[{"post_id":"cjwu44hn30003fvujfoj35c76","tag_id":"cjwu44hn90008fvuj6om449g4","_id":"cjwu44hnd000efvujf4bkrhhz"},{"post_id":"cjwu44hn70005fvujeywbm80p","tag_id":"cjwu44hnc000dfvujhoibs916","_id":"cjwu44hnh000sfvuj7okiigpb"},{"post_id":"cjwu44hn70005fvujeywbm80p","tag_id":"cjwu44hnf000jfvuj3bn5vme0","_id":"cjwu44hni000wfvujjlrig8xv"},{"post_id":"cjwu44hn90009fvuj2qzku8gs","tag_id":"cjwu44hnh000pfvujus82ckw8","_id":"cjwu44hnn001dfvuj72cj9ohr"},{"post_id":"cjwu44hn90009fvuj2qzku8gs","tag_id":"cjwu44hni000xfvujaaeey5k3","_id":"cjwu44hnn001gfvujyzue2m7l"},{"post_id":"cjwu44hn90009fvuj2qzku8gs","tag_id":"cjwu44hnk0015fvujw6dxukdq","_id":"cjwu44hno001kfvujr1gxhlwd"},{"post_id":"cjwu44hna000afvuj5r4li4mb","tag_id":"cjwu44hnm001afvuj0r10bl1p","_id":"cjwu44hnq001qfvujcyno0un8"},{"post_id":"cjwu44hna000afvuj5r4li4mb","tag_id":"cjwu44hnn001hfvuj3nvali7y","_id":"cjwu44hnr001tfvuj664yd7la"},{"post_id":"cjwu44hnb000bfvujomwpg38w","tag_id":"cjwu44hnp001nfvujeoy86au3","_id":"cjwu44hnr0021fvuj94r1u4v9"},{"post_id":"cjwu44hnb000bfvujomwpg38w","tag_id":"cjwu44hnr001vfvujhkw6x3fk","_id":"cjwu44hns0022fvuji5ilehr8"},{"post_id":"cjwu44hnd000ffvuj0vbpspvw","tag_id":"cjwu44hnr001zfvujbdt1x2s2","_id":"cjwu44hns0025fvuj1iaki3si"},{"post_id":"cjwu44hne000gfvujrxyz0qk0","tag_id":"cjwu44hns0023fvujldgxq1yx","_id":"cjwu44hns0027fvujxj1kzgrd"},{"post_id":"cjwu44hnf000kfvujivtt1djz","tag_id":"cjwu44hns0026fvujvh1c6z9p","_id":"cjwu44hns0029fvujoiu5dlzb"},{"post_id":"cjwu44hng000mfvujvo8z89xs","tag_id":"cjwu44hns0028fvujraz1dr5e","_id":"cjwu44hnt002cfvuj1yokoczc"},{"post_id":"cjwu44hng000mfvujvo8z89xs","tag_id":"cjwu44hni000xfvujaaeey5k3","_id":"cjwu44hnt002dfvujgybw80cz"},{"post_id":"cjwu44hnh000qfvujpyoxggkr","tag_id":"cjwu44hnt002bfvujapvfbxaa","_id":"cjwu44hnt002ffvujpwk6n82s"},{"post_id":"cjwu44hni000tfvujv9q2wj0s","tag_id":"cjwu44hnt002efvuj49b9nmqf","_id":"cjwu44hnt002hfvuj051u0ixr"},{"post_id":"cjwu44hni000yfvujqd97r4ak","tag_id":"cjwu44hnt002gfvujgmauhd4w","_id":"cjwu44hnt002jfvuj9emovyf6"},{"post_id":"cjwu44hnj0010fvujb2tiyhmw","tag_id":"cjwu44hnt002ifvuj47p8yurz","_id":"cjwu44hnu002lfvujrc9iy41s"},{"post_id":"cjwu44hnk0013fvuj44fn5raj","tag_id":"cjwu44hnu002kfvujoepqw5bu","_id":"cjwu44hnu002ofvuj9hdujx59"},{"post_id":"cjwu44hnk0013fvuj44fn5raj","tag_id":"cjwu44hnu002mfvujt7rfzez9","_id":"cjwu44hnu002pfvujmr8vo279"},{"post_id":"cjwu44hnl0016fvujdzun9w9a","tag_id":"cjwu44hnu002nfvujm7gl2het","_id":"cjwu44hnv002sfvuj87ybbpis"},{"post_id":"cjwu44hnl0016fvujdzun9w9a","tag_id":"cjwu44hnu002qfvujssatlqso","_id":"cjwu44hnv002tfvujk31u1ofn"},{"post_id":"cjwu44hnm001bfvujmytjn2w4","tag_id":"cjwu44hnt002bfvujapvfbxaa","_id":"cjwu44hnv002vfvujcn8859c8"},{"post_id":"cjwu44hnn001efvujli1rsg1p","tag_id":"cjwu44hnv002ufvujluiyjefh","_id":"cjwu44hnv002xfvujwem2glz3"},{"post_id":"cjwu44hno001ifvujyuiupvdr","tag_id":"cjwu44hnv002wfvuji7fnhcxe","_id":"cjwu44hnw0030fvujkvcf13g3"},{"post_id":"cjwu44hno001ifvujyuiupvdr","tag_id":"cjwu44hnv002yfvujwu1x8636","_id":"cjwu44hnw0031fvujf8ge6mz4"},{"post_id":"cjwu44hno001lfvujadn5m18s","tag_id":"cjwu44hnv002zfvujp1re8lji","_id":"cjwu44hnw0034fvujo05i9u6v"},{"post_id":"cjwu44hno001lfvujadn5m18s","tag_id":"cjwu44hnw0032fvujglp4j3nb","_id":"cjwu44hnw0035fvujvxhtu5mz"},{"post_id":"cjwu44hnp001ofvujdaa3zdx0","tag_id":"cjwu44hnt002efvuj49b9nmqf","_id":"cjwu44hnw0037fvujtllckr17"},{"post_id":"cjwu44hnq001rfvuj7z3r124q","tag_id":"cjwu44hnw0036fvujttgwq6yt","_id":"cjwu44hnx0038fvujkn0naorm"}],"Tag":[{"name":"提问","_id":"cjwu44hn90008fvuj6om449g4"},{"name":"jekyll","_id":"cjwu44hnc000dfvujhoibs916"},{"name":"博客","_id":"cjwu44hnf000jfvuj3bn5vme0"},{"name":"bug","_id":"cjwu44hnh000pfvujus82ckw8"},{"name":"内存","_id":"cjwu44hni000xfvujaaeey5k3"},{"name":"死机","_id":"cjwu44hnk0015fvujw6dxukdq"},{"name":"开源","_id":"cjwu44hnm001afvuj0r10bl1p"},{"name":"redis","_id":"cjwu44hnn001hfvuj3nvali7y"},{"name":"自行车","_id":"cjwu44hnp001nfvujeoy86au3"},{"name":"游记","_id":"cjwu44hnr001vfvujhkw6x3fk"},{"name":"nginx","_id":"cjwu44hnr001zfvujbdt1x2s2"},{"name":"archlinux","_id":"cjwu44hns0023fvujldgxq1yx"},{"name":"Hexo","_id":"cjwu44hns0026fvujvh1c6z9p"},{"name":"c语言","_id":"cjwu44hns0028fvujraz1dr5e"},{"name":"工具","_id":"cjwu44hnt002bfvujapvfbxaa"},{"name":"iOS","_id":"cjwu44hnt002efvuj49b9nmqf"},{"name":"Xcode","_id":"cjwu44hnt002gfvujgmauhd4w"},{"name":"RESTFul API","_id":"cjwu44hnt002ifvuj47p8yurz"},{"name":"Swift","_id":"cjwu44hnu002kfvujoepqw5bu"},{"name":"翻译","_id":"cjwu44hnu002mfvujt7rfzez9"},{"name":"算子","_id":"cjwu44hnu002nfvujm7gl2het"},{"name":"ReactiveCocoa","_id":"cjwu44hnu002qfvujssatlqso"},{"name":"markdown","_id":"cjwu44hnv002ufvujluiyjefh"},{"name":"Pandas","_id":"cjwu44hnv002wfvuji7fnhcxe"},{"name":"数据分析","_id":"cjwu44hnv002yfvujwu1x8636"},{"name":"“机器学习”","_id":"cjwu44hnv002zfvujp1re8lji"},{"name":"“深度学习”","_id":"cjwu44hnw0032fvujglp4j3nb"},{"name":"读书笔记","_id":"cjwu44hnw0036fvujttgwq6yt"}]}}