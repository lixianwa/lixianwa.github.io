<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Actor on Lionel's Blog</title><link>https://lixianwa.github.io/tags/actor/</link><description>Recent content in Actor on Lionel's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&lt;a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">&lt;img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" />&lt;/a>&lt;br />本作品采用&lt;a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议&lt;/a>进行许可。</copyright><lastBuildDate>Tue, 22 Mar 2022 17:03:42 +0800</lastBuildDate><atom:link href="https://lixianwa.github.io/tags/actor/index.xml" rel="self" type="application/rss+xml"/><item><title>用Go实现Actor模型</title><link>https://lixianwa.github.io/posts/%E7%94%A8go%E5%AE%9E%E7%8E%B0actor%E6%A8%A1%E5%9E%8B/</link><pubDate>Tue, 22 Mar 2022 17:03:42 +0800</pubDate><guid>https://lixianwa.github.io/posts/%E7%94%A8go%E5%AE%9E%E7%8E%B0actor%E6%A8%A1%E5%9E%8B/</guid><description>&lt;p>随着多核CPU的出现，我们需要能够利用这些额外内核的编程模式，以并发的方式处理任务。
Actor模型就是这样一种模式，它模拟了大量独立的工作，以任何顺序处理，不需要锁同步。
Actor模型的一个非常普遍的用法可以在网络服务器中找到，Java中的Play! Java中的框架就是一个例子。一般来说，任何并发的应用程序都可以建立在Actor模型之上。&lt;/p>
&lt;p>在这篇文章中，我将实践如何用Go实现一个原始的actor模型。我们将利用Go为并发提供的工具&amp;ndash;goroutines、channels和wait groups。&lt;/p></description></item></channel></rss>