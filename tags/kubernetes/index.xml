<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kubernetes on Lionel's Blog</title><link>https://lixianwa.github.io/tags/kubernetes/</link><description>Recent content in Kubernetes on Lionel's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&lt;a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">&lt;img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" />&lt;/a>&lt;br />本作品采用&lt;a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议&lt;/a>进行许可。</copyright><lastBuildDate>Mon, 06 Jun 2022 09:55:51 +0800</lastBuildDate><atom:link href="https://lixianwa.github.io/tags/kubernetes/index.xml" rel="self" type="application/rss+xml"/><item><title>Kubernetes Istio Letsencrypt SSL证书安装</title><link>https://lixianwa.github.io/posts/kubernetes-istio-letsencrypt-ssl%E8%AF%81%E4%B9%A6%E5%AE%89%E8%A3%85/</link><pubDate>Mon, 06 Jun 2022 09:55:51 +0800</pubDate><guid>https://lixianwa.github.io/posts/kubernetes-istio-letsencrypt-ssl%E8%AF%81%E4%B9%A6%E5%AE%89%E8%A3%85/</guid><description>&lt;p>本教程教大家如何在Kubernetes集群中使用Cert Manager集成Letsencrypt SSL证书到Istio gateway中。&lt;/p></description></item><item><title>如何使用Kubernetes临时容器进行故障排查</title><link>https://lixianwa.github.io/posts/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8kubernetes%E4%B8%B4%E6%97%B6%E5%AE%B9%E5%99%A8%E8%BF%9B%E8%A1%8C%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5/</link><pubDate>Tue, 04 Jan 2022 09:41:06 +0800</pubDate><guid>https://lixianwa.github.io/posts/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8kubernetes%E4%B8%B4%E6%97%B6%E5%AE%B9%E5%99%A8%E8%BF%9B%E8%A1%8C%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5/</guid><description>&lt;p>容器及其周围的生态系统改变了工程师部署、维护和排查工作负载故障的方式。但是，在 Kubernetes 集群上调试应用程序有时可能会很困难，因为你可能在容器中找不到所需的调试工具。许多工程师使用基于精简、发行版构建无发行版的基础镜像，其中甚至没有包管理器或shell。甚至一些团队使用 scratch 作为基础镜像，并且只添加应用程序运行所需的文件。这种常见做法的一些原因是：&lt;/p>
&lt;ul>
&lt;li>具有较小的攻击区域。&lt;/li>
&lt;li>为了获得更快的扫描性能。&lt;/li>
&lt;li>减小了镜像大小。&lt;/li>
&lt;li>为了有更快的构建和更短CD/CI周期。&lt;/li>
&lt;li>减少依赖关系。&lt;/li>
&lt;/ul></description></item><item><title>Kubernetes最佳实践</title><link>https://lixianwa.github.io/posts/kubernetes%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link><pubDate>Wed, 22 Dec 2021 16:22:03 +0800</pubDate><guid>https://lixianwa.github.io/posts/kubernetes%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid><description>&lt;p>容器的使用越来越多，导致对Kubernetes等容器编排平台的需求随之上升。使用容器来打包应用程序，极大地简化了应用程序从开发到生产的部署过程。毫无疑问，Kubernetes作为一个平台协调器，通过引入其深奥的方式，进一步简化了这个过程。&lt;/p>
&lt;p>今天，我想谈谈我在使用Kubernetes时学到的一些好的做法，这些做法可以实现安全部署并推动集群的效率。
那么，让我们开始吧。&lt;/p></description></item><item><title>在Kubernetes上gRPC是如何通过Headless Service负载均衡</title><link>https://lixianwa.github.io/posts/%E5%9C%A8kubernetes%E4%B8%8Agrpc%E6%98%AF%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87headless-service%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</link><pubDate>Mon, 20 Dec 2021 14:59:52 +0800</pubDate><guid>https://lixianwa.github.io/posts/%E5%9C%A8kubernetes%E4%B8%8Agrpc%E6%98%AF%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87headless-service%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</guid><description>&lt;p>gRPC 是用于进程间通信的最流行的现代 RPC 框架之一。 它是微服务架构的绝佳选择。 而且，毫无疑问，部署微服务应用程序最流行的方式是 Kubernetes。&lt;/p>
&lt;p>Kubernetes部署可以具有相同的后端实例，为许多客户端请求提供服务。 Kubernetes 的 ClusterIP 服务提供负载均衡的IP地址。 但是这种默认的负载平衡不适用于gRPC开箱即用。&lt;/p>
&lt;p>如果你使用gRPC并在 Kubernetes 上部署了许多后端服务，那么本文档适合你。&lt;/p></description></item></channel></rss>