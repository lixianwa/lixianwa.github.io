<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on Lionel's Blog</title><link>https://lixianwa.github.io/tags/go/</link><description>Recent content in Go on Lionel's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&lt;a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">&lt;img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" />&lt;/a>&lt;br />本作品采用&lt;a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议&lt;/a>进行许可。</copyright><lastBuildDate>Sun, 19 Dec 2021 13:22:09 +0800</lastBuildDate><atom:link href="https://lixianwa.github.io/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>关于Go1.18你想知道的都在这里</title><link>https://lixianwa.github.io/posts/%E5%85%B3%E4%BA%8Ego1.18%E4%BD%A0%E6%83%B3%E7%9F%A5%E9%81%93%E7%9A%84%E9%83%BD%E5%9C%A8%E8%BF%99%E9%87%8C/</link><pubDate>Sun, 19 Dec 2021 13:22:09 +0800</pubDate><guid>https://lixianwa.github.io/posts/%E5%85%B3%E4%BA%8Ego1.18%E4%BD%A0%E6%83%B3%E7%9F%A5%E9%81%93%E7%9A%84%E9%83%BD%E5%9C%A8%E8%BF%99%E9%87%8C/</guid><description>原文：https://betterprogramming.pub/golang-1-18-what-you-need-to-know-a5701f7e14ab
在Go 1.18中，有两件大事是你需要知道的。类型参数(在其他语言中称为泛型)和模糊测试，但为什么它们如此重要？
Golang团队正在努力开发Go1.18，该版本将于2022年2月发布，它将是一个大的版本。Go1.18将引入泛型和模糊测试，这有可能彻底改变我们开发和测试Go程序的方式。我们将在下面看一下这两个新特性。
类型参数 类型参数将允许Go程序员用占位符类型名称定义函数和方法。这将允许开发人员编写可以在项目的不同部分重复使用的代码，但仍然可以对他们期望支持的所有数据类型进行通用处理。
让我们来看看一个普通的Go函数（在1.18之前），计算两个数中较小的一个数。
func min(a, b int) int { if a &amp;lt; b { return a } return b } 上面这个方法中，我们把两个整数作为参数，min(1,2)和min(2,1)都将返回1。到目前为止还不错，但是当你想得到两个浮点数的较小值时，怎么办呢？我们将不得不写一个新的函数，它需要两个浮点数作为参数，而且我们不能重复使用第一个函数的代码。函数的主体仍然是完全相同的代码。如果我们想得到两个float64数的较小值，我们将不得不再次编写相同的函数，以float64作为参数。
现在让我们来看看Go的泛型。你现在可以用一个任意的占位符类型名称来定义函数，这个名称将作为其他类型的参数。在Go中，泛型是以类型T的形式来写的。
这意味着你可以用任何占位符类型的名字来定义一个函数，这个名字以后会被另一个参数填入。现在我们用新的泛型方法重构之前的例子。
type numeric interface { type int, int8, int16, int32, int64, uint, uint8, uint16, uint32, uint64, float32, float64 } func min[T numeric](a, b T) T { if a &amp;lt; b { return a } return b } 如上，这段代码有点长。首先，我们定义一个接口，它将所有的数字类型声明为numeric的新类型。这意味着我们可以在泛型中使用float64和int。然后，像之前一样，我们定义一个新的min函数。
不同的是，现在这个函数在头部有一个类型参数：min[T numeric]&amp;hellip;. 这告诉Go，类型T应该是一个数字类型，所以是我们在接口中声明的任何类型。然后，像以前一样我们声明一个函数，只不过我们用T代替了int。
如果新的函数现在被调用，Go会检查用户提供的类型是否符合接口的要求。如果是的话，它将在整个函数中用该类型替换Tw。因此，如果我们输入一个int类型的数字，我们也会得到一个整数的回报。如果我们输入一个float64，我们将得到一个float64的返回值，以此类推。因此，我们现在有了一个单一的 &amp;ldquo;全能 &amp;ldquo;函数，而不是写12个内容完全相同的函数，但对Go中的每个数字类型都有不同的参数类型。</description></item></channel></rss>