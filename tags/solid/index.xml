<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SOLID on Lionel's Blog</title><link>https://lixianwa.github.io/tags/solid/</link><description>Recent content in SOLID on Lionel's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&lt;a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">&lt;img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" />&lt;/a>&lt;br />本作品采用&lt;a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议&lt;/a>进行许可。</copyright><lastBuildDate>Sun, 02 Jan 2022 17:22:59 +0800</lastBuildDate><atom:link href="https://lixianwa.github.io/tags/solid/index.xml" rel="self" type="application/rss+xml"/><item><title>Go语言SOLID实践系列三之接口隔离原则</title><link>https://lixianwa.github.io/posts/go%E8%AF%AD%E8%A8%80solid%E5%AE%9E%E8%B7%B5%E7%B3%BB%E5%88%97%E4%B8%89%E4%B9%8B%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99/</link><pubDate>Sun, 02 Jan 2022 17:22:59 +0800</pubDate><guid>https://lixianwa.github.io/posts/go%E8%AF%AD%E8%A8%80solid%E5%AE%9E%E8%B7%B5%E7%B3%BB%E5%88%97%E4%B8%89%E4%B9%8B%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99/</guid><description>&lt;p>引用wikipedia上对&lt;a href="https://zh.wikipedia.org/wiki/%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99">接口隔离原则&lt;/a>的解释：&lt;/p>
&lt;blockquote>
&lt;p>接口隔离原则（英语：interface-segregation principles， 缩写：ISP）指明客户（client）不应被迫使用对其而言无用的方法或功能。接口隔离原则（ISP）拆分非常庞大臃肿的接口成为更小的和更具体的接口，这样客户将会只需要知道他们感兴趣的方法。这种缩小的接口也被称为角色接口（role interfaces）。接口隔离原则（ISP）的目的是系统解开耦合，从而容易重构，更改和重新部署。接口隔离原则是在SOLID中五个面向对象设计（OOD）的原则之一，类似于在GRASP中的高内聚性。&lt;/p>
&lt;/blockquote></description></item><item><title>Go语言SOLID实践系列二之开闭原则</title><link>https://lixianwa.github.io/posts/go%E8%AF%AD%E8%A8%80solid%E5%AE%9E%E8%B7%B5%E7%B3%BB%E5%88%97%E4%BA%8C%E4%B9%8B%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/</link><pubDate>Sat, 25 Dec 2021 13:43:37 +0800</pubDate><guid>https://lixianwa.github.io/posts/go%E8%AF%AD%E8%A8%80solid%E5%AE%9E%E8%B7%B5%E7%B3%BB%E5%88%97%E4%BA%8C%E4%B9%8B%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/</guid><description>&lt;p>引用wikipedia上对&lt;code>开闭原则&lt;/code>的解释：&lt;/p>
&lt;blockquote>
&lt;p>在面向对象编程领域中，开闭原则 (The Open/Closed Principle, OCP) 规定“软件中的对象（类，模块，函数等等）应该对于扩展是开放的，但是对于修改是封闭的”，这意味着一个实体是允许在不改变它的源代码的前提下变更它的行为。该特性在产品化的环境中是特别有价值的，在这种环境中，改变源代码需要代码审查，单元测试以及诸如此类的用以确保产品使用品质的过程。遵循这种原则的代码在扩展时并不发生改变，因此无需上述的过程。&lt;/p>
&lt;/blockquote>
&lt;p>在本文中，我们将通过实践的方式深入探索这一原则。&lt;/p></description></item><item><title>SOLID的Go实践系列一之单一职责原则</title><link>https://lixianwa.github.io/posts/solid%E7%9A%84go%E5%AE%9E%E8%B7%B5%E7%B3%BB%E5%88%97%E4%B8%80%E4%B9%8B%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/</link><pubDate>Thu, 23 Dec 2021 11:17:05 +0800</pubDate><guid>https://lixianwa.github.io/posts/solid%E7%9A%84go%E5%AE%9E%E8%B7%B5%E7%B3%BB%E5%88%97%E4%B8%80%E4%B9%8B%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/</guid><description>&lt;h2 id="什么是solid">什么是&lt;code>SOLID&lt;/code>?&lt;/h2>
&lt;p>以下引用wikipedia上的解释：&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>SOLID&lt;/code>指面向对象编程和面向对象设计的五个基本原则。当这些原则被一起应用时，它们使得一个程序员开发一个容易进行软件维护和扩展的系统变得更加可能。&lt;code>SOLID&lt;/code>所包含的原则是通过引发编程者进行软件源代码的代码重构进行软件的代码异味清扫，从而使得软件清晰可读以及可扩展时可以应用的指南。&lt;code>SOLID&lt;/code>被典型的应用在测试驱动开发上，并且是敏捷开发以及自适应软件开发的基本原则的重要组成部分&lt;/p>
&lt;/blockquote></description></item></channel></rss>